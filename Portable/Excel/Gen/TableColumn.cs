/*
 * This is a generated file. 
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
namespace Microsoft.ExcelServices
{
	using System;
	/* Begin_PlaceHolder_UsingHeader */
	/* End_PlaceHolder_UsingHeader */

	/* Begin_PlaceHolder_Header */
	/* End_PlaceHolder_Header */
	public class TableColumn: OfficeExtension.ClientObject
	{
		private Microsoft.ExcelServices.Filter m_filter;
		private int m_id;
		private int m_index;
		private string m_name;
		private object[][] m_values;

		/* Begin_PlaceHolder_TableColumn_Custom_Members */
		/* End_PlaceHolder_TableColumn_Custom_Members */
		public TableColumn(OfficeExtension.ClientRequestContext context, OfficeExtension.ObjectPath objectPath)
			: base(context, objectPath)
		{
		}
		
		
		public Microsoft.ExcelServices.Filter Filter
		{
			get
			{
				if (this.m_filter == null)
				{
					this.m_filter = new Microsoft.ExcelServices.Filter(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Filter", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_filter;
			}
		}

		public int Id
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("id", this.m_id);
				return this.m_id;
			}
		}

		public int Index
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("index", this.m_index);
				return this.m_index;
			}
		}

		public string Name
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("name", this.m_name);
				return this.m_name;
			}
		}

		public object[][] Values
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("values", this.m_values);
				return this.m_values;
			}

			set
			{
				this.m_values = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "Values", value);
			}
		}

		public void Delete()
		{
			/* Begin_PlaceHolder_TableColumn_Delete */
			/* End_PlaceHolder_TableColumn_Delete */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Delete", OfficeExtension.OperationType.Default, new object[] {});
		}

		public Microsoft.ExcelServices.Range GetDataBodyRange()
		{
			/* Begin_PlaceHolder_TableColumn_GetDataBodyRange */
			/* End_PlaceHolder_TableColumn_GetDataBodyRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetDataBodyRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public Microsoft.ExcelServices.Range GetHeaderRowRange()
		{
			/* Begin_PlaceHolder_TableColumn_GetHeaderRowRange */
			/* End_PlaceHolder_TableColumn_GetHeaderRowRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetHeaderRowRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public Microsoft.ExcelServices.Range GetRange()
		{
			/* Begin_PlaceHolder_TableColumn_GetRange */
			/* End_PlaceHolder_TableColumn_GetRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public Microsoft.ExcelServices.Range GetTotalRowRange()
		{
			/* Begin_PlaceHolder_TableColumn_GetTotalRowRange */
			/* End_PlaceHolder_TableColumn_GetTotalRowRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetTotalRowRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

			/** Handle results returned from the document
			 */
		public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
		{
			if (OfficeExtension.Utility._IsNullOrUndefined(value))
			{
				return;
			}
			Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
			if (obj == null)
			{
				return;
			}
		
			OfficeExtension.Utility._FixObjectPathIfNecessary(this, obj);
			if (!OfficeExtension.Utility._IsUndefined(obj["Id"]))
			{
				this.m_id = obj["Id"].ToObject<int>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["Index"]))
			{
				this.m_index = obj["Index"].ToObject<int>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["Name"]))
			{
				this.m_name = obj["Name"].ToObject<string>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["Values"]))
			{
				this.m_values = obj["Values"].ToObject<object[][]>();
			}
		
		    if (!OfficeExtension.Utility._IsUndefined(obj["Filter"]))
			{
		        this.Filter._HandleResult(obj["Filter"]);
			}
		}
		
		/*
		 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
		 */
		public Microsoft.ExcelServices.TableColumn Load(OfficeExtension.LoadOption option) 
		{
			OfficeExtension.Utility._Load(this, option);
			return this;
		}
	}
}

