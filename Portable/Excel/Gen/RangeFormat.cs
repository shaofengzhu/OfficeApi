/*
 * This is a generated file. 
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
namespace Microsoft.ExcelServices
{
	using System;
	/* Begin_PlaceHolder_UsingHeader */
	/* End_PlaceHolder_UsingHeader */

	/* Begin_PlaceHolder_Header */
	/* End_PlaceHolder_Header */
	public class RangeFormat: OfficeExtension.ClientObject
	{
		private Microsoft.ExcelServices.RangeBorderCollection m_borders;
		private double m_columnWidth;
		private Microsoft.ExcelServices.RangeFill m_fill;
		private Microsoft.ExcelServices.RangeFont m_font;
		private string m_horizontalAlignment;
		private Microsoft.ExcelServices.FormatProtection m_protection;
		private double m_rowHeight;
		private string m_verticalAlignment;
		private bool m_wrapText;

		/* Begin_PlaceHolder_RangeFormat_Custom_Members */
		/* End_PlaceHolder_RangeFormat_Custom_Members */
		public RangeFormat(OfficeExtension.ClientRequestContext context, OfficeExtension.ObjectPath objectPath)
			: base(context, objectPath)
		{
		}
		
		
		public Microsoft.ExcelServices.RangeBorderCollection Borders
		{
			get
			{
				if (this.m_borders == null)
				{
					this.m_borders = new Microsoft.ExcelServices.RangeBorderCollection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Borders", true /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_borders;
			}
		}
		
		public Microsoft.ExcelServices.RangeFill Fill
		{
			get
			{
				if (this.m_fill == null)
				{
					this.m_fill = new Microsoft.ExcelServices.RangeFill(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Fill", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_fill;
			}
		}
		
		public Microsoft.ExcelServices.RangeFont Font
		{
			get
			{
				if (this.m_font == null)
				{
					this.m_font = new Microsoft.ExcelServices.RangeFont(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Font", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_font;
			}
		}
		
		public Microsoft.ExcelServices.FormatProtection Protection
		{
			get
			{
				if (this.m_protection == null)
				{
					this.m_protection = new Microsoft.ExcelServices.FormatProtection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Protection", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_protection;
			}
		}

		public double ColumnWidth
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("columnWidth", this.m_columnWidth);
				return this.m_columnWidth;
			}

			set
			{
				this.m_columnWidth = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "ColumnWidth", value);
			}
		}

		public string HorizontalAlignment
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("horizontalAlignment", this.m_horizontalAlignment);
				return this.m_horizontalAlignment;
			}

			set
			{
				this.m_horizontalAlignment = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "HorizontalAlignment", value);
			}
		}

		public double RowHeight
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("rowHeight", this.m_rowHeight);
				return this.m_rowHeight;
			}

			set
			{
				this.m_rowHeight = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "RowHeight", value);
			}
		}

		public string VerticalAlignment
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("verticalAlignment", this.m_verticalAlignment);
				return this.m_verticalAlignment;
			}

			set
			{
				this.m_verticalAlignment = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "VerticalAlignment", value);
			}
		}

		public bool WrapText
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("wrapText", this.m_wrapText);
				return this.m_wrapText;
			}

			set
			{
				this.m_wrapText = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "WrapText", value);
			}
		}

		public void AutofitColumns()
		{
			/* Begin_PlaceHolder_RangeFormat_AutofitColumns */
			/* End_PlaceHolder_RangeFormat_AutofitColumns */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "AutofitColumns", OfficeExtension.OperationType.Default, new object[] {});
		}

		public void AutofitRows()
		{
			/* Begin_PlaceHolder_RangeFormat_AutofitRows */
			/* End_PlaceHolder_RangeFormat_AutofitRows */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "AutofitRows", OfficeExtension.OperationType.Default, new object[] {});
		}

			/** Handle results returned from the document
			 */
		public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
		{
			if (OfficeExtension.Utility._IsNullOrUndefined(value))
			{
				return;
			}
			Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
			if (obj == null)
			{
				return;
			}
		
			OfficeExtension.Utility._FixObjectPathIfNecessary(this, obj);
			if (!OfficeExtension.Utility._IsUndefined(obj["ColumnWidth"]))
			{
				this.m_columnWidth = obj["ColumnWidth"].ToObject<double>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["HorizontalAlignment"]))
			{
				this.m_horizontalAlignment = obj["HorizontalAlignment"].ToObject<string>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["RowHeight"]))
			{
				this.m_rowHeight = obj["RowHeight"].ToObject<double>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["VerticalAlignment"]))
			{
				this.m_verticalAlignment = obj["VerticalAlignment"].ToObject<string>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["WrapText"]))
			{
				this.m_wrapText = obj["WrapText"].ToObject<bool>();
			}
		
		    if (!OfficeExtension.Utility._IsUndefined(obj["Borders"]))
			{
		        this.Borders._HandleResult(obj["Borders"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Fill"]))
			{
		        this.Fill._HandleResult(obj["Fill"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Font"]))
			{
		        this.Font._HandleResult(obj["Font"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Protection"]))
			{
		        this.Protection._HandleResult(obj["Protection"]);
			}
		}
		
		/*
		 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
		 */
		public Microsoft.ExcelServices.RangeFormat Load(OfficeExtension.LoadOption option) 
		{
			OfficeExtension.Utility._Load(this, option);
			return this;
		}
	}
}

