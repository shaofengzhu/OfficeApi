/*
 * This is a generated file. 
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
namespace Microsoft.ExcelServices
{
	using System;
	/* Begin_PlaceHolder_UsingHeader */
	/* End_PlaceHolder_UsingHeader */

	/* Begin_PlaceHolder_Header */
	/* End_PlaceHolder_Header */
	public class TableSort: OfficeExtension.ClientObject
	{
		private Microsoft.ExcelServices.SortField[] m_fields;
		private bool m_matchCase;
		private string m_method;

		/* Begin_PlaceHolder_TableSort_Custom_Members */
		/* End_PlaceHolder_TableSort_Custom_Members */
		public TableSort(OfficeExtension.ClientRequestContext context, OfficeExtension.ObjectPath objectPath)
			: base(context, objectPath)
		{
		}
		

		public Microsoft.ExcelServices.SortField[] Fields
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded(this, "fields", this.m_fields);
				return this.m_fields;
			}
		}

		public bool MatchCase
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded(this, "matchCase", this.m_matchCase);
				return this.m_matchCase;
			}
		}

		public string Method
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded(this, "method", this.m_method);
				return this.m_method;
			}
		}

		public void Apply(Microsoft.ExcelServices.SortField[] fields, bool matchCase, string method)
		{
			/* Begin_PlaceHolder_TableSort_Apply */
			/* End_PlaceHolder_TableSort_Apply */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Apply", OfficeExtension.OperationType.Default, new object[] {fields, matchCase, method});
		}

		public void Clear()
		{
			/* Begin_PlaceHolder_TableSort_Clear */
			/* End_PlaceHolder_TableSort_Clear */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Clear", OfficeExtension.OperationType.Default, new object[] {});
		}

		public void Reapply()
		{
			/* Begin_PlaceHolder_TableSort_Reapply */
			/* End_PlaceHolder_TableSort_Reapply */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Reapply", OfficeExtension.OperationType.Default, new object[] {});
		}

			/** Handle results returned from the document
			 */
		public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
		{
			if (OfficeExtension.Utility._IsNullOrUndefined(value))
			{
				return;
			}
			Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
			if (obj == null)
			{
				return;
			}
		
			OfficeExtension.Utility._FixObjectPathIfNecessary(this, obj);
			if (!OfficeExtension.Utility._IsUndefined(obj["Fields"]))
			{
				this.LoadedPropertyNames.Add("Fields");
				this.m_fields = obj["Fields"].ToObject<Microsoft.ExcelServices.SortField[]>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["MatchCase"]))
			{
				this.LoadedPropertyNames.Add("MatchCase");
				this.m_matchCase = obj["MatchCase"].ToObject<bool>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["Method"]))
			{
				this.LoadedPropertyNames.Add("Method");
				this.m_method = obj["Method"].ToObject<string>();
			}
		
		}
		
		/*
		 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
		 */
		public Microsoft.ExcelServices.TableSort Load(OfficeExtension.LoadOption option) 
		{
			OfficeExtension.Utility._Load(this, option);
			return this;
		}
	}
}

