/*
 * This is a generated file. 
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
namespace Microsoft.ExcelServices
{
	using System;
	/* Begin_PlaceHolder_UsingHeader */
	/* End_PlaceHolder_UsingHeader */

	/* Begin_PlaceHolder_Header */
	/* End_PlaceHolder_Header */
	public class Application: OfficeExtension.ClientObject
	{
		private string m_calculationMode;

		/* Begin_PlaceHolder_Application_Custom_Members */
		/* End_PlaceHolder_Application_Custom_Members */
		public Application(OfficeExtension.ClientRequestContext context, OfficeExtension.ObjectPath objectPath)
			: base(context, objectPath)
		{
		}
		

		public string CalculationMode
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("calculationMode", this.m_calculationMode);
				return this.m_calculationMode;
			}
		}

		public void Calculate(string calculationType)
		{
			/* Begin_PlaceHolder_Application_Calculate */
			/* End_PlaceHolder_Application_Calculate */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Calculate", OfficeExtension.OperationType.Default, new object[] {calculationType});
		}

			/** Handle results returned from the document
			 */
		public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
		{
			if (OfficeExtension.Utility._IsNullOrUndefined(value))
			{
				return;
			}
			Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
			if (obj == null)
			{
				return;
			}
		
			OfficeExtension.Utility._FixObjectPathIfNecessary(this, obj);
			if (!OfficeExtension.Utility._IsUndefined(obj["CalculationMode"]))
			{
				this.m_calculationMode = obj["CalculationMode"].ToObject<string>();
			}
		
		}
		
		/*
		 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
		 */
		public Microsoft.ExcelServices.Application Load(OfficeExtension.LoadOption option) 
		{
			OfficeExtension.Utility._Load(this, option);
			return this;
		}
	}
}

