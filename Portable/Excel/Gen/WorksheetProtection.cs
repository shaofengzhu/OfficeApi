/*
 * This is a generated file. 
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
namespace Microsoft.ExcelServices
{
	using System;
	/* Begin_PlaceHolder_UsingHeader */
	/* End_PlaceHolder_UsingHeader */

	/* Begin_PlaceHolder_Header */
	/* End_PlaceHolder_Header */
	public class WorksheetProtection: OfficeExtension.ClientObject
	{
		private Microsoft.ExcelServices.WorksheetProtectionOptions m_options;
		private bool m_protected;

		/* Begin_PlaceHolder_WorksheetProtection_Custom_Members */
		/* End_PlaceHolder_WorksheetProtection_Custom_Members */
		public WorksheetProtection(OfficeExtension.ClientRequestContext context, OfficeExtension.ObjectPath objectPath)
			: base(context, objectPath)
		{
		}
		

		public Microsoft.ExcelServices.WorksheetProtectionOptions Options
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("options", this.m_options);
				return this.m_options;
			}
		}

		public bool Protected
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("protected", this.m_protected);
				return this.m_protected;
			}
		}

		public void Protect(Microsoft.ExcelServices.WorksheetProtectionOptions options, string password)
		{
			/* Begin_PlaceHolder_WorksheetProtection_Protect */
			/* End_PlaceHolder_WorksheetProtection_Protect */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Protect", OfficeExtension.OperationType.Default, new object[] {options, password});
		}

		public void Unprotect(string password)
		{
			/* Begin_PlaceHolder_WorksheetProtection_Unprotect */
			/* End_PlaceHolder_WorksheetProtection_Unprotect */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Unprotect", OfficeExtension.OperationType.Default, new object[] {password});
		}

			/** Handle results returned from the document
			 */
		public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
		{
			if (OfficeExtension.Utility._IsNullOrUndefined(value))
			{
				return;
			}
			Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
			if (obj == null)
			{
				return;
			}
		
			OfficeExtension.Utility._FixObjectPathIfNecessary(this, obj);
			if (!OfficeExtension.Utility._IsUndefined(obj["Options"]))
			{
				this.m_options = obj["Options"].ToObject<Microsoft.ExcelServices.WorksheetProtectionOptions>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["Protected"]))
			{
				this.m_protected = obj["Protected"].ToObject<bool>();
			}
		
		}
		
		/*
		 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
		 */
		public Microsoft.ExcelServices.WorksheetProtection Load(OfficeExtension.LoadOption option) 
		{
			OfficeExtension.Utility._Load(this, option);
			return this;
		}
	}
}

