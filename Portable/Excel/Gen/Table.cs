/*
 * This is a generated file. 
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
namespace Microsoft.ExcelServices
{
	using System;
	/* Begin_PlaceHolder_UsingHeader */
	/* End_PlaceHolder_UsingHeader */

	/* Begin_PlaceHolder_Header */
	/* End_PlaceHolder_Header */
	public class Table: OfficeExtension.ClientObject
	{
		private Microsoft.ExcelServices.TableColumnCollection m_columns;
		private int m_id;
		private string m_name;
		private Microsoft.ExcelServices.TableRowCollection m_rows;
		private bool m_showHeaders;
		private bool m_showTotals;
		private Microsoft.ExcelServices.TableSort m_sort;
		private string m_style;
		private Microsoft.ExcelServices.Worksheet m_worksheet;

		/* Begin_PlaceHolder_Table_Custom_Members */
		/* End_PlaceHolder_Table_Custom_Members */
		public Table(OfficeExtension.ClientRequestContext context, OfficeExtension.ObjectPath objectPath)
			: base(context, objectPath)
		{
		}
		
		
		public Microsoft.ExcelServices.TableColumnCollection Columns
		{
			get
			{
				if (this.m_columns == null)
				{
					this.m_columns = new Microsoft.ExcelServices.TableColumnCollection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Columns", true /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_columns;
			}
		}
		
		public Microsoft.ExcelServices.TableRowCollection Rows
		{
			get
			{
				if (this.m_rows == null)
				{
					this.m_rows = new Microsoft.ExcelServices.TableRowCollection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Rows", true /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_rows;
			}
		}
		
		public Microsoft.ExcelServices.TableSort Sort
		{
			get
			{
				if (this.m_sort == null)
				{
					this.m_sort = new Microsoft.ExcelServices.TableSort(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Sort", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_sort;
			}
		}
		
		public Microsoft.ExcelServices.Worksheet Worksheet
		{
			get
			{
				if (this.m_worksheet == null)
				{
					this.m_worksheet = new Microsoft.ExcelServices.Worksheet(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Worksheet", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_worksheet;
			}
		}

		public int Id
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("id", this.m_id);
				return this.m_id;
			}
		}

		public string Name
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("name", this.m_name);
				return this.m_name;
			}

			set
			{
				this.m_name = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "Name", value);
			}
		}

		public bool ShowHeaders
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("showHeaders", this.m_showHeaders);
				return this.m_showHeaders;
			}

			set
			{
				this.m_showHeaders = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "ShowHeaders", value);
			}
		}

		public bool ShowTotals
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("showTotals", this.m_showTotals);
				return this.m_showTotals;
			}

			set
			{
				this.m_showTotals = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "ShowTotals", value);
			}
		}

		public string Style
		{
			get
			{
				OfficeExtension.Utility._ThrowIfNotLoaded("style", this.m_style);
				return this.m_style;
			}

			set
			{
				this.m_style = value;
				OfficeExtension.ActionFactory._CreateSetPropertyAction(this.Context, this, "Style", value);
			}
		}

		public void ClearFilters()
		{
			/* Begin_PlaceHolder_Table_ClearFilters */
			/* End_PlaceHolder_Table_ClearFilters */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "ClearFilters", OfficeExtension.OperationType.Default, new object[] {});
		}

		public Microsoft.ExcelServices.Range ConvertToRange()
		{
			/* Begin_PlaceHolder_Table_ConvertToRange */
			/* End_PlaceHolder_Table_ConvertToRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "ConvertToRange", OfficeExtension.OperationType.Default, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public void Delete()
		{
			/* Begin_PlaceHolder_Table_Delete */
			/* End_PlaceHolder_Table_Delete */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "Delete", OfficeExtension.OperationType.Default, new object[] {});
		}

		public Microsoft.ExcelServices.Range GetDataBodyRange()
		{
			/* Begin_PlaceHolder_Table_GetDataBodyRange */
			/* End_PlaceHolder_Table_GetDataBodyRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetDataBodyRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public Microsoft.ExcelServices.Range GetHeaderRowRange()
		{
			/* Begin_PlaceHolder_Table_GetHeaderRowRange */
			/* End_PlaceHolder_Table_GetHeaderRowRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetHeaderRowRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public Microsoft.ExcelServices.Range GetRange()
		{
			/* Begin_PlaceHolder_Table_GetRange */
			/* End_PlaceHolder_Table_GetRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public Microsoft.ExcelServices.Range GetTotalRowRange()
		{
			/* Begin_PlaceHolder_Table_GetTotalRowRange */
			/* End_PlaceHolder_Table_GetTotalRowRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetTotalRowRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public void ReapplyFilters()
		{
			/* Begin_PlaceHolder_Table_ReapplyFilters */
			/* End_PlaceHolder_Table_ReapplyFilters */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "ReapplyFilters", OfficeExtension.OperationType.Default, new object[] {});
		}

			/** Handle results returned from the document
			 */
		public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
		{
			if (OfficeExtension.Utility._IsNullOrUndefined(value))
			{
				return;
			}
			Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
			if (obj == null)
			{
				return;
			}
		
			OfficeExtension.Utility._FixObjectPathIfNecessary(this, obj);
			if (!OfficeExtension.Utility._IsUndefined(obj["Id"]))
			{
				this.m_id = obj["Id"].ToObject<int>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["Name"]))
			{
				this.m_name = obj["Name"].ToObject<string>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["ShowHeaders"]))
			{
				this.m_showHeaders = obj["ShowHeaders"].ToObject<bool>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["ShowTotals"]))
			{
				this.m_showTotals = obj["ShowTotals"].ToObject<bool>();
			}
		
			if (!OfficeExtension.Utility._IsUndefined(obj["Style"]))
			{
				this.m_style = obj["Style"].ToObject<string>();
			}
		
		    if (!OfficeExtension.Utility._IsUndefined(obj["Columns"]))
			{
		        this.Columns._HandleResult(obj["Columns"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Rows"]))
			{
		        this.Rows._HandleResult(obj["Rows"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Sort"]))
			{
		        this.Sort._HandleResult(obj["Sort"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Worksheet"]))
			{
		        this.Worksheet._HandleResult(obj["Worksheet"]);
			}
		}
		
		/*
		 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
		 */
		public Microsoft.ExcelServices.Table Load(OfficeExtension.LoadOption option) 
		{
			OfficeExtension.Utility._Load(this, option);
			return this;
		}
	}
}

