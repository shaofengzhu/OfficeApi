/*
 * This is a generated file. 
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
namespace Microsoft.ExcelServices
{
	using System;
	/* Begin_PlaceHolder_UsingHeader */
	/* End_PlaceHolder_UsingHeader */

	/* Begin_PlaceHolder_Header */
	/* End_PlaceHolder_Header */
	public class Workbook: OfficeExtension.ClientObject
	{
		private Microsoft.ExcelServices.Application m_application;
		private Microsoft.ExcelServices.BindingCollection m_bindings;
		private Microsoft.ExcelServices.Functions m_functions;
		private Microsoft.ExcelServices.NamedItemCollection m_names;
		private Microsoft.ExcelServices.TableCollection m_tables;
		private Microsoft.ExcelServices.WorksheetCollection m_worksheets;

		/* Begin_PlaceHolder_Workbook_Custom_Members */
		/* End_PlaceHolder_Workbook_Custom_Members */
		public Workbook(OfficeExtension.ClientRequestContext context, OfficeExtension.ObjectPath objectPath)
			: base(context, objectPath)
		{
		}
		
		
		public Microsoft.ExcelServices.Application Application
		{
			get
			{
				if (this.m_application == null)
				{
					this.m_application = new Microsoft.ExcelServices.Application(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Application", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_application;
			}
		}
		
		public Microsoft.ExcelServices.BindingCollection Bindings
		{
			get
			{
				if (this.m_bindings == null)
				{
					this.m_bindings = new Microsoft.ExcelServices.BindingCollection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Bindings", true /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_bindings;
			}
		}
		
		public Microsoft.ExcelServices.Functions Functions
		{
			get
			{
				if (this.m_functions == null)
				{
					this.m_functions = new Microsoft.ExcelServices.Functions(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Functions", false /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_functions;
			}
		}
		
		public Microsoft.ExcelServices.NamedItemCollection Names
		{
			get
			{
				if (this.m_names == null)
				{
					this.m_names = new Microsoft.ExcelServices.NamedItemCollection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Names", true /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_names;
			}
		}
		
		public Microsoft.ExcelServices.TableCollection Tables
		{
			get
			{
				if (this.m_tables == null)
				{
					this.m_tables = new Microsoft.ExcelServices.TableCollection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Tables", true /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_tables;
			}
		}
		
		public Microsoft.ExcelServices.WorksheetCollection Worksheets
		{
			get
			{
				if (this.m_worksheets == null)
				{
					this.m_worksheets = new Microsoft.ExcelServices.WorksheetCollection(this.Context, OfficeExtension.ObjectPathFactory._CreatePropertyObjectPath(this.Context, this, "Worksheets", true /*isCollection*/, false /*isInvalidAfterRequest*/));	
				}
		
				return this.m_worksheets;
			}
		}

		public Microsoft.ExcelServices.Range GetSelectedRange()
		{
			/* Begin_PlaceHolder_Workbook_GetSelectedRange */
			/* End_PlaceHolder_Workbook_GetSelectedRange */
			return new Microsoft.ExcelServices.Range(this.Context, OfficeExtension.ObjectPathFactory._CreateMethodObjectPath(this.Context, this, "GetSelectedRange", OfficeExtension.OperationType.Read, new object[] {}, false /*isCollection*/, true /*isInvalidAfterRequest*/));
		}

		public OfficeExtension.ClientResult< object > _GetObjectByReferenceId(string bstrReferenceId)
		{
			/* Begin_PlaceHolder_Workbook__GetObjectByReferenceId */
			/* End_PlaceHolder_Workbook__GetObjectByReferenceId */
			var action = OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "_GetObjectByReferenceId", OfficeExtension.OperationType.Read, new object[] {bstrReferenceId});
			var ret = new OfficeExtension.ClientResult< object >();
			OfficeExtension.Utility._AddActionResultHandler(this, action, ret);
			return ret;
		}

		public OfficeExtension.ClientResult< string > _GetObjectTypeNameByReferenceId(string bstrReferenceId)
		{
			/* Begin_PlaceHolder_Workbook__GetObjectTypeNameByReferenceId */
			/* End_PlaceHolder_Workbook__GetObjectTypeNameByReferenceId */
			var action = OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "_GetObjectTypeNameByReferenceId", OfficeExtension.OperationType.Read, new object[] {bstrReferenceId});
			var ret = new OfficeExtension.ClientResult< string >();
			OfficeExtension.Utility._AddActionResultHandler(this, action, ret);
			return ret;
		}

		public OfficeExtension.ClientResult< int > _GetReferenceCount()
		{
			/* Begin_PlaceHolder_Workbook__GetReferenceCount */
			/* End_PlaceHolder_Workbook__GetReferenceCount */
			var action = OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "_GetReferenceCount", OfficeExtension.OperationType.Read, new object[] {});
			var ret = new OfficeExtension.ClientResult< int >();
			OfficeExtension.Utility._AddActionResultHandler(this, action, ret);
			return ret;
		}

		public void _RemoveAllReferences()
		{
			/* Begin_PlaceHolder_Workbook__RemoveAllReferences */
			/* End_PlaceHolder_Workbook__RemoveAllReferences */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "_RemoveAllReferences", OfficeExtension.OperationType.Read, new object[] {});
		}

		public void _RemoveReference(string bstrReferenceId)
		{
			/* Begin_PlaceHolder_Workbook__RemoveReference */
			/* End_PlaceHolder_Workbook__RemoveReference */
			OfficeExtension.ActionFactory._CreateMethodAction(this.Context, this, "_RemoveReference", OfficeExtension.OperationType.Read, new object[] {bstrReferenceId});
		}

			/** Handle results returned from the document
			 */
		public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
		{
			if (OfficeExtension.Utility._IsNullOrUndefined(value))
			{
				return;
			}
			Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
			if (obj == null)
			{
				return;
			}
		
			OfficeExtension.Utility._FixObjectPathIfNecessary(this, obj);
		    if (!OfficeExtension.Utility._IsUndefined(obj["Application"]))
			{
		        this.Application._HandleResult(obj["Application"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Bindings"]))
			{
		        this.Bindings._HandleResult(obj["Bindings"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Functions"]))
			{
		        this.Functions._HandleResult(obj["Functions"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Names"]))
			{
		        this.Names._HandleResult(obj["Names"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Tables"]))
			{
		        this.Tables._HandleResult(obj["Tables"]);
			}
		    if (!OfficeExtension.Utility._IsUndefined(obj["Worksheets"]))
			{
		        this.Worksheets._HandleResult(obj["Worksheets"]);
			}
		}
		
		/*
		 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
		 */
		public Microsoft.ExcelServices.Workbook Load(OfficeExtension.LoadOption option) 
		{
			OfficeExtension.Utility._Load(this, option);
			return this;
		}
	}
}

