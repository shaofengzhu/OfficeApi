var oe = require('./OfficeExtension.js')
var OfficeExtension = oe.OfficeExtension;
/*
 * This is a generated file.  Generated by WdJscomApiGen.bat.
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */
/* Begin_PlaceHolder_GlobalHeader */
/* End_PlaceHolder_GlobalHeader */
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Word;
(function (Word) {
    /* Begin_PlaceHolder_ModuleHeader */
    // OM #2478931 : Workaround to let developer create SearchOptions object without "context" param.
    // e.g. var myResults = ctx.document.body.search("Hello", { matchCase : true });
    function _normalizeSearchOptions(context, searchOptions) {
        if (OfficeExtension.Utility.isNullOrUndefined(searchOptions)) {
            return null;
        }
        if (typeof (searchOptions) != "object") {
            OfficeExtension.Utility.throwError(OfficeExtension.ResourceStrings.invalidArgument, "searchOptions");
        }
        if (searchOptions instanceof Word.SearchOptions) {
            return searchOptions;
        }
        var newSearchOptions = Word.SearchOptions.newObject(context);
        for (var property in searchOptions) {
            if (searchOptions.hasOwnProperty(property)) {
                newSearchOptions[property] = searchOptions[property];
            }
        }
        return newSearchOptions;
    }
    /* End_PlaceHolder_ModuleHeader */
    var _createPropertyObjectPath = OfficeExtension.ObjectPathFactory.createPropertyObjectPath;
    var _createMethodObjectPath = OfficeExtension.ObjectPathFactory.createMethodObjectPath;
    var _createIndexerObjectPath = OfficeExtension.ObjectPathFactory.createIndexerObjectPath;
    var _createNewObjectObjectPath = OfficeExtension.ObjectPathFactory.createNewObjectObjectPath;
    var _createChildItemObjectPathUsingIndexer = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexer;
    var _createChildItemObjectPathUsingGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingGetItemAt;
    var _createChildItemObjectPathUsingIndexerOrGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexerOrGetItemAt;
    var _createMethodAction = OfficeExtension.ActionFactory.createMethodAction;
    var _createSetPropertyAction = OfficeExtension.ActionFactory.createSetPropertyAction;
    var _isNullOrUndefined = OfficeExtension.Utility.isNullOrUndefined;
    var _isUndefined = OfficeExtension.Utility.isUndefined;
    var _throwIfNotLoaded = OfficeExtension.Utility.throwIfNotLoaded; // Cast to "any" so that can accept either 2 OR 3 arguments in older (in-branch) Utility.ts code. Can remove this eventually when code has FI-ed, though no harm in leaving it as is, either.
    var _load = OfficeExtension.Utility.load;
    var _fixObjectPathIfNecessary = OfficeExtension.Utility.fixObjectPathIfNecessary;
    var _addActionResultHandler = OfficeExtension.Utility._addActionResultHandler;
    var _handleNavigationPropertyResults = OfficeExtension.Utility._handleNavigationPropertyResults;
    var _adjustToDateTime = OfficeExtension.Utility.adjustToDateTime;
    /**
     *
     * The Application object.
     *
     * [Api set: WordApi 1.3]
     */
    var Application = (function (_super) {
        __extends(Application, _super);
        function Application() {
            _super.apply(this, arguments);
        }
        /* Begin_PlaceHolder_Application_Custom_Members */
        /* End_PlaceHolder_Application_Custom_Members */
        /**
         *
         * Creates a new document by using a base64 encoded .docx file.
         *
         * @param base64File Optional. The base64 encoded .docx file. The default value is null.
         *
         * [Api set: WordApi 1.3]
         */
        Application.prototype.createDocument = function (base64File) {
            /* Begin_PlaceHolder_Application_CreateDocument */
            /* End_PlaceHolder_Application_CreateDocument */
            return new Word.Document(this.context, _createMethodObjectPath(this.context, this, "CreateDocument", 1 /* Read */, [base64File], false, false, null));
        };
        /** Handle results returned from the document
         * @private
         */
        Application.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        /**
         * Create a new instance of Word.Application object
         */
        Application.newObject = function (context) {
            var ret = new Word.Application(context, _createNewObjectObjectPath(context, "Microsoft.WordServices.Application", false));
            return ret;
        };
        Application.prototype.toJSON = function () {
            return {};
        };
        return Application;
    })(OfficeExtension.ClientObject);
    Word.Application = Application;
    /**
     *
     * Represents the body of a document or a section.
     *
     * [Api set: WordApi 1.1]
     */
    var Body = (function (_super) {
        __extends(Body, _super);
        function Body() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Body.prototype, "contentControls", {
            /* Begin_PlaceHolder_Body_Custom_Members */
            /* End_PlaceHolder_Body_Custom_Members */
            /**
             *
             * Gets the collection of rich text content control objects in the body. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_ContentControls_get */
                /* End_PlaceHolder_Body_ContentControls_get */
                if (!this.m_contentControls) {
                    this.m_contentControls = new Word.ContentControlCollection(this.context, _createPropertyObjectPath(this.context, this, "ContentControls", true, false));
                }
                return this.m_contentControls;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "font", {
            /**
             *
             * Gets the text format of the body. Use this to get and set font name, size, color and other properties. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_Font_get */
                /* End_PlaceHolder_Body_Font_get */
                if (!this.m_font) {
                    this.m_font = new Word.Font(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false));
                }
                return this.m_font;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "inlinePictures", {
            /**
             *
             * Gets the collection of inlinePicture objects in the body. The collection does not include floating images. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_InlinePictures_get */
                /* End_PlaceHolder_Body_InlinePictures_get */
                if (!this.m_inlinePictures) {
                    this.m_inlinePictures = new Word.InlinePictureCollection(this.context, _createPropertyObjectPath(this.context, this, "InlinePictures", true, false));
                }
                return this.m_inlinePictures;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "lists", {
            /**
             *
             * Gets the collection of list objects in the body. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_Lists_get */
                /* End_PlaceHolder_Body_Lists_get */
                if (!this.m_lists) {
                    this.m_lists = new Word.ListCollection(this.context, _createPropertyObjectPath(this.context, this, "Lists", true, false));
                }
                return this.m_lists;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "paragraphs", {
            /**
             *
             * Gets the collection of paragraph objects in the body. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_Paragraphs_get */
                /* End_PlaceHolder_Body_Paragraphs_get */
                if (!this.m_paragraphs) {
                    this.m_paragraphs = new Word.ParagraphCollection(this.context, _createPropertyObjectPath(this.context, this, "Paragraphs", true, false));
                }
                return this.m_paragraphs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "parentBody", {
            /**
             *
             * Gets the parent body of the body. For example, a table cell body's parent body could be a header. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_ParentBody_get */
                /* End_PlaceHolder_Body_ParentBody_get */
                if (!this.m_parentBody) {
                    this.m_parentBody = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "ParentBody", false, false));
                }
                return this.m_parentBody;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "parentContentControl", {
            /**
             *
             * Gets the content control that contains the body. Returns a null object if there isn't a parent content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_ParentContentControl_get */
                /* End_PlaceHolder_Body_ParentContentControl_get */
                if (!this.m_parentContentControl) {
                    this.m_parentContentControl = new Word.ContentControl(this.context, _createPropertyObjectPath(this.context, this, "ParentContentControl", false, false));
                }
                return this.m_parentContentControl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "parentSection", {
            /**
             *
             * Gets the parent section of the body. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_ParentSection_get */
                /* End_PlaceHolder_Body_ParentSection_get */
                if (!this.m_parentSection) {
                    this.m_parentSection = new Word.Section(this.context, _createPropertyObjectPath(this.context, this, "ParentSection", false, false));
                }
                return this.m_parentSection;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "tables", {
            /**
             *
             * Gets the collection of table objects in the body. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_Tables_get */
                /* End_PlaceHolder_Body_Tables_get */
                if (!this.m_tables) {
                    this.m_tables = new Word.TableCollection(this.context, _createPropertyObjectPath(this.context, this, "Tables", true, false));
                }
                return this.m_tables;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "style", {
            /**
             *
             * Gets or sets the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_Style_get */
                /* End_PlaceHolder_Body_Style_get */
                _throwIfNotLoaded("style", this.m_style, "Body", this._isNull);
                return this.m_style;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Body_Style_set */
                /* End_PlaceHolder_Body_Style_set */
                this.m_style = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "styleBuiltIn", {
            /**
             *
             * Gets or sets the built-in style name for the body. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_StyleBuiltIn_get */
                /* End_PlaceHolder_Body_StyleBuiltIn_get */
                _throwIfNotLoaded("styleBuiltIn", this.m_styleBuiltIn, "Body", this._isNull);
                return this.m_styleBuiltIn;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Body_StyleBuiltIn_set */
                /* End_PlaceHolder_Body_StyleBuiltIn_set */
                this.m_styleBuiltIn = value;
                _createSetPropertyAction(this.context, this, "StyleBuiltIn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "text", {
            /**
             *
             * Gets the text of the body. Use the insertText method to insert text. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_Text_get */
                /* End_PlaceHolder_Body_Text_get */
                _throwIfNotLoaded("text", this.m_text, "Body", this._isNull);
                return this.m_text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "type", {
            /**
             *
             * Gets the type of the body. The type can be 'MainDoc', 'Section', 'Header', 'Footer', or 'TableCell'. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Body_Type_get */
                /* End_PlaceHolder_Body_Type_get */
                _throwIfNotLoaded("type", this.m_type, "Body", this._isNull);
                return this.m_type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Body.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Body__ReferenceId_get */
                /* End_PlaceHolder_Body__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Body", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Clears the contents of the body object. The user can perform the undo operation on the cleared content.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.clear = function () {
            /* Begin_PlaceHolder_Body_Clear */
            /* End_PlaceHolder_Body_Clear */
            _createMethodAction(this.context, this, "Clear", 0 /* Default */, []);
        };
        /**
         *
         * Gets the HTML representation of the body object.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.getHtml = function () {
            /* Begin_PlaceHolder_Body_GetHtml */
            /* End_PlaceHolder_Body_GetHtml */
            var action = _createMethodAction(this.context, this, "GetHtml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the OOXML (Office Open XML) representation of the body object.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.getOoxml = function () {
            /* Begin_PlaceHolder_Body_GetOoxml */
            /* End_PlaceHolder_Body_GetOoxml */
            var action = _createMethodAction(this.context, this, "GetOoxml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the whole body, or the starting or ending point of the body, as a range.
         *
         * @param rangeLocation Optional. The range location can be 'Whole', 'Start', 'End', 'After' or 'Content'.
         *
         * [Api set: WordApi 1.3]
         */
        Body.prototype.getRange = function (rangeLocation) {
            /* Begin_PlaceHolder_Body_GetRange */
            /* End_PlaceHolder_Body_GetRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1 /* Read */, [rangeLocation], false, false, null));
        };
        /**
         *
         * Inserts a break at the specified location in the main document. The insertLocation value can be 'Start' or 'End'.
         *
         * @param breakType Required. The break type to add to the body.
         * @param insertLocation Required. The value can be 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.insertBreak = function (breakType, insertLocation) {
            /* Begin_PlaceHolder_Body_InsertBreak */
            /* End_PlaceHolder_Body_InsertBreak */
            _createMethodAction(this.context, this, "InsertBreak", 0 /* Default */, [breakType, insertLocation]);
        };
        /**
         *
         * Wraps the body object with a Rich Text content control.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.insertContentControl = function () {
            /* Begin_PlaceHolder_Body_InsertContentControl */
            /* End_PlaceHolder_Body_InsertContentControl */
            return new Word.ContentControl(this.context, _createMethodObjectPath(this.context, this, "InsertContentControl", 0 /* Default */, [], false, true, null));
        };
        /**
         *
         * Inserts a document into the body at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param base64File Required. The base64 encoded content of a .docx file.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.insertFileFromBase64 = function (base64File, insertLocation) {
            /* Begin_PlaceHolder_Body_InsertFileFromBase64 */
            /* End_PlaceHolder_Body_InsertFileFromBase64 */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertFileFromBase64", 0 /* Default */, [base64File, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts HTML at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param html Required. The HTML to be inserted in the document.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.insertHtml = function (html, insertLocation) {
            /* Begin_PlaceHolder_Body_InsertHtml */
            /* End_PlaceHolder_Body_InsertHtml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertHtml", 0 /* Default */, [html, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a picture into the body at the specified location. The insertLocation value can be 'Start' or 'End'.
         *
         * @param base64EncodedImage Required. The base64 encoded image to be inserted in the body.
         * @param insertLocation Required. The value can be 'Start' or 'End'.
         *
         * [Api set: WordApi 1.2]
         */
        Body.prototype.insertInlinePictureFromBase64 = function (base64EncodedImage, insertLocation) {
            /* Begin_PlaceHolder_Body_InsertInlinePictureFromBase64 */
            /* End_PlaceHolder_Body_InsertInlinePictureFromBase64 */
            return new Word.InlinePicture(this.context, _createMethodObjectPath(this.context, this, "InsertInlinePictureFromBase64", 0 /* Default */, [base64EncodedImage, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts OOXML at the specified location.  The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param ooxml Required. The OOXML to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.insertOoxml = function (ooxml, insertLocation) {
            /* Begin_PlaceHolder_Body_InsertOoxml */
            /* End_PlaceHolder_Body_InsertOoxml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertOoxml", 0 /* Default */, [ooxml, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a paragraph at the specified location. The insertLocation value can be 'Start' or 'End'.
         *
         * @param paragraphText Required. The paragraph text to be inserted.
         * @param insertLocation Required. The value can be 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.insertParagraph = function (paragraphText, insertLocation) {
            /* Begin_PlaceHolder_Body_InsertParagraph */
            /* End_PlaceHolder_Body_InsertParagraph */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "InsertParagraph", 0 /* Default */, [paragraphText, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Start' or 'End'.
         *
         * @param rowCount Required. The number of rows in the table.
         * @param columnCount Required. The number of columns in the table.
         * @param insertLocation Required. The value can be 'Start' or 'End'.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        Body.prototype.insertTable = function (rowCount, columnCount, insertLocation, values) {
            /* Begin_PlaceHolder_Body_InsertTable */
            /* End_PlaceHolder_Body_InsertTable */
            return new Word.Table(this.context, _createMethodObjectPath(this.context, this, "InsertTable", 0 /* Default */, [rowCount, columnCount, insertLocation, values], false, true, null));
        };
        /**
         *
         * Inserts text into the body at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param text Required. Text to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.insertText = function (text, insertLocation) {
            /* Begin_PlaceHolder_Body_InsertText */
            /* End_PlaceHolder_Body_InsertText */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertText", 0 /* Default */, [text, insertLocation], false, true, null));
        };
        /**
         *
         * Performs a search with the specified searchOptions on the scope of the body object. The search results are a collection of range objects.
         *
         * @param searchText Required. The search text.
         * @param searchOptions Optional. Options for the search.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.search = function (searchText, searchOptions) {
            /* Begin_PlaceHolder_Body_Search */
            searchOptions = _normalizeSearchOptions(this.context, searchOptions);
            /* End_PlaceHolder_Body_Search */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Search", 1 /* Read */, [searchText, searchOptions], true, true, null));
        };
        /**
         *
         * Selects the body and navigates the Word UI to it.
         *
         * @param selectionMode Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.
         *
         * [Api set: WordApi 1.1]
         */
        Body.prototype.select = function (selectionMode) {
            /* Begin_PlaceHolder_Body_Select */
            /* End_PlaceHolder_Body_Select */
            _createMethodAction(this.context, this, "Select", 1 /* Read */, [selectionMode]);
        };
        Body.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Body__KeepReference */
            /* End_PlaceHolder_Body__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        Body.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Style"])) {
                this.m_style = obj["Style"];
            }
            if (!_isUndefined(obj["StyleBuiltIn"])) {
                this.m_styleBuiltIn = obj["StyleBuiltIn"];
            }
            if (!_isUndefined(obj["Text"])) {
                this.m_text = obj["Text"];
            }
            if (!_isUndefined(obj["Type"])) {
                this.m_type = obj["Type"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["contentControls", "ContentControls", "font", "Font", "inlinePictures", "InlinePictures", "lists", "Lists", "paragraphs", "Paragraphs", "parentBody", "ParentBody", "parentContentControl", "ParentContentControl", "parentSection", "ParentSection", "tables", "Tables"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Body.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Body.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Body.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Body.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Body.prototype.toJSON = function () {
            return {
                "font": this.m_font,
                "style": this.m_style,
                "styleBuiltIn": this.m_styleBuiltIn,
                "text": this.m_text,
                "type": this.m_type
            };
        };
        return Body;
    })(OfficeExtension.ClientObject);
    Word.Body = Body;
    /**
     *
     * Represents a content control. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only rich text content controls are supported.
     *
     * [Api set: WordApi 1.1]
     */
    var ContentControl = (function (_super) {
        __extends(ContentControl, _super);
        function ContentControl() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ContentControl.prototype, "contentControls", {
            /* Begin_PlaceHolder_ContentControl_Custom_Members */
            /* End_PlaceHolder_ContentControl_Custom_Members */
            /**
             *
             * Gets the collection of content control objects in the content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_ContentControls_get */
                /* End_PlaceHolder_ContentControl_ContentControls_get */
                if (!this.m_contentControls) {
                    this.m_contentControls = new Word.ContentControlCollection(this.context, _createPropertyObjectPath(this.context, this, "ContentControls", true, false));
                }
                return this.m_contentControls;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "font", {
            /**
             *
             * Gets the text format of the content control. Use this to get and set font name, size, color, and other properties. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Font_get */
                /* End_PlaceHolder_ContentControl_Font_get */
                if (!this.m_font) {
                    this.m_font = new Word.Font(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false));
                }
                return this.m_font;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "inlinePictures", {
            /**
             *
             * Gets the collection of inlinePicture objects in the content control. The collection does not include floating images. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_InlinePictures_get */
                /* End_PlaceHolder_ContentControl_InlinePictures_get */
                if (!this.m_inlinePictures) {
                    this.m_inlinePictures = new Word.InlinePictureCollection(this.context, _createPropertyObjectPath(this.context, this, "InlinePictures", true, false));
                }
                return this.m_inlinePictures;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "lists", {
            /**
             *
             * Gets the collection of list objects in the content control. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Lists_get */
                /* End_PlaceHolder_ContentControl_Lists_get */
                if (!this.m_lists) {
                    this.m_lists = new Word.ListCollection(this.context, _createPropertyObjectPath(this.context, this, "Lists", true, false));
                }
                return this.m_lists;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "paragraphs", {
            /**
             *
             * Get the collection of paragraph objects in the content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Paragraphs_get */
                /* End_PlaceHolder_ContentControl_Paragraphs_get */
                if (!this.m_paragraphs) {
                    this.m_paragraphs = new Word.ParagraphCollection(this.context, _createPropertyObjectPath(this.context, this, "Paragraphs", true, false));
                }
                return this.m_paragraphs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "parentBody", {
            /**
             *
             * Gets the parent body of the content control. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_ParentBody_get */
                /* End_PlaceHolder_ContentControl_ParentBody_get */
                if (!this.m_parentBody) {
                    this.m_parentBody = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "ParentBody", false, false));
                }
                return this.m_parentBody;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "parentContentControl", {
            /**
             *
             * Gets the content control that contains the content control. Returns a null object if there isn't a parent content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_ParentContentControl_get */
                /* End_PlaceHolder_ContentControl_ParentContentControl_get */
                if (!this.m_parentContentControl) {
                    this.m_parentContentControl = new Word.ContentControl(this.context, _createPropertyObjectPath(this.context, this, "ParentContentControl", false, false));
                }
                return this.m_parentContentControl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "parentTable", {
            /**
             *
             * Gets the table that contains the content control. Returns a null object if it is not contained in a table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_ParentTable_get */
                /* End_PlaceHolder_ContentControl_ParentTable_get */
                if (!this.m_parentTable) {
                    this.m_parentTable = new Word.Table(this.context, _createPropertyObjectPath(this.context, this, "ParentTable", false, false));
                }
                return this.m_parentTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "parentTableCell", {
            /**
             *
             * Gets the table cell that contains the content control. Returns a null object if it is not contained in a table cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_ParentTableCell_get */
                /* End_PlaceHolder_ContentControl_ParentTableCell_get */
                if (!this.m_parentTableCell) {
                    this.m_parentTableCell = new Word.TableCell(this.context, _createPropertyObjectPath(this.context, this, "ParentTableCell", false, false));
                }
                return this.m_parentTableCell;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "tables", {
            /**
             *
             * Gets the collection of table objects in the content control. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Tables_get */
                /* End_PlaceHolder_ContentControl_Tables_get */
                if (!this.m_tables) {
                    this.m_tables = new Word.TableCollection(this.context, _createPropertyObjectPath(this.context, this, "Tables", true, false));
                }
                return this.m_tables;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "appearance", {
            /**
             *
             * Gets or sets the appearance of the content control. The value can be 'boundingBox', 'tags' or 'hidden'.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Appearance_get */
                /* End_PlaceHolder_ContentControl_Appearance_get */
                _throwIfNotLoaded("appearance", this.m_appearance, "ContentControl", this._isNull);
                return this.m_appearance;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_Appearance_set */
                /* End_PlaceHolder_ContentControl_Appearance_set */
                this.m_appearance = value;
                _createSetPropertyAction(this.context, this, "Appearance", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "cannotDelete", {
            /**
             *
             * Gets or sets a value that indicates whether the user can delete the content control. Mutually exclusive with removeWhenEdited.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_CannotDelete_get */
                /* End_PlaceHolder_ContentControl_CannotDelete_get */
                _throwIfNotLoaded("cannotDelete", this.m_cannotDelete, "ContentControl", this._isNull);
                return this.m_cannotDelete;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_CannotDelete_set */
                /* End_PlaceHolder_ContentControl_CannotDelete_set */
                this.m_cannotDelete = value;
                _createSetPropertyAction(this.context, this, "CannotDelete", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "cannotEdit", {
            /**
             *
             * Gets or sets a value that indicates whether the user can edit the contents of the content control.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_CannotEdit_get */
                /* End_PlaceHolder_ContentControl_CannotEdit_get */
                _throwIfNotLoaded("cannotEdit", this.m_cannotEdit, "ContentControl", this._isNull);
                return this.m_cannotEdit;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_CannotEdit_set */
                /* End_PlaceHolder_ContentControl_CannotEdit_set */
                this.m_cannotEdit = value;
                _createSetPropertyAction(this.context, this, "CannotEdit", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "color", {
            /**
             *
             * Gets or sets the color of the content control. Color is specified in '#RRGGBB' format or by using the color name.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Color_get */
                /* End_PlaceHolder_ContentControl_Color_get */
                _throwIfNotLoaded("color", this.m_color, "ContentControl", this._isNull);
                return this.m_color;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_Color_set */
                /* End_PlaceHolder_ContentControl_Color_set */
                this.m_color = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "id", {
            /**
             *
             * Gets an integer that represents the content control identifier. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Id_get */
                /* End_PlaceHolder_ContentControl_Id_get */
                _throwIfNotLoaded("id", this.m_id, "ContentControl", this._isNull);
                return this.m_id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "placeholderText", {
            /**
             *
             * Gets or sets the placeholder text of the content control. Dimmed text will be displayed when the content control is empty.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_PlaceholderText_get */
                /* End_PlaceHolder_ContentControl_PlaceholderText_get */
                _throwIfNotLoaded("placeholderText", this.m_placeholderText, "ContentControl", this._isNull);
                return this.m_placeholderText;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_PlaceholderText_set */
                /* End_PlaceHolder_ContentControl_PlaceholderText_set */
                this.m_placeholderText = value;
                _createSetPropertyAction(this.context, this, "PlaceholderText", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "removeWhenEdited", {
            /**
             *
             * Gets or sets a value that indicates whether the content control is removed after it is edited. Mutually exclusive with cannotDelete.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_RemoveWhenEdited_get */
                /* End_PlaceHolder_ContentControl_RemoveWhenEdited_get */
                _throwIfNotLoaded("removeWhenEdited", this.m_removeWhenEdited, "ContentControl", this._isNull);
                return this.m_removeWhenEdited;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_RemoveWhenEdited_set */
                /* End_PlaceHolder_ContentControl_RemoveWhenEdited_set */
                this.m_removeWhenEdited = value;
                _createSetPropertyAction(this.context, this, "RemoveWhenEdited", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "style", {
            /**
             *
             * Gets or sets the style name for the content control. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Style_get */
                /* End_PlaceHolder_ContentControl_Style_get */
                _throwIfNotLoaded("style", this.m_style, "ContentControl", this._isNull);
                return this.m_style;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_Style_set */
                /* End_PlaceHolder_ContentControl_Style_set */
                this.m_style = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "styleBuiltIn", {
            /**
             *
             * Gets or sets the built-in style name for the content control. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_StyleBuiltIn_get */
                /* End_PlaceHolder_ContentControl_StyleBuiltIn_get */
                _throwIfNotLoaded("styleBuiltIn", this.m_styleBuiltIn, "ContentControl", this._isNull);
                return this.m_styleBuiltIn;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_StyleBuiltIn_set */
                /* End_PlaceHolder_ContentControl_StyleBuiltIn_set */
                this.m_styleBuiltIn = value;
                _createSetPropertyAction(this.context, this, "StyleBuiltIn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "subtype", {
            /**
             *
             * Gets the content control subtype. The subtype can be 'RichTextInline', 'RichTextParagraphs', 'RichTextTableCell', 'RichTextTableRow' and 'RichTextTable' for rich text content controls. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Subtype_get */
                /* End_PlaceHolder_ContentControl_Subtype_get */
                _throwIfNotLoaded("subtype", this.m_subtype, "ContentControl", this._isNull);
                return this.m_subtype;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "tag", {
            /**
             *
             * Gets or sets a tag to identify a content control.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Tag_get */
                /* End_PlaceHolder_ContentControl_Tag_get */
                _throwIfNotLoaded("tag", this.m_tag, "ContentControl", this._isNull);
                return this.m_tag;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_Tag_set */
                /* End_PlaceHolder_ContentControl_Tag_set */
                this.m_tag = value;
                _createSetPropertyAction(this.context, this, "Tag", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "text", {
            /**
             *
             * Gets the text of the content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Text_get */
                /* End_PlaceHolder_ContentControl_Text_get */
                _throwIfNotLoaded("text", this.m_text, "ContentControl", this._isNull);
                return this.m_text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "title", {
            /**
             *
             * Gets or sets the title for a content control.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Title_get */
                /* End_PlaceHolder_ContentControl_Title_get */
                _throwIfNotLoaded("title", this.m_title, "ContentControl", this._isNull);
                return this.m_title;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ContentControl_Title_set */
                /* End_PlaceHolder_ContentControl_Title_set */
                this.m_title = value;
                _createSetPropertyAction(this.context, this, "Title", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "type", {
            /**
             *
             * Gets the content control type. Only rich text content controls are supported currently. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl_Type_get */
                /* End_PlaceHolder_ContentControl_Type_get */
                _throwIfNotLoaded("type", this.m_type, "ContentControl", this._isNull);
                return this.m_type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControl.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControl__ReferenceId_get */
                /* End_PlaceHolder_ContentControl__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "ContentControl", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Clears the contents of the content control. The user can perform the undo operation on the cleared content.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.clear = function () {
            /* Begin_PlaceHolder_ContentControl_Clear */
            /* End_PlaceHolder_ContentControl_Clear */
            _createMethodAction(this.context, this, "Clear", 0 /* Default */, []);
        };
        /**
         *
         * Deletes the content control and its content. If keepContent is set to true, the content is not deleted.
         *
         * @param keepContent Required. Indicates whether the content should be deleted with the content control. If keepContent is set to true, the content is not deleted.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.delete = function (keepContent) {
            /* Begin_PlaceHolder_ContentControl_Delete */
            /* End_PlaceHolder_ContentControl_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, [keepContent]);
        };
        /**
         *
         * Gets the HTML representation of the content control object.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.getHtml = function () {
            /* Begin_PlaceHolder_ContentControl_GetHtml */
            /* End_PlaceHolder_ContentControl_GetHtml */
            var action = _createMethodAction(this.context, this, "GetHtml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the Office Open XML (OOXML) representation of the content control object.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.getOoxml = function () {
            /* Begin_PlaceHolder_ContentControl_GetOoxml */
            /* End_PlaceHolder_ContentControl_GetOoxml */
            var action = _createMethodAction(this.context, this, "GetOoxml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the whole content control, or the starting or ending point of the content control, as a range.
         *
         * @param rangeLocation Optional. The range location can be 'Whole', 'Before', 'Start', 'End', 'After' or 'Content'.
         *
         * [Api set: WordApi 1.3]
         */
        ContentControl.prototype.getRange = function (rangeLocation) {
            /* Begin_PlaceHolder_ContentControl_GetRange */
            /* End_PlaceHolder_ContentControl_GetRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1 /* Read */, [rangeLocation], false, false, null));
        };
        /**
         *
         * Gets the text ranges in the content control by using punctuation marks and/or other ending marks.
         *
         * @param endingMarks Required. The punctuation marks and/or other ending marks as an array of strings.
         * @param trimSpacing Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         *
         * [Api set: WordApi 1.3]
         */
        ContentControl.prototype.getTextRanges = function (endingMarks, trimSpacing) {
            /* Begin_PlaceHolder_ContentControl_GetTextRanges */
            /* End_PlaceHolder_ContentControl_GetTextRanges */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "GetTextRanges", 1 /* Read */, [endingMarks, trimSpacing], true, false, null));
        };
        /**
         *
         * Inserts a break at the specified location in the main document. The insertLocation value can be 'Start', 'End', 'Before' or 'After'. This method cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.
         *
         * @param breakType Required. Type of break.
         * @param insertLocation Required. The value can be 'Start', 'End', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.insertBreak = function (breakType, insertLocation) {
            /* Begin_PlaceHolder_ContentControl_InsertBreak */
            /* End_PlaceHolder_ContentControl_InsertBreak */
            _createMethodAction(this.context, this, "InsertBreak", 0 /* Default */, [breakType, insertLocation]);
        };
        /**
         *
         * Inserts a document into the content control at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param base64File Required. The base64 encoded content of a .docx file.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.insertFileFromBase64 = function (base64File, insertLocation) {
            /* Begin_PlaceHolder_ContentControl_InsertFileFromBase64 */
            /* End_PlaceHolder_ContentControl_InsertFileFromBase64 */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertFileFromBase64", 0 /* Default */, [base64File, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts HTML into the content control at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param html Required. The HTML to be inserted in to the content control.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.insertHtml = function (html, insertLocation) {
            /* Begin_PlaceHolder_ContentControl_InsertHtml */
            /* End_PlaceHolder_ContentControl_InsertHtml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertHtml", 0 /* Default */, [html, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts an inline picture into the content control at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param base64EncodedImage Required. The base64 encoded image to be inserted in the content control.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls.
         *
         * [Api set: WordApi 1.2]
         */
        ContentControl.prototype.insertInlinePictureFromBase64 = function (base64EncodedImage, insertLocation) {
            /* Begin_PlaceHolder_ContentControl_InsertInlinePictureFromBase64 */
            /* End_PlaceHolder_ContentControl_InsertInlinePictureFromBase64 */
            return new Word.InlinePicture(this.context, _createMethodObjectPath(this.context, this, "InsertInlinePictureFromBase64", 0 /* Default */, [base64EncodedImage, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts OOXML into the content control at the specified location.  The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param ooxml Required. The OOXML to be inserted in to the content control.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.insertOoxml = function (ooxml, insertLocation) {
            /* Begin_PlaceHolder_ContentControl_InsertOoxml */
            /* End_PlaceHolder_ContentControl_InsertOoxml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertOoxml", 0 /* Default */, [ooxml, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a paragraph at the specified location. The insertLocation value can be 'Start', 'End', 'Before' or 'After'.
         *
         * @param paragraphText Required. The paragrph text to be inserted.
         * @param insertLocation Required. The value can be 'Start', 'End', 'Before' or 'After'. 'Before' and 'After' cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.insertParagraph = function (paragraphText, insertLocation) {
            /* Begin_PlaceHolder_ContentControl_InsertParagraph */
            /* End_PlaceHolder_ContentControl_InsertParagraph */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "InsertParagraph", 0 /* Default */, [paragraphText, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a table with the specified number of rows and columns into, or next to, a content control. The insertLocation value can be 'Start', 'End', 'Before' or 'After'.
         *
         * @param rowCount Required. The number of rows in the table.
         * @param columnCount Required. The number of columns in the table.
         * @param insertLocation Required. The value can be 'Start', 'End', 'Before' or 'After'. 'Before' and 'After' cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        ContentControl.prototype.insertTable = function (rowCount, columnCount, insertLocation, values) {
            /* Begin_PlaceHolder_ContentControl_InsertTable */
            /* End_PlaceHolder_ContentControl_InsertTable */
            return new Word.Table(this.context, _createMethodObjectPath(this.context, this, "InsertTable", 0 /* Default */, [rowCount, columnCount, insertLocation, values], false, true, null));
        };
        /**
         *
         * Inserts text into the content control at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param text Required. The text to be inserted in to the content control.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.insertText = function (text, insertLocation) {
            /* Begin_PlaceHolder_ContentControl_InsertText */
            /* End_PlaceHolder_ContentControl_InsertText */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertText", 0 /* Default */, [text, insertLocation], false, true, null));
        };
        /**
         *
         * Performs a search with the specified searchOptions on the scope of the content control object. The search results are a collection of range objects.
         *
         * @param searchText Required. The search text.
         * @param searchOptions Optional. Options for the search.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.search = function (searchText, searchOptions) {
            /* Begin_PlaceHolder_ContentControl_Search */
            searchOptions = _normalizeSearchOptions(this.context, searchOptions);
            /* End_PlaceHolder_ContentControl_Search */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Search", 1 /* Read */, [searchText, searchOptions], true, true, null));
        };
        /**
         *
         * Selects the content control. This causes Word to scroll to the selection.
         *
         * @param selectionMode Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControl.prototype.select = function (selectionMode) {
            /* Begin_PlaceHolder_ContentControl_Select */
            /* End_PlaceHolder_ContentControl_Select */
            _createMethodAction(this.context, this, "Select", 1 /* Read */, [selectionMode]);
        };
        /**
         *
         * Splits the content control into child ranges by using delimiters.
         *
         * @param delimiters Required. The delimiters as an array of strings.
         * @param multiParagraphs Optional. Indicates whether a returned child range can cover multiple paragraphs. Default is false which indicates that the paragraph boundaries are also used as delimiters.
         * @param trimDelimiters Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false which indicates that the delimiters are included in the ranges returned in the range collection.
         * @param trimSpacing Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         *
         * [Api set: WordApi 1.3]
         */
        ContentControl.prototype.split = function (delimiters, multiParagraphs, trimDelimiters, trimSpacing) {
            /* Begin_PlaceHolder_ContentControl_Split */
            /* End_PlaceHolder_ContentControl_Split */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Split", 1 /* Read */, [delimiters, multiParagraphs, trimDelimiters, trimSpacing], true, false, null));
        };
        ContentControl.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_ContentControl__KeepReference */
            /* End_PlaceHolder_ContentControl__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        ContentControl.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Appearance"])) {
                this.m_appearance = obj["Appearance"];
            }
            if (!_isUndefined(obj["CannotDelete"])) {
                this.m_cannotDelete = obj["CannotDelete"];
            }
            if (!_isUndefined(obj["CannotEdit"])) {
                this.m_cannotEdit = obj["CannotEdit"];
            }
            if (!_isUndefined(obj["Color"])) {
                this.m_color = obj["Color"];
            }
            if (!_isUndefined(obj["Id"])) {
                this.m_id = obj["Id"];
            }
            if (!_isUndefined(obj["PlaceholderText"])) {
                this.m_placeholderText = obj["PlaceholderText"];
            }
            if (!_isUndefined(obj["RemoveWhenEdited"])) {
                this.m_removeWhenEdited = obj["RemoveWhenEdited"];
            }
            if (!_isUndefined(obj["Style"])) {
                this.m_style = obj["Style"];
            }
            if (!_isUndefined(obj["StyleBuiltIn"])) {
                this.m_styleBuiltIn = obj["StyleBuiltIn"];
            }
            if (!_isUndefined(obj["Subtype"])) {
                this.m_subtype = obj["Subtype"];
            }
            if (!_isUndefined(obj["Tag"])) {
                this.m_tag = obj["Tag"];
            }
            if (!_isUndefined(obj["Text"])) {
                this.m_text = obj["Text"];
            }
            if (!_isUndefined(obj["Title"])) {
                this.m_title = obj["Title"];
            }
            if (!_isUndefined(obj["Type"])) {
                this.m_type = obj["Type"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["contentControls", "ContentControls", "font", "Font", "inlinePictures", "InlinePictures", "lists", "Lists", "paragraphs", "Paragraphs", "parentBody", "ParentBody", "parentContentControl", "ParentContentControl", "parentTable", "ParentTable", "parentTableCell", "ParentTableCell", "tables", "Tables"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        ContentControl.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        ContentControl.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["Id"])) {
                this.m_id = value["Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        ContentControl.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        ContentControl.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        ContentControl.prototype.toJSON = function () {
            return {
                "appearance": this.m_appearance,
                "cannotDelete": this.m_cannotDelete,
                "cannotEdit": this.m_cannotEdit,
                "color": this.m_color,
                "font": this.m_font,
                "id": this.m_id,
                "placeholderText": this.m_placeholderText,
                "removeWhenEdited": this.m_removeWhenEdited,
                "style": this.m_style,
                "styleBuiltIn": this.m_styleBuiltIn,
                "subtype": this.m_subtype,
                "tag": this.m_tag,
                "text": this.m_text,
                "title": this.m_title,
                "type": this.m_type
            };
        };
        return ContentControl;
    })(OfficeExtension.ClientObject);
    Word.ContentControl = ContentControl;
    /**
     *
     * Contains a collection of [contentControl](contentControl.md) objects. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as images, tables, or paragraphs of formatted text. Currently, only rich text content controls are supported.
     *
     * [Api set: WordApi 1.1]
     */
    var ContentControlCollection = (function (_super) {
        __extends(ContentControlCollection, _super);
        function ContentControlCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ContentControlCollection.prototype, "items", {
            /* Begin_PlaceHolder_ContentControlCollection_Custom_Members */
            /* End_PlaceHolder_ContentControlCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_ContentControlCollection_items */
                /* End_PlaceHolder_ContentControlCollection_items */
                _throwIfNotLoaded("items", this.m__items, "ContentControlCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentControlCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_ContentControlCollection__ReferenceId_get */
                /* End_PlaceHolder_ContentControlCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "ContentControlCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets a content control by its identifier.
         *
         * @param id Required. A content control identifier.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControlCollection.prototype.getById = function (id) {
            /* Begin_PlaceHolder_ContentControlCollection_GetById */
            /* End_PlaceHolder_ContentControlCollection_GetById */
            return new Word.ContentControl(this.context, _createMethodObjectPath(this.context, this, "GetById", 1 /* Read */, [id], false, false, null));
        };
        /**
         *
         * Gets the content controls that have the specified tag.
         *
         * @param tag Required. A tag set on a content control.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControlCollection.prototype.getByTag = function (tag) {
            /* Begin_PlaceHolder_ContentControlCollection_GetByTag */
            /* End_PlaceHolder_ContentControlCollection_GetByTag */
            return new Word.ContentControlCollection(this.context, _createMethodObjectPath(this.context, this, "GetByTag", 1 /* Read */, [tag], true, false, null));
        };
        /**
         *
         * Gets the content controls that have the specified title.
         *
         * @param title Required. The title of a content control.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControlCollection.prototype.getByTitle = function (title) {
            /* Begin_PlaceHolder_ContentControlCollection_GetByTitle */
            /* End_PlaceHolder_ContentControlCollection_GetByTitle */
            return new Word.ContentControlCollection(this.context, _createMethodObjectPath(this.context, this, "GetByTitle", 1 /* Read */, [title], true, false, null));
        };
        /**
         *
         * Gets the content controls that have the specified types and/or subtypes.
         *
         * @param types Required. An array of content control types and/or subtypes.
         *
         * [Api set: WordApi 1.3]
         */
        ContentControlCollection.prototype.getByTypes = function (types) {
            /* Begin_PlaceHolder_ContentControlCollection_GetByTypes */
            /* End_PlaceHolder_ContentControlCollection_GetByTypes */
            return new Word.ContentControlCollection(this.context, _createMethodObjectPath(this.context, this, "GetByTypes", 1 /* Read */, [types], true, false, null));
        };
        /**
         *
         * Gets the first content control in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        ContentControlCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_ContentControlCollection_GetFirst */
            /* End_PlaceHolder_ContentControlCollection_GetFirst */
            return new Word.ContentControl(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a content control by its index in the collection.
         *
         * @param index The index.
         *
         * [Api set: WordApi 1.1]
         */
        ContentControlCollection.prototype.getItem = function (index) {
            /* Begin_PlaceHolder_ContentControlCollection_GetItem */
            /* End_PlaceHolder_ContentControlCollection_GetItem */
            return new Word.ContentControl(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        ContentControlCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_ContentControlCollection__KeepReference */
            /* End_PlaceHolder_ContentControlCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        ContentControlCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.ContentControl(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        ContentControlCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        ContentControlCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        ContentControlCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        ContentControlCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        ContentControlCollection.prototype.toJSON = function () {
            return {};
        };
        return ContentControlCollection;
    })(OfficeExtension.ClientObject);
    Word.ContentControlCollection = ContentControlCollection;
    /**
     *
     * Represents a custom property.
     *
     * [Api set: WordApi 1.3]
     */
    var CustomProperty = (function (_super) {
        __extends(CustomProperty, _super);
        function CustomProperty() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(CustomProperty.prototype, "key", {
            /* Begin_PlaceHolder_CustomProperty_Custom_Members */
            /* End_PlaceHolder_CustomProperty_Custom_Members */
            /**
             *
             * Gets the key of the custom property. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_CustomProperty_Key_get */
                /* End_PlaceHolder_CustomProperty_Key_get */
                _throwIfNotLoaded("key", this.m_key, "CustomProperty", this._isNull);
                return this.m_key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "type", {
            /**
             *
             * Gets the value type of the custom property. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_CustomProperty_Type_get */
                /* End_PlaceHolder_CustomProperty_Type_get */
                _throwIfNotLoaded("type", this.m_type, "CustomProperty", this._isNull);
                return this.m_type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "value", {
            /**
             *
             * Gets or sets the value of the custom property.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_CustomProperty_Value_get */
                _throwIfNotLoaded("type", this.m_type, "CustomProperty", this._isNull);
                if (this.m_type == "Date") {
                    _throwIfNotLoaded("value", this.m_value, "CustomProperty", this._isNull);
                    return new Date(this.m_value);
                }
                /* End_PlaceHolder_CustomProperty_Value_get */
                _throwIfNotLoaded("value", this.m_value, "CustomProperty", this._isNull);
                return this.m_value;
            },
            set: function (value) {
                /* Begin_PlaceHolder_CustomProperty_Value_set */
                /* End_PlaceHolder_CustomProperty_Value_set */
                this.m_value = value;
                _createSetPropertyAction(this.context, this, "Value", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_CustomProperty__ReferenceId_get */
                /* End_PlaceHolder_CustomProperty__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "CustomProperty", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Deletes the custom property.
         *
         * [Api set: WordApi 1.3]
         */
        CustomProperty.prototype.delete = function () {
            /* Begin_PlaceHolder_CustomProperty_Delete */
            /* End_PlaceHolder_CustomProperty_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, []);
        };
        CustomProperty.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_CustomProperty__KeepReference */
            /* End_PlaceHolder_CustomProperty__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        CustomProperty.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Key"])) {
                this.m_key = obj["Key"];
            }
            if (!_isUndefined(obj["Type"])) {
                this.m_type = obj["Type"];
            }
            if (!_isUndefined(obj["Value"])) {
                this.m_value = obj["Value"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        CustomProperty.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        CustomProperty.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        CustomProperty.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        CustomProperty.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        CustomProperty.prototype.toJSON = function () {
            return {
                "key": this.m_key,
                "type": this.m_type,
                "value": this.m_value
            };
        };
        return CustomProperty;
    })(OfficeExtension.ClientObject);
    Word.CustomProperty = CustomProperty;
    /**
     *
     * Contains the collection of [customProperty](customProperty.md) objects.
     *
     * [Api set: WordApi 1.3]
     */
    var CustomPropertyCollection = (function (_super) {
        __extends(CustomPropertyCollection, _super);
        function CustomPropertyCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(CustomPropertyCollection.prototype, "items", {
            /* Begin_PlaceHolder_CustomPropertyCollection_Custom_Members */
            /* End_PlaceHolder_CustomPropertyCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_CustomPropertyCollection_items */
                /* End_PlaceHolder_CustomPropertyCollection_items */
                _throwIfNotLoaded("items", this.m__items, "CustomPropertyCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomPropertyCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_CustomPropertyCollection__ReferenceId_get */
                /* End_PlaceHolder_CustomPropertyCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "CustomPropertyCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Deletes all custom properties in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        CustomPropertyCollection.prototype.deleteAll = function () {
            /* Begin_PlaceHolder_CustomPropertyCollection_DeleteAll */
            /* End_PlaceHolder_CustomPropertyCollection_DeleteAll */
            _createMethodAction(this.context, this, "DeleteAll", 0 /* Default */, []);
        };
        /**
         *
         * Gets the count of custom properties.
         *
         * [Api set: WordApi 1.3]
         */
        CustomPropertyCollection.prototype.getCount = function () {
            /* Begin_PlaceHolder_CustomPropertyCollection_GetCount */
            /* End_PlaceHolder_CustomPropertyCollection_GetCount */
            var action = _createMethodAction(this.context, this, "GetCount", 0 /* Default */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets a custom property object by its key, which is case-insensitive.
         *
         * @param key The key that identifies the custom property object.
         *
         * [Api set: WordApi 1.3]
         */
        CustomPropertyCollection.prototype.getItem = function (key) {
            /* Begin_PlaceHolder_CustomPropertyCollection_GetItem */
            /* End_PlaceHolder_CustomPropertyCollection_GetItem */
            return new Word.CustomProperty(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        /**
         *
         * Creates or sets a custom property.
         *
         * @param key Required. The custom property's key, which is case-insensitive.
         * @param value Required. The custom property's value.
         *
         * [Api set: WordApi 1.3]
         */
        CustomPropertyCollection.prototype.set = function (key, value) {
            /* Begin_PlaceHolder_CustomPropertyCollection_Set */
            /* End_PlaceHolder_CustomPropertyCollection_Set */
            return new Word.CustomProperty(this.context, _createMethodObjectPath(this.context, this, "Set", 0 /* Default */, [key, value], false, false, null));
        };
        CustomPropertyCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_CustomPropertyCollection__KeepReference */
            /* End_PlaceHolder_CustomPropertyCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        CustomPropertyCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.CustomProperty(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        CustomPropertyCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        CustomPropertyCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        CustomPropertyCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        CustomPropertyCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        CustomPropertyCollection.prototype.toJSON = function () {
            return {};
        };
        return CustomPropertyCollection;
    })(OfficeExtension.ClientObject);
    Word.CustomPropertyCollection = CustomPropertyCollection;
    /**
     *
     * The Document object is the top level object. A Document object contains one or more sections, content controls, and the body that contains the contents of the document.
     *
     * [Api set: WordApi 1.1]
     */
    var Document = (function (_super) {
        __extends(Document, _super);
        function Document() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Document.prototype, "body", {
            /* Begin_PlaceHolder_Document_Custom_Members */
            /* End_PlaceHolder_Document_Custom_Members */
            /**
             *
             * Gets the body object of the document. The body is the text that excludes headers, footers, footnotes, textboxes, etc.. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Document_Body_get */
                /* End_PlaceHolder_Document_Body_get */
                if (!this.m_body) {
                    this.m_body = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "Body", false, false));
                }
                return this.m_body;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "contentControls", {
            /**
             *
             * Gets the collection of content control objects in the current document. This includes content controls in the body of the document, headers, footers, textboxes, etc.. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Document_ContentControls_get */
                /* End_PlaceHolder_Document_ContentControls_get */
                if (!this.m_contentControls) {
                    this.m_contentControls = new Word.ContentControlCollection(this.context, _createPropertyObjectPath(this.context, this, "ContentControls", true, false));
                }
                return this.m_contentControls;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "properties", {
            /**
             *
             * Gets the properties of the current document. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Document_Properties_get */
                /* End_PlaceHolder_Document_Properties_get */
                if (!this.m_properties) {
                    this.m_properties = new Word.DocumentProperties(this.context, _createPropertyObjectPath(this.context, this, "Properties", false, false));
                }
                return this.m_properties;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "sections", {
            /**
             *
             * Gets the collection of section objects in the document. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Document_Sections_get */
                /* End_PlaceHolder_Document_Sections_get */
                if (!this.m_sections) {
                    this.m_sections = new Word.SectionCollection(this.context, _createPropertyObjectPath(this.context, this, "Sections", true, false));
                }
                return this.m_sections;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "settings", {
            /**
             *
             * Gets the add-in's settings in the current document. Read-only.
             *
             * [Api set: WordApi 1.4]
             */
            get: function () {
                /* Begin_PlaceHolder_Document_Settings_get */
                /* End_PlaceHolder_Document_Settings_get */
                if (!this.m_settings) {
                    this.m_settings = new Word.SettingCollection(this.context, _createPropertyObjectPath(this.context, this, "Settings", true, false));
                }
                return this.m_settings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "saved", {
            /**
             *
             * Indicates whether the changes in the document have been saved. A value of true indicates that the document hasn't changed since it was saved. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Document_Saved_get */
                /* End_PlaceHolder_Document_Saved_get */
                _throwIfNotLoaded("saved", this.m_saved, "Document", this._isNull);
                return this.m_saved;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Document.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Document__ReferenceId_get */
                /* End_PlaceHolder_Document__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Document", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Deletes a bookmark, if exists, from this document.
         *
         * @param name Required. The bookmark name, which is case-insensitive.
         *
         * [Api set: WordApi 1.4]
         */
        Document.prototype.deleteBookmark = function (name) {
            /* Begin_PlaceHolder_Document_DeleteBookmark */
            /* End_PlaceHolder_Document_DeleteBookmark */
            _createMethodAction(this.context, this, "DeleteBookmark", 0 /* Default */, [name]);
        };
        /**
         *
         * Gets a bookmark's range. Returns a null object if the bookmark does not exist.
         *
         * @param name Required. The bookmark name, which is case-insensitive.
         *
         * [Api set: WordApi 1.4]
         */
        Document.prototype.getBookmarkRange = function (name) {
            /* Begin_PlaceHolder_Document_GetBookmarkRange */
            /* End_PlaceHolder_Document_GetBookmarkRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetBookmarkRange", 0 /* Default */, [name], false, false, null));
        };
        /**
         *
         * Gets the current selection of the document. Multiple selections are not supported.
         *
         * [Api set: WordApi 1.1]
         */
        Document.prototype.getSelection = function () {
            /* Begin_PlaceHolder_Document_GetSelection */
            /* End_PlaceHolder_Document_GetSelection */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetSelection", 1 /* Read */, [], false, true, null));
        };
        /**
         *
         * Open the document.
         *
         * [Api set: WordApi 1.3]
         */
        Document.prototype.open = function () {
            /* Begin_PlaceHolder_Document_Open */
            /* End_PlaceHolder_Document_Open */
            _createMethodAction(this.context, this, "Open", 1 /* Read */, []);
        };
        /**
         *
         * Saves the document. This will use the Word default file naming convention if the document has not been saved before.
         *
         * [Api set: WordApi 1.1]
         */
        Document.prototype.save = function () {
            /* Begin_PlaceHolder_Document_Save */
            /* End_PlaceHolder_Document_Save */
            _createMethodAction(this.context, this, "Save", 0 /* Default */, []);
        };
        Document.prototype._GetObjectByReferenceId = function (referenceId) {
            /* Begin_PlaceHolder_Document__GetObjectByReferenceId */
            /* End_PlaceHolder_Document__GetObjectByReferenceId */
            var action = _createMethodAction(this.context, this, "_GetObjectByReferenceId", 1 /* Read */, [referenceId]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Document.prototype._GetObjectTypeNameByReferenceId = function (referenceId) {
            /* Begin_PlaceHolder_Document__GetObjectTypeNameByReferenceId */
            /* End_PlaceHolder_Document__GetObjectTypeNameByReferenceId */
            var action = _createMethodAction(this.context, this, "_GetObjectTypeNameByReferenceId", 1 /* Read */, [referenceId]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Document.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Document__KeepReference */
            /* End_PlaceHolder_Document__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        Document.prototype._RemoveAllReferences = function () {
            /* Begin_PlaceHolder_Document__RemoveAllReferences */
            /* End_PlaceHolder_Document__RemoveAllReferences */
            _createMethodAction(this.context, this, "_RemoveAllReferences", 1 /* Read */, []);
        };
        Document.prototype._RemoveReference = function (referenceId) {
            /* Begin_PlaceHolder_Document__RemoveReference */
            /* End_PlaceHolder_Document__RemoveReference */
            _createMethodAction(this.context, this, "_RemoveReference", 1 /* Read */, [referenceId]);
        };
        /** Handle results returned from the document
         * @private
         */
        Document.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Saved"])) {
                this.m_saved = obj["Saved"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["body", "Body", "contentControls", "ContentControls", "properties", "Properties", "sections", "Sections", "settings", "Settings"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Document.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Document.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Document.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Document.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Document.prototype.toJSON = function () {
            return {
                "body": this.m_body,
                "properties": this.m_properties,
                "saved": this.m_saved
            };
        };
        return Document;
    })(OfficeExtension.ClientObject);
    Word.Document = Document;
    /**
     *
     * Represents document properties.
     *
     * [Api set: WordApi 1.3]
     */
    var DocumentProperties = (function (_super) {
        __extends(DocumentProperties, _super);
        function DocumentProperties() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(DocumentProperties.prototype, "customProperties", {
            /* Begin_PlaceHolder_DocumentProperties_Custom_Members */
            /* End_PlaceHolder_DocumentProperties_Custom_Members */
            /**
             *
             * Gets the collection of custom properties of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_CustomProperties_get */
                /* End_PlaceHolder_DocumentProperties_CustomProperties_get */
                if (!this.m_customProperties) {
                    this.m_customProperties = new Word.CustomPropertyCollection(this.context, _createPropertyObjectPath(this.context, this, "CustomProperties", true, false));
                }
                return this.m_customProperties;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "applicationName", {
            /**
             *
             * Gets the application name of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_ApplicationName_get */
                /* End_PlaceHolder_DocumentProperties_ApplicationName_get */
                _throwIfNotLoaded("applicationName", this.m_applicationName, "DocumentProperties", this._isNull);
                return this.m_applicationName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "author", {
            /**
             *
             * Gets or sets the author of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Author_get */
                /* End_PlaceHolder_DocumentProperties_Author_get */
                _throwIfNotLoaded("author", this.m_author, "DocumentProperties", this._isNull);
                return this.m_author;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Author_set */
                /* End_PlaceHolder_DocumentProperties_Author_set */
                this.m_author = value;
                _createSetPropertyAction(this.context, this, "Author", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "category", {
            /**
             *
             * Gets or sets the category of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Category_get */
                /* End_PlaceHolder_DocumentProperties_Category_get */
                _throwIfNotLoaded("category", this.m_category, "DocumentProperties", this._isNull);
                return this.m_category;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Category_set */
                /* End_PlaceHolder_DocumentProperties_Category_set */
                this.m_category = value;
                _createSetPropertyAction(this.context, this, "Category", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "comments", {
            /**
             *
             * Gets or sets the comments of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Comments_get */
                /* End_PlaceHolder_DocumentProperties_Comments_get */
                _throwIfNotLoaded("comments", this.m_comments, "DocumentProperties", this._isNull);
                return this.m_comments;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Comments_set */
                /* End_PlaceHolder_DocumentProperties_Comments_set */
                this.m_comments = value;
                _createSetPropertyAction(this.context, this, "Comments", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "company", {
            /**
             *
             * Gets or sets the company of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Company_get */
                /* End_PlaceHolder_DocumentProperties_Company_get */
                _throwIfNotLoaded("company", this.m_company, "DocumentProperties", this._isNull);
                return this.m_company;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Company_set */
                /* End_PlaceHolder_DocumentProperties_Company_set */
                this.m_company = value;
                _createSetPropertyAction(this.context, this, "Company", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "creationDate", {
            /**
             *
             * Gets the creation date of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_CreationDate_get */
                /* End_PlaceHolder_DocumentProperties_CreationDate_get */
                _throwIfNotLoaded("creationDate", this.m_creationDate, "DocumentProperties", this._isNull);
                return this.m_creationDate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "format", {
            /**
             *
             * Gets or sets the format of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Format_get */
                /* End_PlaceHolder_DocumentProperties_Format_get */
                _throwIfNotLoaded("format", this.m_format, "DocumentProperties", this._isNull);
                return this.m_format;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Format_set */
                /* End_PlaceHolder_DocumentProperties_Format_set */
                this.m_format = value;
                _createSetPropertyAction(this.context, this, "Format", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "hyperlinkBase", {
            /**
             *
             * Gets or sets the hyperlink base of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_HyperlinkBase_get */
                /* End_PlaceHolder_DocumentProperties_HyperlinkBase_get */
                _throwIfNotLoaded("hyperlinkBase", this.m_hyperlinkBase, "DocumentProperties", this._isNull);
                return this.m_hyperlinkBase;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_HyperlinkBase_set */
                /* End_PlaceHolder_DocumentProperties_HyperlinkBase_set */
                this.m_hyperlinkBase = value;
                _createSetPropertyAction(this.context, this, "HyperlinkBase", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "keywords", {
            /**
             *
             * Gets or sets the keywords of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Keywords_get */
                /* End_PlaceHolder_DocumentProperties_Keywords_get */
                _throwIfNotLoaded("keywords", this.m_keywords, "DocumentProperties", this._isNull);
                return this.m_keywords;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Keywords_set */
                /* End_PlaceHolder_DocumentProperties_Keywords_set */
                this.m_keywords = value;
                _createSetPropertyAction(this.context, this, "Keywords", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "lastAuthor", {
            /**
             *
             * Gets or sets the last author of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_LastAuthor_get */
                /* End_PlaceHolder_DocumentProperties_LastAuthor_get */
                _throwIfNotLoaded("lastAuthor", this.m_lastAuthor, "DocumentProperties", this._isNull);
                return this.m_lastAuthor;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_LastAuthor_set */
                /* End_PlaceHolder_DocumentProperties_LastAuthor_set */
                this.m_lastAuthor = value;
                _createSetPropertyAction(this.context, this, "LastAuthor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "lastPrintDate", {
            /**
             *
             * Gets the last print date of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_LastPrintDate_get */
                /* End_PlaceHolder_DocumentProperties_LastPrintDate_get */
                _throwIfNotLoaded("lastPrintDate", this.m_lastPrintDate, "DocumentProperties", this._isNull);
                return this.m_lastPrintDate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "lastSaveTime", {
            /**
             *
             * Gets the last save time of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_LastSaveTime_get */
                /* End_PlaceHolder_DocumentProperties_LastSaveTime_get */
                _throwIfNotLoaded("lastSaveTime", this.m_lastSaveTime, "DocumentProperties", this._isNull);
                return this.m_lastSaveTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "manager", {
            /**
             *
             * Gets or sets the manager of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Manager_get */
                /* End_PlaceHolder_DocumentProperties_Manager_get */
                _throwIfNotLoaded("manager", this.m_manager, "DocumentProperties", this._isNull);
                return this.m_manager;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Manager_set */
                /* End_PlaceHolder_DocumentProperties_Manager_set */
                this.m_manager = value;
                _createSetPropertyAction(this.context, this, "Manager", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfBytes", {
            /**
             *
             * Gets the number of bytes of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfBytes_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfBytes_get */
                _throwIfNotLoaded("numberOfBytes", this.m_numberOfBytes, "DocumentProperties", this._isNull);
                return this.m_numberOfBytes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfCharacters", {
            /**
             *
             * Gets the number of characters of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfCharacters_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfCharacters_get */
                _throwIfNotLoaded("numberOfCharacters", this.m_numberOfCharacters, "DocumentProperties", this._isNull);
                return this.m_numberOfCharacters;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfCharactersWithSpaces", {
            /**
             *
             * Gets the number of characters with spaces of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfCharactersWithSpaces_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfCharactersWithSpaces_get */
                _throwIfNotLoaded("numberOfCharactersWithSpaces", this.m_numberOfCharactersWithSpaces, "DocumentProperties", this._isNull);
                return this.m_numberOfCharactersWithSpaces;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfHiddenSlides", {
            /**
             *
             * Gets the number of hidden slides of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfHiddenSlides_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfHiddenSlides_get */
                _throwIfNotLoaded("numberOfHiddenSlides", this.m_numberOfHiddenSlides, "DocumentProperties", this._isNull);
                return this.m_numberOfHiddenSlides;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfLines", {
            /**
             *
             * Gets the number of lines of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfLines_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfLines_get */
                _throwIfNotLoaded("numberOfLines", this.m_numberOfLines, "DocumentProperties", this._isNull);
                return this.m_numberOfLines;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfMultimediaClips", {
            /**
             *
             * Gets the number of multimedia clips of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfMultimediaClips_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfMultimediaClips_get */
                _throwIfNotLoaded("numberOfMultimediaClips", this.m_numberOfMultimediaClips, "DocumentProperties", this._isNull);
                return this.m_numberOfMultimediaClips;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfNotes", {
            /**
             *
             * Gets the number of notes of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfNotes_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfNotes_get */
                _throwIfNotLoaded("numberOfNotes", this.m_numberOfNotes, "DocumentProperties", this._isNull);
                return this.m_numberOfNotes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfPages", {
            /**
             *
             * Gets the number of pages of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfPages_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfPages_get */
                _throwIfNotLoaded("numberOfPages", this.m_numberOfPages, "DocumentProperties", this._isNull);
                return this.m_numberOfPages;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfParagraphs", {
            /**
             *
             * Gets the number of paragraphs of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfParagraphs_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfParagraphs_get */
                _throwIfNotLoaded("numberOfParagraphs", this.m_numberOfParagraphs, "DocumentProperties", this._isNull);
                return this.m_numberOfParagraphs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfSlides", {
            /**
             *
             * Gets the number of slides of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfSlides_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfSlides_get */
                _throwIfNotLoaded("numberOfSlides", this.m_numberOfSlides, "DocumentProperties", this._isNull);
                return this.m_numberOfSlides;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "numberOfWords", {
            /**
             *
             * Gets the number of words of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_NumberOfWords_get */
                /* End_PlaceHolder_DocumentProperties_NumberOfWords_get */
                _throwIfNotLoaded("numberOfWords", this.m_numberOfWords, "DocumentProperties", this._isNull);
                return this.m_numberOfWords;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "revisionNumber", {
            /**
             *
             * Gets the revision number of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_RevisionNumber_get */
                /* End_PlaceHolder_DocumentProperties_RevisionNumber_get */
                _throwIfNotLoaded("revisionNumber", this.m_revisionNumber, "DocumentProperties", this._isNull);
                return this.m_revisionNumber;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "security", {
            /**
             *
             * Gets the security of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Security_get */
                /* End_PlaceHolder_DocumentProperties_Security_get */
                _throwIfNotLoaded("security", this.m_security, "DocumentProperties", this._isNull);
                return this.m_security;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "subject", {
            /**
             *
             * Gets or sets the subject of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Subject_get */
                /* End_PlaceHolder_DocumentProperties_Subject_get */
                _throwIfNotLoaded("subject", this.m_subject, "DocumentProperties", this._isNull);
                return this.m_subject;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Subject_set */
                /* End_PlaceHolder_DocumentProperties_Subject_set */
                this.m_subject = value;
                _createSetPropertyAction(this.context, this, "Subject", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "template", {
            /**
             *
             * Gets the template of the document. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Template_get */
                /* End_PlaceHolder_DocumentProperties_Template_get */
                _throwIfNotLoaded("template", this.m_template, "DocumentProperties", this._isNull);
                return this.m_template;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "title", {
            /**
             *
             * Gets or sets the title of the document.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_Title_get */
                /* End_PlaceHolder_DocumentProperties_Title_get */
                _throwIfNotLoaded("title", this.m_title, "DocumentProperties", this._isNull);
                return this.m_title;
            },
            set: function (value) {
                /* Begin_PlaceHolder_DocumentProperties_Title_set */
                /* End_PlaceHolder_DocumentProperties_Title_set */
                this.m_title = value;
                _createSetPropertyAction(this.context, this, "Title", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "totalEditingTime", {
            /**
             *
             * Gets the total editing time of the document in minutes. Read only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties_TotalEditingTime_get */
                /* End_PlaceHolder_DocumentProperties_TotalEditingTime_get */
                _throwIfNotLoaded("totalEditingTime", this.m_totalEditingTime, "DocumentProperties", this._isNull);
                return this.m_totalEditingTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_DocumentProperties__ReferenceId_get */
                /* End_PlaceHolder_DocumentProperties__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "DocumentProperties", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        DocumentProperties.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_DocumentProperties__KeepReference */
            /* End_PlaceHolder_DocumentProperties__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        DocumentProperties.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["ApplicationName"])) {
                this.m_applicationName = obj["ApplicationName"];
            }
            if (!_isUndefined(obj["Author"])) {
                this.m_author = obj["Author"];
            }
            if (!_isUndefined(obj["Category"])) {
                this.m_category = obj["Category"];
            }
            if (!_isUndefined(obj["Comments"])) {
                this.m_comments = obj["Comments"];
            }
            if (!_isUndefined(obj["Company"])) {
                this.m_company = obj["Company"];
            }
            if (!_isUndefined(obj["CreationDate"])) {
                this.m_creationDate = _adjustToDateTime(obj["CreationDate"]);
            }
            if (!_isUndefined(obj["Format"])) {
                this.m_format = obj["Format"];
            }
            if (!_isUndefined(obj["HyperlinkBase"])) {
                this.m_hyperlinkBase = obj["HyperlinkBase"];
            }
            if (!_isUndefined(obj["Keywords"])) {
                this.m_keywords = obj["Keywords"];
            }
            if (!_isUndefined(obj["LastAuthor"])) {
                this.m_lastAuthor = obj["LastAuthor"];
            }
            if (!_isUndefined(obj["LastPrintDate"])) {
                this.m_lastPrintDate = _adjustToDateTime(obj["LastPrintDate"]);
            }
            if (!_isUndefined(obj["LastSaveTime"])) {
                this.m_lastSaveTime = _adjustToDateTime(obj["LastSaveTime"]);
            }
            if (!_isUndefined(obj["Manager"])) {
                this.m_manager = obj["Manager"];
            }
            if (!_isUndefined(obj["NumberOfBytes"])) {
                this.m_numberOfBytes = obj["NumberOfBytes"];
            }
            if (!_isUndefined(obj["NumberOfCharacters"])) {
                this.m_numberOfCharacters = obj["NumberOfCharacters"];
            }
            if (!_isUndefined(obj["NumberOfCharactersWithSpaces"])) {
                this.m_numberOfCharactersWithSpaces = obj["NumberOfCharactersWithSpaces"];
            }
            if (!_isUndefined(obj["NumberOfHiddenSlides"])) {
                this.m_numberOfHiddenSlides = obj["NumberOfHiddenSlides"];
            }
            if (!_isUndefined(obj["NumberOfLines"])) {
                this.m_numberOfLines = obj["NumberOfLines"];
            }
            if (!_isUndefined(obj["NumberOfMultimediaClips"])) {
                this.m_numberOfMultimediaClips = obj["NumberOfMultimediaClips"];
            }
            if (!_isUndefined(obj["NumberOfNotes"])) {
                this.m_numberOfNotes = obj["NumberOfNotes"];
            }
            if (!_isUndefined(obj["NumberOfPages"])) {
                this.m_numberOfPages = obj["NumberOfPages"];
            }
            if (!_isUndefined(obj["NumberOfParagraphs"])) {
                this.m_numberOfParagraphs = obj["NumberOfParagraphs"];
            }
            if (!_isUndefined(obj["NumberOfSlides"])) {
                this.m_numberOfSlides = obj["NumberOfSlides"];
            }
            if (!_isUndefined(obj["NumberOfWords"])) {
                this.m_numberOfWords = obj["NumberOfWords"];
            }
            if (!_isUndefined(obj["RevisionNumber"])) {
                this.m_revisionNumber = obj["RevisionNumber"];
            }
            if (!_isUndefined(obj["Security"])) {
                this.m_security = obj["Security"];
            }
            if (!_isUndefined(obj["Subject"])) {
                this.m_subject = obj["Subject"];
            }
            if (!_isUndefined(obj["Template"])) {
                this.m_template = obj["Template"];
            }
            if (!_isUndefined(obj["Title"])) {
                this.m_title = obj["Title"];
            }
            if (!_isUndefined(obj["TotalEditingTime"])) {
                this.m_totalEditingTime = obj["TotalEditingTime"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["customProperties", "CustomProperties"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        DocumentProperties.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        DocumentProperties.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        DocumentProperties.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        DocumentProperties.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        DocumentProperties.prototype.toJSON = function () {
            return {
                "applicationName": this.m_applicationName,
                "author": this.m_author,
                "category": this.m_category,
                "comments": this.m_comments,
                "company": this.m_company,
                "creationDate": this.m_creationDate,
                "format": this.m_format,
                "hyperlinkBase": this.m_hyperlinkBase,
                "keywords": this.m_keywords,
                "lastAuthor": this.m_lastAuthor,
                "lastPrintDate": this.m_lastPrintDate,
                "lastSaveTime": this.m_lastSaveTime,
                "manager": this.m_manager,
                "numberOfBytes": this.m_numberOfBytes,
                "numberOfCharacters": this.m_numberOfCharacters,
                "numberOfCharactersWithSpaces": this.m_numberOfCharactersWithSpaces,
                "numberOfHiddenSlides": this.m_numberOfHiddenSlides,
                "numberOfLines": this.m_numberOfLines,
                "numberOfMultimediaClips": this.m_numberOfMultimediaClips,
                "numberOfNotes": this.m_numberOfNotes,
                "numberOfPages": this.m_numberOfPages,
                "numberOfParagraphs": this.m_numberOfParagraphs,
                "numberOfSlides": this.m_numberOfSlides,
                "numberOfWords": this.m_numberOfWords,
                "revisionNumber": this.m_revisionNumber,
                "security": this.m_security,
                "subject": this.m_subject,
                "template": this.m_template,
                "title": this.m_title,
                "totalEditingTime": this.m_totalEditingTime
            };
        };
        return DocumentProperties;
    })(OfficeExtension.ClientObject);
    Word.DocumentProperties = DocumentProperties;
    /**
     *
     * Represents a font.
     *
     * [Api set: WordApi 1.1]
     */
    var Font = (function (_super) {
        __extends(Font, _super);
        function Font() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Font.prototype, "bold", {
            /* Begin_PlaceHolder_Font_Custom_Members */
            /* End_PlaceHolder_Font_Custom_Members */
            /**
             *
             * Gets or sets a value that indicates whether the font is bold. True if the font is formatted as bold, otherwise, false.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Bold_get */
                /* End_PlaceHolder_Font_Bold_get */
                _throwIfNotLoaded("bold", this.m_bold, "Font", this._isNull);
                return this.m_bold;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Bold_set */
                /* End_PlaceHolder_Font_Bold_set */
                this.m_bold = value;
                _createSetPropertyAction(this.context, this, "Bold", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "color", {
            /**
             *
             * Gets or sets the color for the specified font. You can provide the value in the '#RRGGBB' format or the color name.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Color_get */
                /* End_PlaceHolder_Font_Color_get */
                _throwIfNotLoaded("color", this.m_color, "Font", this._isNull);
                return this.m_color;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Color_set */
                /* End_PlaceHolder_Font_Color_set */
                this.m_color = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "doubleStrikeThrough", {
            /**
             *
             * Gets or sets a value that indicates whether the font has a double strike through. True if the font is formatted as double strikethrough text, otherwise, false.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_DoubleStrikeThrough_get */
                /* End_PlaceHolder_Font_DoubleStrikeThrough_get */
                _throwIfNotLoaded("doubleStrikeThrough", this.m_doubleStrikeThrough, "Font", this._isNull);
                return this.m_doubleStrikeThrough;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_DoubleStrikeThrough_set */
                /* End_PlaceHolder_Font_DoubleStrikeThrough_set */
                this.m_doubleStrikeThrough = value;
                _createSetPropertyAction(this.context, this, "DoubleStrikeThrough", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "highlightColor", {
            /**
             *
             * Gets or sets the highlight color for the specified font. You can provide the value as either in the '#RRGGBB' format or the color name.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_HighlightColor_get */
                /* End_PlaceHolder_Font_HighlightColor_get */
                _throwIfNotLoaded("highlightColor", this.m_highlightColor, "Font", this._isNull);
                return this.m_highlightColor;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_HighlightColor_set */
                /* End_PlaceHolder_Font_HighlightColor_set */
                this.m_highlightColor = value;
                _createSetPropertyAction(this.context, this, "HighlightColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "italic", {
            /**
             *
             * Gets or sets a value that indicates whether the font is italicized. True if the font is italicized, otherwise, false.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Italic_get */
                /* End_PlaceHolder_Font_Italic_get */
                _throwIfNotLoaded("italic", this.m_italic, "Font", this._isNull);
                return this.m_italic;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Italic_set */
                /* End_PlaceHolder_Font_Italic_set */
                this.m_italic = value;
                _createSetPropertyAction(this.context, this, "Italic", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "name", {
            /**
             *
             * Gets or sets a value that represents the name of the font.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Name_get */
                /* End_PlaceHolder_Font_Name_get */
                _throwIfNotLoaded("name", this.m_name, "Font", this._isNull);
                return this.m_name;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Name_set */
                /* End_PlaceHolder_Font_Name_set */
                this.m_name = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "size", {
            /**
             *
             * Gets or sets a value that represents the font size in points.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Size_get */
                /* End_PlaceHolder_Font_Size_get */
                _throwIfNotLoaded("size", this.m_size, "Font", this._isNull);
                return this.m_size;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Size_set */
                /* End_PlaceHolder_Font_Size_set */
                this.m_size = value;
                _createSetPropertyAction(this.context, this, "Size", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "strikeThrough", {
            /**
             *
             * Gets or sets a value that indicates whether the font has a strike through. True if the font is formatted as strikethrough text, otherwise, false.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_StrikeThrough_get */
                /* End_PlaceHolder_Font_StrikeThrough_get */
                _throwIfNotLoaded("strikeThrough", this.m_strikeThrough, "Font", this._isNull);
                return this.m_strikeThrough;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_StrikeThrough_set */
                /* End_PlaceHolder_Font_StrikeThrough_set */
                this.m_strikeThrough = value;
                _createSetPropertyAction(this.context, this, "StrikeThrough", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "subscript", {
            /**
             *
             * Gets or sets a value that indicates whether the font is a subscript. True if the font is formatted as subscript, otherwise, false.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Subscript_get */
                /* End_PlaceHolder_Font_Subscript_get */
                _throwIfNotLoaded("subscript", this.m_subscript, "Font", this._isNull);
                return this.m_subscript;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Subscript_set */
                /* End_PlaceHolder_Font_Subscript_set */
                this.m_subscript = value;
                _createSetPropertyAction(this.context, this, "Subscript", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "superscript", {
            /**
             *
             * Gets or sets a value that indicates whether the font is a superscript. True if the font is formatted as superscript, otherwise, false.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Superscript_get */
                /* End_PlaceHolder_Font_Superscript_get */
                _throwIfNotLoaded("superscript", this.m_superscript, "Font", this._isNull);
                return this.m_superscript;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Superscript_set */
                /* End_PlaceHolder_Font_Superscript_set */
                this.m_superscript = value;
                _createSetPropertyAction(this.context, this, "Superscript", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "underline", {
            /**
             *
             * Gets or sets a value that indicates the font's underline type. 'None' if the font is not underlined.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Font_Underline_get */
                /* End_PlaceHolder_Font_Underline_get */
                _throwIfNotLoaded("underline", this.m_underline, "Font", this._isNull);
                return this.m_underline;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Font_Underline_set */
                /* End_PlaceHolder_Font_Underline_set */
                this.m_underline = value;
                _createSetPropertyAction(this.context, this, "Underline", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Font.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Font__ReferenceId_get */
                /* End_PlaceHolder_Font__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Font", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        Font.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Font__KeepReference */
            /* End_PlaceHolder_Font__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        Font.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Bold"])) {
                this.m_bold = obj["Bold"];
            }
            if (!_isUndefined(obj["Color"])) {
                this.m_color = obj["Color"];
            }
            if (!_isUndefined(obj["DoubleStrikeThrough"])) {
                this.m_doubleStrikeThrough = obj["DoubleStrikeThrough"];
            }
            if (!_isUndefined(obj["HighlightColor"])) {
                this.m_highlightColor = obj["HighlightColor"];
            }
            if (!_isUndefined(obj["Italic"])) {
                this.m_italic = obj["Italic"];
            }
            if (!_isUndefined(obj["Name"])) {
                this.m_name = obj["Name"];
            }
            if (!_isUndefined(obj["Size"])) {
                this.m_size = obj["Size"];
            }
            if (!_isUndefined(obj["StrikeThrough"])) {
                this.m_strikeThrough = obj["StrikeThrough"];
            }
            if (!_isUndefined(obj["Subscript"])) {
                this.m_subscript = obj["Subscript"];
            }
            if (!_isUndefined(obj["Superscript"])) {
                this.m_superscript = obj["Superscript"];
            }
            if (!_isUndefined(obj["Underline"])) {
                this.m_underline = obj["Underline"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Font.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Font.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Font.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Font.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Font.prototype.toJSON = function () {
            return {
                "bold": this.m_bold,
                "color": this.m_color,
                "doubleStrikeThrough": this.m_doubleStrikeThrough,
                "highlightColor": this.m_highlightColor,
                "italic": this.m_italic,
                "name": this.m_name,
                "size": this.m_size,
                "strikeThrough": this.m_strikeThrough,
                "subscript": this.m_subscript,
                "superscript": this.m_superscript,
                "underline": this.m_underline
            };
        };
        return Font;
    })(OfficeExtension.ClientObject);
    Word.Font = Font;
    /**
     *
     * Represents an inline picture.
     *
     * [Api set: WordApi 1.1]
     */
    var InlinePicture = (function (_super) {
        __extends(InlinePicture, _super);
        function InlinePicture() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(InlinePicture.prototype, "paragraph", {
            /* Begin_PlaceHolder_InlinePicture_Custom_Members */
            /* End_PlaceHolder_InlinePicture_Custom_Members */
            /**
             *
             * Gets the parent paragraph that contains the inline image. Read-only.
             *
             * [Api set: WordApi 1.2]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_Paragraph_get */
                /* End_PlaceHolder_InlinePicture_Paragraph_get */
                if (!this.m_paragraph) {
                    this.m_paragraph = new Word.Paragraph(this.context, _createPropertyObjectPath(this.context, this, "Paragraph", false, false));
                }
                return this.m_paragraph;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "parentContentControl", {
            /**
             *
             * Gets the content control that contains the inline image. Returns a null object if there isn't a parent content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_ParentContentControl_get */
                /* End_PlaceHolder_InlinePicture_ParentContentControl_get */
                if (!this.m_parentContentControl) {
                    this.m_parentContentControl = new Word.ContentControl(this.context, _createPropertyObjectPath(this.context, this, "ParentContentControl", false, false));
                }
                return this.m_parentContentControl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "parentTable", {
            /**
             *
             * Gets the table that contains the inline image. Returns a null object if it is not contained in a table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_ParentTable_get */
                /* End_PlaceHolder_InlinePicture_ParentTable_get */
                if (!this.m_parentTable) {
                    this.m_parentTable = new Word.Table(this.context, _createPropertyObjectPath(this.context, this, "ParentTable", false, false));
                }
                return this.m_parentTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "parentTableCell", {
            /**
             *
             * Gets the table cell that contains the inline image. Returns a null object if it is not contained in a table cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_ParentTableCell_get */
                /* End_PlaceHolder_InlinePicture_ParentTableCell_get */
                if (!this.m_parentTableCell) {
                    this.m_parentTableCell = new Word.TableCell(this.context, _createPropertyObjectPath(this.context, this, "ParentTableCell", false, false));
                }
                return this.m_parentTableCell;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "altTextDescription", {
            /**
             *
             * Gets or sets a string that represents the alternative text associated with the inline image
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_AltTextDescription_get */
                /* End_PlaceHolder_InlinePicture_AltTextDescription_get */
                _throwIfNotLoaded("altTextDescription", this.m_altTextDescription, "InlinePicture", this._isNull);
                return this.m_altTextDescription;
            },
            set: function (value) {
                /* Begin_PlaceHolder_InlinePicture_AltTextDescription_set */
                /* End_PlaceHolder_InlinePicture_AltTextDescription_set */
                this.m_altTextDescription = value;
                _createSetPropertyAction(this.context, this, "AltTextDescription", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "altTextTitle", {
            /**
             *
             * Gets or sets a string that contains the title for the inline image.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_AltTextTitle_get */
                /* End_PlaceHolder_InlinePicture_AltTextTitle_get */
                _throwIfNotLoaded("altTextTitle", this.m_altTextTitle, "InlinePicture", this._isNull);
                return this.m_altTextTitle;
            },
            set: function (value) {
                /* Begin_PlaceHolder_InlinePicture_AltTextTitle_set */
                /* End_PlaceHolder_InlinePicture_AltTextTitle_set */
                this.m_altTextTitle = value;
                _createSetPropertyAction(this.context, this, "AltTextTitle", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "height", {
            /**
             *
             * Gets or sets a number that describes the height of the inline image.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_Height_get */
                /* End_PlaceHolder_InlinePicture_Height_get */
                _throwIfNotLoaded("height", this.m_height, "InlinePicture", this._isNull);
                return this.m_height;
            },
            set: function (value) {
                /* Begin_PlaceHolder_InlinePicture_Height_set */
                /* End_PlaceHolder_InlinePicture_Height_set */
                this.m_height = value;
                _createSetPropertyAction(this.context, this, "Height", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "hyperlink", {
            /**
             *
             * Gets or sets a hyperlink on the image. Use a newline character ('\n') to separate the address part from the optional location part.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_Hyperlink_get */
                /* End_PlaceHolder_InlinePicture_Hyperlink_get */
                _throwIfNotLoaded("hyperlink", this.m_hyperlink, "InlinePicture", this._isNull);
                return this.m_hyperlink;
            },
            set: function (value) {
                /* Begin_PlaceHolder_InlinePicture_Hyperlink_set */
                /* End_PlaceHolder_InlinePicture_Hyperlink_set */
                this.m_hyperlink = value;
                _createSetPropertyAction(this.context, this, "Hyperlink", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "imageFormat", {
            /**
             *
             * Gets the format of the inline image. Read-only.
             *
             * [Api set: WordApi 1.4]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_ImageFormat_get */
                /* End_PlaceHolder_InlinePicture_ImageFormat_get */
                _throwIfNotLoaded("imageFormat", this.m_imageFormat, "InlinePicture", this._isNull);
                return this.m_imageFormat;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "lockAspectRatio", {
            /**
             *
             * Gets or sets a value that indicates whether the inline image retains its original proportions when you resize it.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_LockAspectRatio_get */
                /* End_PlaceHolder_InlinePicture_LockAspectRatio_get */
                _throwIfNotLoaded("lockAspectRatio", this.m_lockAspectRatio, "InlinePicture", this._isNull);
                return this.m_lockAspectRatio;
            },
            set: function (value) {
                /* Begin_PlaceHolder_InlinePicture_LockAspectRatio_set */
                /* End_PlaceHolder_InlinePicture_LockAspectRatio_set */
                this.m_lockAspectRatio = value;
                _createSetPropertyAction(this.context, this, "LockAspectRatio", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "width", {
            /**
             *
             * Gets or sets a number that describes the width of the inline image.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture_Width_get */
                /* End_PlaceHolder_InlinePicture_Width_get */
                _throwIfNotLoaded("width", this.m_width, "InlinePicture", this._isNull);
                return this.m_width;
            },
            set: function (value) {
                /* Begin_PlaceHolder_InlinePicture_Width_set */
                /* End_PlaceHolder_InlinePicture_Width_set */
                this.m_width = value;
                _createSetPropertyAction(this.context, this, "Width", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "_Id", {
            /**
             *
             * ID
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture__Id_get */
                /* End_PlaceHolder_InlinePicture__Id_get */
                _throwIfNotLoaded("_Id", this.m__Id, "InlinePicture", this._isNull);
                return this.m__Id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePicture.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePicture__ReferenceId_get */
                /* End_PlaceHolder_InlinePicture__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "InlinePicture", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Deletes the inline picture from the document.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.delete = function () {
            /* Begin_PlaceHolder_InlinePicture_Delete */
            /* End_PlaceHolder_InlinePicture_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, []);
        };
        /**
         *
         * Gets the base64 encoded string representation of the inline image.
         *
         * [Api set: WordApi 1.1]
         */
        InlinePicture.prototype.getBase64ImageSrc = function () {
            /* Begin_PlaceHolder_InlinePicture_GetBase64ImageSrc */
            /* End_PlaceHolder_InlinePicture_GetBase64ImageSrc */
            var action = _createMethodAction(this.context, this, "GetBase64ImageSrc", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the next inline image.
         *
         * [Api set: WordApi 1.3]
         */
        InlinePicture.prototype.getNext = function () {
            /* Begin_PlaceHolder_InlinePicture_GetNext */
            /* End_PlaceHolder_InlinePicture_GetNext */
            return new Word.InlinePicture(this.context, _createMethodObjectPath(this.context, this, "GetNext", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets the picture, or the starting or ending point of the picture, as a range.
         *
         * @param rangeLocation Optional. The range location can be 'Whole', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.3]
         */
        InlinePicture.prototype.getRange = function (rangeLocation) {
            /* Begin_PlaceHolder_InlinePicture_GetRange */
            /* End_PlaceHolder_InlinePicture_GetRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1 /* Read */, [rangeLocation], false, false, null));
        };
        /**
         *
         * Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or 'After'.
         *
         * @param breakType Required. The break type to add.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.insertBreak = function (breakType, insertLocation) {
            /* Begin_PlaceHolder_InlinePicture_InsertBreak */
            /* End_PlaceHolder_InlinePicture_InsertBreak */
            _createMethodAction(this.context, this, "InsertBreak", 0 /* Default */, [breakType, insertLocation]);
        };
        /**
         *
         * Wraps the inline picture with a rich text content control.
         *
         * [Api set: WordApi 1.1]
         */
        InlinePicture.prototype.insertContentControl = function () {
            /* Begin_PlaceHolder_InlinePicture_InsertContentControl */
            /* End_PlaceHolder_InlinePicture_InsertContentControl */
            return new Word.ContentControl(this.context, _createMethodObjectPath(this.context, this, "InsertContentControl", 0 /* Default */, [], false, true, null));
        };
        /**
         *
         * Inserts a document at the specified location. The insertLocation value can be 'Before' or 'After'.
         *
         * @param base64File Required. The base64 encoded content of a .docx file.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.insertFileFromBase64 = function (base64File, insertLocation) {
            /* Begin_PlaceHolder_InlinePicture_InsertFileFromBase64 */
            /* End_PlaceHolder_InlinePicture_InsertFileFromBase64 */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertFileFromBase64", 0 /* Default */, [base64File, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts HTML at the specified location. The insertLocation value can be 'Before' or 'After'.
         *
         * @param html Required. The HTML to be inserted.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.insertHtml = function (html, insertLocation) {
            /* Begin_PlaceHolder_InlinePicture_InsertHtml */
            /* End_PlaceHolder_InlinePicture_InsertHtml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertHtml", 0 /* Default */, [html, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts an inline picture at the specified location. The insertLocation value can be 'Replace', 'Before' or 'After'.
         *
         * @param base64EncodedImage Required. The base64 encoded image to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.insertInlinePictureFromBase64 = function (base64EncodedImage, insertLocation) {
            /* Begin_PlaceHolder_InlinePicture_InsertInlinePictureFromBase64 */
            /* End_PlaceHolder_InlinePicture_InsertInlinePictureFromBase64 */
            return new Word.InlinePicture(this.context, _createMethodObjectPath(this.context, this, "InsertInlinePictureFromBase64", 0 /* Default */, [base64EncodedImage, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts OOXML at the specified location.  The insertLocation value can be 'Before' or 'After'.
         *
         * @param ooxml Required. The OOXML to be inserted.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.insertOoxml = function (ooxml, insertLocation) {
            /* Begin_PlaceHolder_InlinePicture_InsertOoxml */
            /* End_PlaceHolder_InlinePicture_InsertOoxml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertOoxml", 0 /* Default */, [ooxml, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.
         *
         * @param paragraphText Required. The paragraph text to be inserted.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.insertParagraph = function (paragraphText, insertLocation) {
            /* Begin_PlaceHolder_InlinePicture_InsertParagraph */
            /* End_PlaceHolder_InlinePicture_InsertParagraph */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "InsertParagraph", 0 /* Default */, [paragraphText, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts text at the specified location. The insertLocation value can be 'Before' or 'After'.
         *
         * @param text Required. Text to be inserted.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.insertText = function (text, insertLocation) {
            /* Begin_PlaceHolder_InlinePicture_InsertText */
            /* End_PlaceHolder_InlinePicture_InsertText */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertText", 0 /* Default */, [text, insertLocation], false, true, null));
        };
        /**
         *
         * Selects the inline picture. This causes Word to scroll to the selection.
         *
         * @param selectionMode Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.
         *
         * [Api set: WordApi 1.2]
         */
        InlinePicture.prototype.select = function (selectionMode) {
            /* Begin_PlaceHolder_InlinePicture_Select */
            /* End_PlaceHolder_InlinePicture_Select */
            _createMethodAction(this.context, this, "Select", 1 /* Read */, [selectionMode]);
        };
        InlinePicture.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_InlinePicture__KeepReference */
            /* End_PlaceHolder_InlinePicture__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        InlinePicture.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["AltTextDescription"])) {
                this.m_altTextDescription = obj["AltTextDescription"];
            }
            if (!_isUndefined(obj["AltTextTitle"])) {
                this.m_altTextTitle = obj["AltTextTitle"];
            }
            if (!_isUndefined(obj["Height"])) {
                this.m_height = obj["Height"];
            }
            if (!_isUndefined(obj["Hyperlink"])) {
                this.m_hyperlink = obj["Hyperlink"];
            }
            if (!_isUndefined(obj["ImageFormat"])) {
                this.m_imageFormat = obj["ImageFormat"];
            }
            if (!_isUndefined(obj["LockAspectRatio"])) {
                this.m_lockAspectRatio = obj["LockAspectRatio"];
            }
            if (!_isUndefined(obj["Width"])) {
                this.m_width = obj["Width"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.m__Id = obj["_Id"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["paragraph", "Paragraph", "parentContentControl", "ParentContentControl", "parentTable", "ParentTable", "parentTableCell", "ParentTableCell"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        InlinePicture.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        InlinePicture.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["_Id"])) {
                this.m__Id = value["_Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        InlinePicture.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        InlinePicture.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        InlinePicture.prototype.toJSON = function () {
            return {
                "altTextDescription": this.m_altTextDescription,
                "altTextTitle": this.m_altTextTitle,
                "height": this.m_height,
                "hyperlink": this.m_hyperlink,
                "imageFormat": this.m_imageFormat,
                "lockAspectRatio": this.m_lockAspectRatio,
                "width": this.m_width
            };
        };
        return InlinePicture;
    })(OfficeExtension.ClientObject);
    Word.InlinePicture = InlinePicture;
    /**
     *
     * Contains a collection of [inlinePicture](inlinePicture.md) objects.
     *
     * [Api set: WordApi 1.1]
     */
    var InlinePictureCollection = (function (_super) {
        __extends(InlinePictureCollection, _super);
        function InlinePictureCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(InlinePictureCollection.prototype, "items", {
            /* Begin_PlaceHolder_InlinePictureCollection_Custom_Members */
            /* End_PlaceHolder_InlinePictureCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_InlinePictureCollection_items */
                /* End_PlaceHolder_InlinePictureCollection_items */
                _throwIfNotLoaded("items", this.m__items, "InlinePictureCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InlinePictureCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_InlinePictureCollection__ReferenceId_get */
                /* End_PlaceHolder_InlinePictureCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "InlinePictureCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the first inline image in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        InlinePictureCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_InlinePictureCollection_GetFirst */
            /* End_PlaceHolder_InlinePictureCollection_GetFirst */
            return new Word.InlinePicture(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets an inline picture object by its index in the collection.
         *
         * @param index A number that identifies the index location of an inline picture object.
         *
         * [Api set: WordApi 1.1]
         */
        InlinePictureCollection.prototype._GetItem = function (index) {
            /* Begin_PlaceHolder_InlinePictureCollection__GetItem */
            /* End_PlaceHolder_InlinePictureCollection__GetItem */
            return new Word.InlinePicture(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        InlinePictureCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_InlinePictureCollection__KeepReference */
            /* End_PlaceHolder_InlinePictureCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        InlinePictureCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.InlinePicture(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        InlinePictureCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        InlinePictureCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        InlinePictureCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        InlinePictureCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        InlinePictureCollection.prototype.toJSON = function () {
            return {};
        };
        return InlinePictureCollection;
    })(OfficeExtension.ClientObject);
    Word.InlinePictureCollection = InlinePictureCollection;
    /**
     *
     * Contains a collection of [paragraph](paragraph.md) objects.
     *
     * [Api set: WordApi 1.3]
     */
    var List = (function (_super) {
        __extends(List, _super);
        function List() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(List.prototype, "paragraphs", {
            /* Begin_PlaceHolder_List_Custom_Members */
            /* End_PlaceHolder_List_Custom_Members */
            /**
             *
             * Gets paragraphs in the list. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_List_Paragraphs_get */
                /* End_PlaceHolder_List_Paragraphs_get */
                if (!this.m_paragraphs) {
                    this.m_paragraphs = new Word.ParagraphCollection(this.context, _createPropertyObjectPath(this.context, this, "Paragraphs", true, false));
                }
                return this.m_paragraphs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "id", {
            /**
             *
             * Gets the list's id.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_List_Id_get */
                /* End_PlaceHolder_List_Id_get */
                _throwIfNotLoaded("id", this.m_id, "List", this._isNull);
                return this.m_id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "levelExistences", {
            /**
             *
             * Checks whether each of the 9 levels exists in the list. A true value indicates the level exists, which means there is at least one list item at that level. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_List_LevelExistences_get */
                /* End_PlaceHolder_List_LevelExistences_get */
                _throwIfNotLoaded("levelExistences", this.m_levelExistences, "List", this._isNull);
                return this.m_levelExistences;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "levelTypes", {
            /**
             *
             * Gets all 9 level types in the list. Each type can be 'Bullet', 'Number' or 'Picture'. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_List_LevelTypes_get */
                /* End_PlaceHolder_List_LevelTypes_get */
                _throwIfNotLoaded("levelTypes", this.m_levelTypes, "List", this._isNull);
                return this.m_levelTypes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(List.prototype, "_ReferenceId", {
            get: function () {
                /* Begin_PlaceHolder_List__ReferenceId_get */
                /* End_PlaceHolder_List__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "List", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the font of the bullet, number or picture at the specified level in the list.
         *
         * @param level Required. The level in the list.
         *
         * [Api set: WordApi 1.4]
         */
        List.prototype.getLevelFont = function (level) {
            /* Begin_PlaceHolder_List_GetLevelFont */
            /* End_PlaceHolder_List_GetLevelFont */
            return new Word.Font(this.context, _createMethodObjectPath(this.context, this, "GetLevelFont", 1 /* Read */, [level], false, false, null));
        };
        /**
         *
         * Gets the paragraphs that occur at the specified level in the list.
         *
         * @param level Required. The level in the list.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.getLevelParagraphs = function (level) {
            /* Begin_PlaceHolder_List_GetLevelParagraphs */
            /* End_PlaceHolder_List_GetLevelParagraphs */
            return new Word.ParagraphCollection(this.context, _createMethodObjectPath(this.context, this, "GetLevelParagraphs", 1 /* Read */, [level], true, false, null));
        };
        /**
         *
         * Gets the base64 encoded string representation of the picture at the specified level in the list.
         *
         * @param level Required. The level in the list.
         *
         * [Api set: WordApi 1.4]
         */
        List.prototype.getLevelPicture = function (level) {
            /* Begin_PlaceHolder_List_GetLevelPicture */
            /* End_PlaceHolder_List_GetLevelPicture */
            var action = _createMethodAction(this.context, this, "GetLevelPicture", 1 /* Read */, [level]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the bullet, number or picture at the specified level as a string.
         *
         * @param level Required. The level in the list.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.getLevelString = function (level) {
            /* Begin_PlaceHolder_List_GetLevelString */
            /* End_PlaceHolder_List_GetLevelString */
            var action = _createMethodAction(this.context, this, "GetLevelString", 1 /* Read */, [level]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Inserts a paragraph at the specified location. The insertLocation value can be 'Start', 'End', 'Before' or 'After'.
         *
         * @param paragraphText Required. The paragraph text to be inserted.
         * @param insertLocation Required. The value can be 'Start', 'End', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.insertParagraph = function (paragraphText, insertLocation) {
            /* Begin_PlaceHolder_List_InsertParagraph */
            /* End_PlaceHolder_List_InsertParagraph */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "InsertParagraph", 0 /* Default */, [paragraphText, insertLocation], false, true, null));
        };
        /**
         *
         * Resets the font of the bullet, number or picture at the specified level in the list.
         *
         * @param level Required. The level in the list.
         * @param resetFontName Optional. Indicates whether to reset the font name. Default is false that indicates the font name is kept unchanged.
         *
         * [Api set: WordApi 1.4]
         */
        List.prototype.resetLevelFont = function (level, resetFontName) {
            /* Begin_PlaceHolder_List_ResetLevelFont */
            /* End_PlaceHolder_List_ResetLevelFont */
            _createMethodAction(this.context, this, "ResetLevelFont", 0 /* Default */, [level, resetFontName]);
        };
        /**
         *
         * Sets the alignment of the bullet, number or picture at the specified level in the list.
         *
         * @param level Required. The level in the list.
         * @param alignment Required. The level alignment that can be 'left', 'centered' or 'right'.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.setLevelAlignment = function (level, alignment) {
            /* Begin_PlaceHolder_List_SetLevelAlignment */
            /* End_PlaceHolder_List_SetLevelAlignment */
            _createMethodAction(this.context, this, "SetLevelAlignment", 0 /* Default */, [level, alignment]);
        };
        /**
         *
         * Sets the bullet format at the specified level in the list. If the bullet is 'Custom', the charCode is required.
         *
         * @param level Required. The level in the list.
         * @param listBullet Required. The bullet.
         * @param charCode Optional. The bullet character's code value. Used only if the bullet is 'Custom'.
         * @param fontName Optional. The bullet's font name. Used only if the bullet is 'Custom'.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.setLevelBullet = function (level, listBullet, charCode, fontName) {
            /* Begin_PlaceHolder_List_SetLevelBullet */
            /* End_PlaceHolder_List_SetLevelBullet */
            _createMethodAction(this.context, this, "SetLevelBullet", 0 /* Default */, [level, listBullet, charCode, fontName]);
        };
        /**
         *
         * Sets the two indents of the specified level in the list.
         *
         * @param level Required. The level in the list.
         * @param textIndent Required. The text indent in points. It is the same as paragraph left indent.
         * @param textIndent Required. The relative indent, in points, of the bullet, number or picture. It is the same as paragraph first line indent.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.setLevelIndents = function (level, textIndent, bulletNumberPictureIndent) {
            /* Begin_PlaceHolder_List_SetLevelIndents */
            /* End_PlaceHolder_List_SetLevelIndents */
            _createMethodAction(this.context, this, "SetLevelIndents", 0 /* Default */, [level, textIndent, bulletNumberPictureIndent]);
        };
        /**
         *
         * Sets the numbering format at the specified level in the list.
         *
         * @param level Required. The level in the list.
         * @param listNumbering Required. The ordinal format.
         * @param formatString Optional. The numbering string format defined as an array of strings and/or integers. Each integer is a level of number type that is higher than or equal to this level. For example, an array of ["(", level - 1, ".", level, ")"] can define the format of "(2.c)", where 2 is the parent's item number and c is this level's item number.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.setLevelNumbering = function (level, listNumbering, formatString) {
            /* Begin_PlaceHolder_List_SetLevelNumbering */
            /* End_PlaceHolder_List_SetLevelNumbering */
            _createMethodAction(this.context, this, "SetLevelNumbering", 0 /* Default */, [level, listNumbering, formatString]);
        };
        /**
         *
         * Sets the picture at the specified level in the list.
         *
         * @param level Required. The level in the list.
         * @param base64EncodedImage Optional. The base64 encoded image to be set. If not given, the default picture is set.
         *
         * [Api set: WordApi 1.4]
         */
        List.prototype.setLevelPicture = function (level, base64EncodedImage) {
            /* Begin_PlaceHolder_List_SetLevelPicture */
            /* End_PlaceHolder_List_SetLevelPicture */
            _createMethodAction(this.context, this, "SetLevelPicture", 0 /* Default */, [level, base64EncodedImage]);
        };
        /**
         *
         * Sets the starting number at the specified level in the list. Default value is 1.
         *
         * @param level Required. The level in the list.
         * @param startingNumber Required. The number to start with.
         *
         * [Api set: WordApi 1.3]
         */
        List.prototype.setLevelStartingNumber = function (level, startingNumber) {
            /* Begin_PlaceHolder_List_SetLevelStartingNumber */
            /* End_PlaceHolder_List_SetLevelStartingNumber */
            _createMethodAction(this.context, this, "SetLevelStartingNumber", 0 /* Default */, [level, startingNumber]);
        };
        List.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_List__KeepReference */
            /* End_PlaceHolder_List__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        List.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                this.m_id = obj["Id"];
            }
            if (!_isUndefined(obj["LevelExistences"])) {
                this.m_levelExistences = obj["LevelExistences"];
            }
            if (!_isUndefined(obj["LevelTypes"])) {
                this.m_levelTypes = obj["LevelTypes"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["paragraphs", "Paragraphs"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        List.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        List.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["Id"])) {
                this.m_id = value["Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        List.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        List.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        List.prototype.toJSON = function () {
            return {
                "id": this.m_id,
                "levelExistences": this.m_levelExistences,
                "levelTypes": this.m_levelTypes
            };
        };
        return List;
    })(OfficeExtension.ClientObject);
    Word.List = List;
    /**
     *
     * Contains a collection of [list](list.md) objects.
     *
     * [Api set: WordApi 1.3]
     */
    var ListCollection = (function (_super) {
        __extends(ListCollection, _super);
        function ListCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ListCollection.prototype, "items", {
            /* Begin_PlaceHolder_ListCollection_Custom_Members */
            /* End_PlaceHolder_ListCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_ListCollection_items */
                /* End_PlaceHolder_ListCollection_items */
                _throwIfNotLoaded("items", this.m__items, "ListCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListCollection.prototype, "_ReferenceId", {
            get: function () {
                /* Begin_PlaceHolder_ListCollection__ReferenceId_get */
                /* End_PlaceHolder_ListCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "ListCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets a list by its identifier.
         *
         * @param id Required. A list identifier.
         *
         * [Api set: WordApi 1.3]
         */
        ListCollection.prototype.getById = function (id) {
            /* Begin_PlaceHolder_ListCollection_GetById */
            /* End_PlaceHolder_ListCollection_GetById */
            return new Word.List(this.context, _createMethodObjectPath(this.context, this, "GetById", 1 /* Read */, [id], false, false, null));
        };
        /**
         *
         * Gets the first list in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        ListCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_ListCollection_GetFirst */
            /* End_PlaceHolder_ListCollection_GetFirst */
            return new Word.List(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a list object by its index in the collection.
         *
         * @param index A number that identifies the index location of a list object.
         *
         * [Api set: WordApi 1.3]
         */
        ListCollection.prototype.getItem = function (index) {
            /* Begin_PlaceHolder_ListCollection_GetItem */
            /* End_PlaceHolder_ListCollection_GetItem */
            return new Word.List(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        ListCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_ListCollection__KeepReference */
            /* End_PlaceHolder_ListCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        ListCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.List(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        ListCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        ListCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        ListCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        ListCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        ListCollection.prototype.toJSON = function () {
            return {};
        };
        return ListCollection;
    })(OfficeExtension.ClientObject);
    Word.ListCollection = ListCollection;
    /**
     *
     * Represents the paragraph list item format.
     *
     * [Api set: WordApi 1.3]
     */
    var ListItem = (function (_super) {
        __extends(ListItem, _super);
        function ListItem() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ListItem.prototype, "level", {
            /* Begin_PlaceHolder_ListItem_Custom_Members */
            /* End_PlaceHolder_ListItem_Custom_Members */
            /**
             *
             * Gets or sets the level of the item in the list.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ListItem_Level_get */
                /* End_PlaceHolder_ListItem_Level_get */
                _throwIfNotLoaded("level", this.m_level, "ListItem", this._isNull);
                return this.m_level;
            },
            set: function (value) {
                /* Begin_PlaceHolder_ListItem_Level_set */
                /* End_PlaceHolder_ListItem_Level_set */
                this.m_level = value;
                _createSetPropertyAction(this.context, this, "Level", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListItem.prototype, "listString", {
            /**
             *
             * Gets the list item bullet, number or picture as a string. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ListItem_ListString_get */
                /* End_PlaceHolder_ListItem_ListString_get */
                _throwIfNotLoaded("listString", this.m_listString, "ListItem", this._isNull);
                return this.m_listString;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListItem.prototype, "siblingIndex", {
            /**
             *
             * Gets the list item order number in relation to its siblings. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_ListItem_SiblingIndex_get */
                /* End_PlaceHolder_ListItem_SiblingIndex_get */
                _throwIfNotLoaded("siblingIndex", this.m_siblingIndex, "ListItem", this._isNull);
                return this.m_siblingIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListItem.prototype, "_ReferenceId", {
            get: function () {
                /* Begin_PlaceHolder_ListItem__ReferenceId_get */
                /* End_PlaceHolder_ListItem__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "ListItem", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the list item parent, or the closest ancestor if the parent does not exist.
         *
         * @param parentOnly Optional. Specified only the list item's parent will be returned. The default is false that specifies to get the lowest ancestor.
         *
         * [Api set: WordApi 1.3]
         */
        ListItem.prototype.getAncestor = function (parentOnly) {
            /* Begin_PlaceHolder_ListItem_GetAncestor */
            /* End_PlaceHolder_ListItem_GetAncestor */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "GetAncestor", 1 /* Read */, [parentOnly], false, false, null));
        };
        /**
         *
         * Gets all descendant list items of the list item.
         *
         * @param directChildrenOnly Optional. Specified only the list item's direct children will be returned. The default is false that indicates to get all descendant items.
         *
         * [Api set: WordApi 1.3]
         */
        ListItem.prototype.getDescendants = function (directChildrenOnly) {
            /* Begin_PlaceHolder_ListItem_GetDescendants */
            /* End_PlaceHolder_ListItem_GetDescendants */
            return new Word.ParagraphCollection(this.context, _createMethodObjectPath(this.context, this, "GetDescendants", 1 /* Read */, [directChildrenOnly], true, false, null));
        };
        ListItem.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_ListItem__KeepReference */
            /* End_PlaceHolder_ListItem__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        ListItem.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Level"])) {
                this.m_level = obj["Level"];
            }
            if (!_isUndefined(obj["ListString"])) {
                this.m_listString = obj["ListString"];
            }
            if (!_isUndefined(obj["SiblingIndex"])) {
                this.m_siblingIndex = obj["SiblingIndex"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        ListItem.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        ListItem.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        ListItem.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        ListItem.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        ListItem.prototype.toJSON = function () {
            return {
                "level": this.m_level,
                "listString": this.m_listString,
                "siblingIndex": this.m_siblingIndex
            };
        };
        return ListItem;
    })(OfficeExtension.ClientObject);
    Word.ListItem = ListItem;
    /**
     *
     * Represents a single paragraph in a selection, range, content control, or document body.
     *
     * [Api set: WordApi 1.1]
     */
    var Paragraph = (function (_super) {
        __extends(Paragraph, _super);
        function Paragraph() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Paragraph.prototype, "contentControls", {
            /* Begin_PlaceHolder_Paragraph_Custom_Members */
            /* End_PlaceHolder_Paragraph_Custom_Members */
            /**
             *
             * Gets the collection of content control objects in the paragraph. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_ContentControls_get */
                /* End_PlaceHolder_Paragraph_ContentControls_get */
                if (!this.m_contentControls) {
                    this.m_contentControls = new Word.ContentControlCollection(this.context, _createPropertyObjectPath(this.context, this, "ContentControls", true, false));
                }
                return this.m_contentControls;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "font", {
            /**
             *
             * Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_Font_get */
                /* End_PlaceHolder_Paragraph_Font_get */
                if (!this.m_font) {
                    this.m_font = new Word.Font(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false));
                }
                return this.m_font;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "inlinePictures", {
            /**
             *
             * Gets the collection of inlinePicture objects in the paragraph. The collection does not include floating images. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_InlinePictures_get */
                /* End_PlaceHolder_Paragraph_InlinePictures_get */
                if (!this.m_inlinePictures) {
                    this.m_inlinePictures = new Word.InlinePictureCollection(this.context, _createPropertyObjectPath(this.context, this, "InlinePictures", true, false));
                }
                return this.m_inlinePictures;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "list", {
            /**
             *
             * Gets the List to which this paragraph belongs. Returns a null object if the paragraph is not in a list. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_List_get */
                /* End_PlaceHolder_Paragraph_List_get */
                if (!this.m_list) {
                    this.m_list = new Word.List(this.context, _createPropertyObjectPath(this.context, this, "List", false, false));
                }
                return this.m_list;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "listItem", {
            /**
             *
             * Gets the ListItem for the paragraph. Returns a null object if the paragraph is not part of a list. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_ListItem_get */
                /* End_PlaceHolder_Paragraph_ListItem_get */
                if (!this.m_listItem) {
                    this.m_listItem = new Word.ListItem(this.context, _createPropertyObjectPath(this.context, this, "ListItem", false, false));
                }
                return this.m_listItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "parentBody", {
            /**
             *
             * Gets the parent body of the paragraph. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_ParentBody_get */
                /* End_PlaceHolder_Paragraph_ParentBody_get */
                if (!this.m_parentBody) {
                    this.m_parentBody = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "ParentBody", false, false));
                }
                return this.m_parentBody;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "parentContentControl", {
            /**
             *
             * Gets the content control that contains the paragraph. Returns a null object if there isn't a parent content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_ParentContentControl_get */
                /* End_PlaceHolder_Paragraph_ParentContentControl_get */
                if (!this.m_parentContentControl) {
                    this.m_parentContentControl = new Word.ContentControl(this.context, _createPropertyObjectPath(this.context, this, "ParentContentControl", false, false));
                }
                return this.m_parentContentControl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "parentTable", {
            /**
             *
             * Gets the table that contains the paragraph. Returns a null object if it is not contained in a table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_ParentTable_get */
                /* End_PlaceHolder_Paragraph_ParentTable_get */
                if (!this.m_parentTable) {
                    this.m_parentTable = new Word.Table(this.context, _createPropertyObjectPath(this.context, this, "ParentTable", false, false));
                }
                return this.m_parentTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "parentTableCell", {
            /**
             *
             * Gets the table cell that contains the paragraph. Returns a null object if it is not contained in a table cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_ParentTableCell_get */
                /* End_PlaceHolder_Paragraph_ParentTableCell_get */
                if (!this.m_parentTableCell) {
                    this.m_parentTableCell = new Word.TableCell(this.context, _createPropertyObjectPath(this.context, this, "ParentTableCell", false, false));
                }
                return this.m_parentTableCell;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "alignment", {
            /**
             *
             * Gets or sets the alignment for a paragraph. The value can be 'left', 'centered', 'right', or 'justified'.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_Alignment_get */
                /* End_PlaceHolder_Paragraph_Alignment_get */
                _throwIfNotLoaded("alignment", this.m_alignment, "Paragraph", this._isNull);
                return this.m_alignment;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_Alignment_set */
                /* End_PlaceHolder_Paragraph_Alignment_set */
                this.m_alignment = value;
                _createSetPropertyAction(this.context, this, "Alignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "firstLineIndent", {
            /**
             *
             * Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_FirstLineIndent_get */
                /* End_PlaceHolder_Paragraph_FirstLineIndent_get */
                _throwIfNotLoaded("firstLineIndent", this.m_firstLineIndent, "Paragraph", this._isNull);
                return this.m_firstLineIndent;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_FirstLineIndent_set */
                /* End_PlaceHolder_Paragraph_FirstLineIndent_set */
                this.m_firstLineIndent = value;
                _createSetPropertyAction(this.context, this, "FirstLineIndent", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "isLastParagraph", {
            /**
             *
             * Indicates the paragraph is the last one inside its parent body. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_IsLastParagraph_get */
                /* End_PlaceHolder_Paragraph_IsLastParagraph_get */
                _throwIfNotLoaded("isLastParagraph", this.m_isLastParagraph, "Paragraph", this._isNull);
                return this.m_isLastParagraph;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "isListItem", {
            /**
             *
             * Checks whether the paragraph is a list item. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_IsListItem_get */
                /* End_PlaceHolder_Paragraph_IsListItem_get */
                _throwIfNotLoaded("isListItem", this.m_isListItem, "Paragraph", this._isNull);
                return this.m_isListItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "leftIndent", {
            /**
             *
             * Gets or sets the left indent value, in points, for the paragraph.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_LeftIndent_get */
                /* End_PlaceHolder_Paragraph_LeftIndent_get */
                _throwIfNotLoaded("leftIndent", this.m_leftIndent, "Paragraph", this._isNull);
                return this.m_leftIndent;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_LeftIndent_set */
                /* End_PlaceHolder_Paragraph_LeftIndent_set */
                this.m_leftIndent = value;
                _createSetPropertyAction(this.context, this, "LeftIndent", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "lineSpacing", {
            /**
             *
             * Gets or sets the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_LineSpacing_get */
                /* End_PlaceHolder_Paragraph_LineSpacing_get */
                _throwIfNotLoaded("lineSpacing", this.m_lineSpacing, "Paragraph", this._isNull);
                return this.m_lineSpacing;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_LineSpacing_set */
                /* End_PlaceHolder_Paragraph_LineSpacing_set */
                this.m_lineSpacing = value;
                _createSetPropertyAction(this.context, this, "LineSpacing", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "lineUnitAfter", {
            /**
             *
             * Gets or sets the amount of spacing, in grid lines. after the paragraph.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_LineUnitAfter_get */
                /* End_PlaceHolder_Paragraph_LineUnitAfter_get */
                _throwIfNotLoaded("lineUnitAfter", this.m_lineUnitAfter, "Paragraph", this._isNull);
                return this.m_lineUnitAfter;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_LineUnitAfter_set */
                /* End_PlaceHolder_Paragraph_LineUnitAfter_set */
                this.m_lineUnitAfter = value;
                _createSetPropertyAction(this.context, this, "LineUnitAfter", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "lineUnitBefore", {
            /**
             *
             * Gets or sets the amount of spacing, in grid lines, before the paragraph.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_LineUnitBefore_get */
                /* End_PlaceHolder_Paragraph_LineUnitBefore_get */
                _throwIfNotLoaded("lineUnitBefore", this.m_lineUnitBefore, "Paragraph", this._isNull);
                return this.m_lineUnitBefore;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_LineUnitBefore_set */
                /* End_PlaceHolder_Paragraph_LineUnitBefore_set */
                this.m_lineUnitBefore = value;
                _createSetPropertyAction(this.context, this, "LineUnitBefore", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "outlineLevel", {
            /**
             *
             * Gets or sets the outline level for the paragraph.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_OutlineLevel_get */
                /* End_PlaceHolder_Paragraph_OutlineLevel_get */
                _throwIfNotLoaded("outlineLevel", this.m_outlineLevel, "Paragraph", this._isNull);
                return this.m_outlineLevel;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_OutlineLevel_set */
                /* End_PlaceHolder_Paragraph_OutlineLevel_set */
                this.m_outlineLevel = value;
                _createSetPropertyAction(this.context, this, "OutlineLevel", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "rightIndent", {
            /**
             *
             * Gets or sets the right indent value, in points, for the paragraph.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_RightIndent_get */
                /* End_PlaceHolder_Paragraph_RightIndent_get */
                _throwIfNotLoaded("rightIndent", this.m_rightIndent, "Paragraph", this._isNull);
                return this.m_rightIndent;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_RightIndent_set */
                /* End_PlaceHolder_Paragraph_RightIndent_set */
                this.m_rightIndent = value;
                _createSetPropertyAction(this.context, this, "RightIndent", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "spaceAfter", {
            /**
             *
             * Gets or sets the spacing, in points, after the paragraph.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_SpaceAfter_get */
                /* End_PlaceHolder_Paragraph_SpaceAfter_get */
                _throwIfNotLoaded("spaceAfter", this.m_spaceAfter, "Paragraph", this._isNull);
                return this.m_spaceAfter;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_SpaceAfter_set */
                /* End_PlaceHolder_Paragraph_SpaceAfter_set */
                this.m_spaceAfter = value;
                _createSetPropertyAction(this.context, this, "SpaceAfter", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "spaceBefore", {
            /**
             *
             * Gets or sets the spacing, in points, before the paragraph.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_SpaceBefore_get */
                /* End_PlaceHolder_Paragraph_SpaceBefore_get */
                _throwIfNotLoaded("spaceBefore", this.m_spaceBefore, "Paragraph", this._isNull);
                return this.m_spaceBefore;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_SpaceBefore_set */
                /* End_PlaceHolder_Paragraph_SpaceBefore_set */
                this.m_spaceBefore = value;
                _createSetPropertyAction(this.context, this, "SpaceBefore", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "style", {
            /**
             *
             * Gets or sets the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_Style_get */
                /* End_PlaceHolder_Paragraph_Style_get */
                _throwIfNotLoaded("style", this.m_style, "Paragraph", this._isNull);
                return this.m_style;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_Style_set */
                /* End_PlaceHolder_Paragraph_Style_set */
                this.m_style = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "styleBuiltIn", {
            /**
             *
             * Gets or sets the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_StyleBuiltIn_get */
                /* End_PlaceHolder_Paragraph_StyleBuiltIn_get */
                _throwIfNotLoaded("styleBuiltIn", this.m_styleBuiltIn, "Paragraph", this._isNull);
                return this.m_styleBuiltIn;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Paragraph_StyleBuiltIn_set */
                /* End_PlaceHolder_Paragraph_StyleBuiltIn_set */
                this.m_styleBuiltIn = value;
                _createSetPropertyAction(this.context, this, "StyleBuiltIn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "tableNestingLevel", {
            /**
             *
             * Gets the level of the paragraph's table. It returns 0 if the paragraph is not in a table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_TableNestingLevel_get */
                /* End_PlaceHolder_Paragraph_TableNestingLevel_get */
                _throwIfNotLoaded("tableNestingLevel", this.m_tableNestingLevel, "Paragraph", this._isNull);
                return this.m_tableNestingLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "text", {
            /**
             *
             * Gets the text of the paragraph. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph_Text_get */
                /* End_PlaceHolder_Paragraph_Text_get */
                _throwIfNotLoaded("text", this.m_text, "Paragraph", this._isNull);
                return this.m_text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "_Id", {
            /**
             *
             * ID
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph__Id_get */
                /* End_PlaceHolder_Paragraph__Id_get */
                _throwIfNotLoaded("_Id", this.m__Id, "Paragraph", this._isNull);
                return this.m__Id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Paragraph__ReferenceId_get */
                /* End_PlaceHolder_Paragraph__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Paragraph", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Lets the paragraph join an existing list at the specified level. Fails if the paragraph cannot join the list or if the paragraph is already a list item.
         *
         * @param listId Required. The ID of an existing list.
         * @param level Required. The level in the list.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.attachToList = function (listId, level) {
            /* Begin_PlaceHolder_Paragraph_AttachToList */
            /* End_PlaceHolder_Paragraph_AttachToList */
            return new Word.List(this.context, _createMethodObjectPath(this.context, this, "AttachToList", 0 /* Default */, [listId, level], false, false, null));
        };
        /**
         *
         * Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.clear = function () {
            /* Begin_PlaceHolder_Paragraph_Clear */
            /* End_PlaceHolder_Paragraph_Clear */
            _createMethodAction(this.context, this, "Clear", 0 /* Default */, []);
        };
        /**
         *
         * Deletes the paragraph and its content from the document.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.delete = function () {
            /* Begin_PlaceHolder_Paragraph_Delete */
            /* End_PlaceHolder_Paragraph_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, []);
        };
        /**
         *
         * Moves this paragraph out of its list, if the paragraph is a list item.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.detachFromList = function () {
            /* Begin_PlaceHolder_Paragraph_DetachFromList */
            /* End_PlaceHolder_Paragraph_DetachFromList */
            _createMethodAction(this.context, this, "DetachFromList", 0 /* Default */, []);
        };
        /**
         *
         * Gets the HTML representation of the paragraph object.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.getHtml = function () {
            /* Begin_PlaceHolder_Paragraph_GetHtml */
            /* End_PlaceHolder_Paragraph_GetHtml */
            var action = _createMethodAction(this.context, this, "GetHtml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the next paragraph.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.getNext = function () {
            /* Begin_PlaceHolder_Paragraph_GetNext */
            /* End_PlaceHolder_Paragraph_GetNext */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "GetNext", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets the Office Open XML (OOXML) representation of the paragraph object.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.getOoxml = function () {
            /* Begin_PlaceHolder_Paragraph_GetOoxml */
            /* End_PlaceHolder_Paragraph_GetOoxml */
            var action = _createMethodAction(this.context, this, "GetOoxml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the previous paragraph.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.getPrevious = function () {
            /* Begin_PlaceHolder_Paragraph_GetPrevious */
            /* End_PlaceHolder_Paragraph_GetPrevious */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "GetPrevious", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.
         *
         * @param rangeLocation Optional. The range location can be 'Whole', 'Start', 'End', 'After' or 'Content'.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.getRange = function (rangeLocation) {
            /* Begin_PlaceHolder_Paragraph_GetRange */
            /* End_PlaceHolder_Paragraph_GetRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1 /* Read */, [rangeLocation], false, false, null));
        };
        /**
         *
         * Gets the text ranges in the paragraph by using punctuation marks and/or other ending marks.
         *
         * @param endingMarks Required. The punctuation marks and/or other ending marks as an array of strings.
         * @param trimSpacing Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.getTextRanges = function (endingMarks, trimSpacing) {
            /* Begin_PlaceHolder_Paragraph_GetTextRanges */
            /* End_PlaceHolder_Paragraph_GetTextRanges */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "GetTextRanges", 1 /* Read */, [endingMarks, trimSpacing], true, false, null));
        };
        /**
         *
         * Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or 'After'.
         *
         * @param breakType Required. The break type to add to the document.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertBreak = function (breakType, insertLocation) {
            /* Begin_PlaceHolder_Paragraph_InsertBreak */
            /* End_PlaceHolder_Paragraph_InsertBreak */
            _createMethodAction(this.context, this, "InsertBreak", 0 /* Default */, [breakType, insertLocation]);
        };
        /**
         *
         * Wraps the paragraph object with a rich text content control.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertContentControl = function () {
            /* Begin_PlaceHolder_Paragraph_InsertContentControl */
            /* End_PlaceHolder_Paragraph_InsertContentControl */
            return new Word.ContentControl(this.context, _createMethodObjectPath(this.context, this, "InsertContentControl", 0 /* Default */, [], false, true, null));
        };
        /**
         *
         * Inserts a document into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param base64File Required. The base64 encoded content of a .docx file.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertFileFromBase64 = function (base64File, insertLocation) {
            /* Begin_PlaceHolder_Paragraph_InsertFileFromBase64 */
            /* End_PlaceHolder_Paragraph_InsertFileFromBase64 */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertFileFromBase64", 0 /* Default */, [base64File, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts HTML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param html Required. The HTML to be inserted in the paragraph.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertHtml = function (html, insertLocation) {
            /* Begin_PlaceHolder_Paragraph_InsertHtml */
            /* End_PlaceHolder_Paragraph_InsertHtml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertHtml", 0 /* Default */, [html, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a picture into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param base64EncodedImage Required. The base64 encoded image to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertInlinePictureFromBase64 = function (base64EncodedImage, insertLocation) {
            /* Begin_PlaceHolder_Paragraph_InsertInlinePictureFromBase64 */
            /* End_PlaceHolder_Paragraph_InsertInlinePictureFromBase64 */
            return new Word.InlinePicture(this.context, _createMethodObjectPath(this.context, this, "InsertInlinePictureFromBase64", 0 /* Default */, [base64EncodedImage, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts OOXML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param ooxml Required. The OOXML to be inserted in the paragraph.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertOoxml = function (ooxml, insertLocation) {
            /* Begin_PlaceHolder_Paragraph_InsertOoxml */
            /* End_PlaceHolder_Paragraph_InsertOoxml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertOoxml", 0 /* Default */, [ooxml, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.
         *
         * @param paragraphText Required. The paragraph text to be inserted.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertParagraph = function (paragraphText, insertLocation) {
            /* Begin_PlaceHolder_Paragraph_InsertParagraph */
            /* End_PlaceHolder_Paragraph_InsertParagraph */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "InsertParagraph", 0 /* Default */, [paragraphText, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or 'After'.
         *
         * @param rowCount Required. The number of rows in the table.
         * @param columnCount Required. The number of columns in the table.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.insertTable = function (rowCount, columnCount, insertLocation, values) {
            /* Begin_PlaceHolder_Paragraph_InsertTable */
            /* End_PlaceHolder_Paragraph_InsertTable */
            return new Word.Table(this.context, _createMethodObjectPath(this.context, this, "InsertTable", 0 /* Default */, [rowCount, columnCount, insertLocation, values], false, true, null));
        };
        /**
         *
         * Inserts text into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.
         *
         * @param text Required. Text to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start' or 'End'.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.insertText = function (text, insertLocation) {
            /* Begin_PlaceHolder_Paragraph_InsertText */
            /* End_PlaceHolder_Paragraph_InsertText */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertText", 0 /* Default */, [text, insertLocation], false, true, null));
        };
        /**
         *
         * Performs a search with the specified searchOptions on the scope of the paragraph object. The search results are a collection of range objects.
         *
         * @param searchText Required. The search text.
         * @param searchOptions Optional. Options for the search.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.search = function (searchText, searchOptions) {
            /* Begin_PlaceHolder_Paragraph_Search */
            searchOptions = _normalizeSearchOptions(this.context, searchOptions);
            /* End_PlaceHolder_Paragraph_Search */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Search", 1 /* Read */, [searchText, searchOptions], true, true, null));
        };
        /**
         *
         * Selects and navigates the Word UI to the paragraph.
         *
         * @param selectionMode Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.
         *
         * [Api set: WordApi 1.1]
         */
        Paragraph.prototype.select = function (selectionMode) {
            /* Begin_PlaceHolder_Paragraph_Select */
            /* End_PlaceHolder_Paragraph_Select */
            _createMethodAction(this.context, this, "Select", 1 /* Read */, [selectionMode]);
        };
        /**
         *
         * Splits the paragraph into child ranges by using delimiters.
         *
         * @param delimiters Required. The delimiters as an array of strings.
         * @param trimDelimiters Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false which indicates that the delimiters are included in the ranges returned in the range collection.
         * @param trimSpacing Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.split = function (delimiters, trimDelimiters, trimSpacing) {
            /* Begin_PlaceHolder_Paragraph_Split */
            /* End_PlaceHolder_Paragraph_Split */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Split", 1 /* Read */, [delimiters, trimDelimiters, trimSpacing], true, false, null));
        };
        /**
         *
         * Starts a new list with this paragraph. Fails if the paragraph is already a list item.
         *
         * [Api set: WordApi 1.3]
         */
        Paragraph.prototype.startNewList = function () {
            /* Begin_PlaceHolder_Paragraph_StartNewList */
            /* End_PlaceHolder_Paragraph_StartNewList */
            return new Word.List(this.context, _createMethodObjectPath(this.context, this, "StartNewList", 0 /* Default */, [], false, false, null));
        };
        Paragraph.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Paragraph__KeepReference */
            /* End_PlaceHolder_Paragraph__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        Paragraph.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Alignment"])) {
                this.m_alignment = obj["Alignment"];
            }
            if (!_isUndefined(obj["FirstLineIndent"])) {
                this.m_firstLineIndent = obj["FirstLineIndent"];
            }
            if (!_isUndefined(obj["IsLastParagraph"])) {
                this.m_isLastParagraph = obj["IsLastParagraph"];
            }
            if (!_isUndefined(obj["IsListItem"])) {
                this.m_isListItem = obj["IsListItem"];
            }
            if (!_isUndefined(obj["LeftIndent"])) {
                this.m_leftIndent = obj["LeftIndent"];
            }
            if (!_isUndefined(obj["LineSpacing"])) {
                this.m_lineSpacing = obj["LineSpacing"];
            }
            if (!_isUndefined(obj["LineUnitAfter"])) {
                this.m_lineUnitAfter = obj["LineUnitAfter"];
            }
            if (!_isUndefined(obj["LineUnitBefore"])) {
                this.m_lineUnitBefore = obj["LineUnitBefore"];
            }
            if (!_isUndefined(obj["OutlineLevel"])) {
                this.m_outlineLevel = obj["OutlineLevel"];
            }
            if (!_isUndefined(obj["RightIndent"])) {
                this.m_rightIndent = obj["RightIndent"];
            }
            if (!_isUndefined(obj["SpaceAfter"])) {
                this.m_spaceAfter = obj["SpaceAfter"];
            }
            if (!_isUndefined(obj["SpaceBefore"])) {
                this.m_spaceBefore = obj["SpaceBefore"];
            }
            if (!_isUndefined(obj["Style"])) {
                this.m_style = obj["Style"];
            }
            if (!_isUndefined(obj["StyleBuiltIn"])) {
                this.m_styleBuiltIn = obj["StyleBuiltIn"];
            }
            if (!_isUndefined(obj["TableNestingLevel"])) {
                this.m_tableNestingLevel = obj["TableNestingLevel"];
            }
            if (!_isUndefined(obj["Text"])) {
                this.m_text = obj["Text"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.m__Id = obj["_Id"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["contentControls", "ContentControls", "font", "Font", "inlinePictures", "InlinePictures", "list", "List", "listItem", "ListItem", "parentBody", "ParentBody", "parentContentControl", "ParentContentControl", "parentTable", "ParentTable", "parentTableCell", "ParentTableCell"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Paragraph.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Paragraph.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["_Id"])) {
                this.m__Id = value["_Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Paragraph.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Paragraph.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Paragraph.prototype.toJSON = function () {
            return {
                "alignment": this.m_alignment,
                "firstLineIndent": this.m_firstLineIndent,
                "font": this.m_font,
                "isLastParagraph": this.m_isLastParagraph,
                "isListItem": this.m_isListItem,
                "leftIndent": this.m_leftIndent,
                "lineSpacing": this.m_lineSpacing,
                "lineUnitAfter": this.m_lineUnitAfter,
                "lineUnitBefore": this.m_lineUnitBefore,
                "listItem": this.m_listItem,
                "outlineLevel": this.m_outlineLevel,
                "rightIndent": this.m_rightIndent,
                "spaceAfter": this.m_spaceAfter,
                "spaceBefore": this.m_spaceBefore,
                "style": this.m_style,
                "styleBuiltIn": this.m_styleBuiltIn,
                "tableNestingLevel": this.m_tableNestingLevel,
                "text": this.m_text
            };
        };
        return Paragraph;
    })(OfficeExtension.ClientObject);
    Word.Paragraph = Paragraph;
    /**
     *
     * Contains a collection of [paragraph](paragraph.md) objects.
     *
     * [Api set: WordApi 1.1]
     */
    var ParagraphCollection = (function (_super) {
        __extends(ParagraphCollection, _super);
        function ParagraphCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ParagraphCollection.prototype, "items", {
            /* Begin_PlaceHolder_ParagraphCollection_Custom_Members */
            /* End_PlaceHolder_ParagraphCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_ParagraphCollection_items */
                /* End_PlaceHolder_ParagraphCollection_items */
                _throwIfNotLoaded("items", this.m__items, "ParagraphCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParagraphCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_ParagraphCollection__ReferenceId_get */
                /* End_PlaceHolder_ParagraphCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "ParagraphCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the first paragraph in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        ParagraphCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_ParagraphCollection_GetFirst */
            /* End_PlaceHolder_ParagraphCollection_GetFirst */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets the last paragraph in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        ParagraphCollection.prototype.getLast = function () {
            /* Begin_PlaceHolder_ParagraphCollection_GetLast */
            /* End_PlaceHolder_ParagraphCollection_GetLast */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "GetLast", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a paragraph object by its index in the collection.
         *
         * @param index A number that identifies the index location of a paragraph object.
         *
         * [Api set: WordApi 1.1]
         */
        ParagraphCollection.prototype._GetItem = function (index) {
            /* Begin_PlaceHolder_ParagraphCollection__GetItem */
            /* End_PlaceHolder_ParagraphCollection__GetItem */
            return new Word.Paragraph(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        ParagraphCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_ParagraphCollection__KeepReference */
            /* End_PlaceHolder_ParagraphCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        ParagraphCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.Paragraph(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        ParagraphCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        ParagraphCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        ParagraphCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        ParagraphCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        ParagraphCollection.prototype.toJSON = function () {
            return {};
        };
        return ParagraphCollection;
    })(OfficeExtension.ClientObject);
    Word.ParagraphCollection = ParagraphCollection;
    /**
     *
     * Represents a contiguous area in a document.
     *
     * [Api set: WordApi 1.1]
     */
    var Range = (function (_super) {
        __extends(Range, _super);
        function Range() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Range.prototype, "contentControls", {
            /* Begin_PlaceHolder_Range_Custom_Members */
            /* End_PlaceHolder_Range_Custom_Members */
            /**
             *
             * Gets the collection of content control objects in the range. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_ContentControls_get */
                /* End_PlaceHolder_Range_ContentControls_get */
                if (!this.m_contentControls) {
                    this.m_contentControls = new Word.ContentControlCollection(this.context, _createPropertyObjectPath(this.context, this, "ContentControls", true, false));
                }
                return this.m_contentControls;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "font", {
            /**
             *
             * Gets the text format of the range. Use this to get and set font name, size, color, and other properties. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_Font_get */
                /* End_PlaceHolder_Range_Font_get */
                if (!this.m_font) {
                    this.m_font = new Word.Font(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false));
                }
                return this.m_font;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "inlinePictures", {
            /**
             *
             * Gets the collection of inline picture objects in the range. Read-only.
             *
             * [Api set: WordApi 1.2]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_InlinePictures_get */
                /* End_PlaceHolder_Range_InlinePictures_get */
                if (!this.m_inlinePictures) {
                    this.m_inlinePictures = new Word.InlinePictureCollection(this.context, _createPropertyObjectPath(this.context, this, "InlinePictures", true, false));
                }
                return this.m_inlinePictures;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "lists", {
            /**
             *
             * Gets the collection of list objects in the range. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_Lists_get */
                /* End_PlaceHolder_Range_Lists_get */
                if (!this.m_lists) {
                    this.m_lists = new Word.ListCollection(this.context, _createPropertyObjectPath(this.context, this, "Lists", true, false));
                }
                return this.m_lists;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "paragraphs", {
            /**
             *
             * Gets the collection of paragraph objects in the range. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_Paragraphs_get */
                /* End_PlaceHolder_Range_Paragraphs_get */
                if (!this.m_paragraphs) {
                    this.m_paragraphs = new Word.ParagraphCollection(this.context, _createPropertyObjectPath(this.context, this, "Paragraphs", true, false));
                }
                return this.m_paragraphs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "parentBody", {
            /**
             *
             * Gets the parent body of the range. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_ParentBody_get */
                /* End_PlaceHolder_Range_ParentBody_get */
                if (!this.m_parentBody) {
                    this.m_parentBody = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "ParentBody", false, false));
                }
                return this.m_parentBody;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "parentContentControl", {
            /**
             *
             * Gets the content control that contains the range. Returns a null object if there isn't a parent content control. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_ParentContentControl_get */
                /* End_PlaceHolder_Range_ParentContentControl_get */
                if (!this.m_parentContentControl) {
                    this.m_parentContentControl = new Word.ContentControl(this.context, _createPropertyObjectPath(this.context, this, "ParentContentControl", false, false));
                }
                return this.m_parentContentControl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "parentTable", {
            /**
             *
             * Gets the table that contains the range. Returns null if it is not contained in a table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_ParentTable_get */
                /* End_PlaceHolder_Range_ParentTable_get */
                if (!this.m_parentTable) {
                    this.m_parentTable = new Word.Table(this.context, _createPropertyObjectPath(this.context, this, "ParentTable", false, false));
                }
                return this.m_parentTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "parentTableCell", {
            /**
             *
             * Gets the table cell that contains the range. Returns a null object if it is not contained in a table cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_ParentTableCell_get */
                /* End_PlaceHolder_Range_ParentTableCell_get */
                if (!this.m_parentTableCell) {
                    this.m_parentTableCell = new Word.TableCell(this.context, _createPropertyObjectPath(this.context, this, "ParentTableCell", false, false));
                }
                return this.m_parentTableCell;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "tables", {
            /**
             *
             * Gets the collection of table objects in the range. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_Tables_get */
                /* End_PlaceHolder_Range_Tables_get */
                if (!this.m_tables) {
                    this.m_tables = new Word.TableCollection(this.context, _createPropertyObjectPath(this.context, this, "Tables", true, false));
                }
                return this.m_tables;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "hyperlink", {
            /**
             *
             * Gets the first hyperlink in the range, or sets a hyperlink on the range. All hyperlinks in the range are deleted when you set a new hyperlink on the range. Use a newline character ('\n') to separate the address part from the optional location part.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_Hyperlink_get */
                /* End_PlaceHolder_Range_Hyperlink_get */
                _throwIfNotLoaded("hyperlink", this.m_hyperlink, "Range", this._isNull);
                return this.m_hyperlink;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Range_Hyperlink_set */
                /* End_PlaceHolder_Range_Hyperlink_set */
                this.m_hyperlink = value;
                _createSetPropertyAction(this.context, this, "Hyperlink", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "isEmpty", {
            /**
             *
             * Checks whether the range length is zero. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_IsEmpty_get */
                /* End_PlaceHolder_Range_IsEmpty_get */
                _throwIfNotLoaded("isEmpty", this.m_isEmpty, "Range", this._isNull);
                return this.m_isEmpty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "style", {
            /**
             *
             * Gets or sets the style name for the range. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_Style_get */
                /* End_PlaceHolder_Range_Style_get */
                _throwIfNotLoaded("style", this.m_style, "Range", this._isNull);
                return this.m_style;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Range_Style_set */
                /* End_PlaceHolder_Range_Style_set */
                this.m_style = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "styleBuiltIn", {
            /**
             *
             * Gets or sets the built-in style name for the range. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_StyleBuiltIn_get */
                /* End_PlaceHolder_Range_StyleBuiltIn_get */
                _throwIfNotLoaded("styleBuiltIn", this.m_styleBuiltIn, "Range", this._isNull);
                return this.m_styleBuiltIn;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Range_StyleBuiltIn_set */
                /* End_PlaceHolder_Range_StyleBuiltIn_set */
                this.m_styleBuiltIn = value;
                _createSetPropertyAction(this.context, this, "StyleBuiltIn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "text", {
            /**
             *
             * Gets the text of the range. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Range_Text_get */
                /* End_PlaceHolder_Range_Text_get */
                _throwIfNotLoaded("text", this.m_text, "Range", this._isNull);
                return this.m_text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "_Id", {
            /**
             *
             * ID
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Range__Id_get */
                /* End_PlaceHolder_Range__Id_get */
                _throwIfNotLoaded("_Id", this.m__Id, "Range", this._isNull);
                return this.m__Id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Range__ReferenceId_get */
                /* End_PlaceHolder_Range__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Range", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Clears the contents of the range object. The user can perform the undo operation on the cleared content.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.clear = function () {
            /* Begin_PlaceHolder_Range_Clear */
            /* End_PlaceHolder_Range_Clear */
            _createMethodAction(this.context, this, "Clear", 0 /* Default */, []);
        };
        /**
         *
         * Compares this range's location with another range's location.
         *
         * @param range Required. The range to compare with this range.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.compareLocationWith = function (range) {
            /* Begin_PlaceHolder_Range_CompareLocationWith */
            /* End_PlaceHolder_Range_CompareLocationWith */
            var action = _createMethodAction(this.context, this, "CompareLocationWith", 1 /* Read */, [range]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Deletes the range and its content from the document.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.delete = function () {
            /* Begin_PlaceHolder_Range_Delete */
            /* End_PlaceHolder_Range_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, []);
        };
        /**
         *
         * Returns a new range that extends from this range in either direction to cover another range. This range is not changed.
         *
         * @param range Required. Another range.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.expandTo = function (range) {
            /* Begin_PlaceHolder_Range_ExpandTo */
            /* End_PlaceHolder_Range_ExpandTo */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "ExpandTo", 0 /* Default */, [range], false, false, null));
        };
        /**
         *
         * Gets the names all bookmarks in or overlapping the range. A bookmark is hidden if its name starts with an underscore character.
         *
         * @param includeHidden Optional. Indicates whether to include hidden bookmarks. Default is false which indicates that the hidden bookmarks are excluded.
         * @param includeAdjacent Optional. Indicates whether to include bookmarks that are adjacent to the range. Default is false which indicates that the adjacent bookmarks are excluded.
         *
         * [Api set: WordApi 1.4]
         */
        Range.prototype.getBookmarks = function (includeHidden, includeAdjacent) {
            /* Begin_PlaceHolder_Range_GetBookmarks */
            /* End_PlaceHolder_Range_GetBookmarks */
            var action = _createMethodAction(this.context, this, "GetBookmarks", 1 /* Read */, [includeHidden, includeAdjacent]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the HTML representation of the range object.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.getHtml = function () {
            /* Begin_PlaceHolder_Range_GetHtml */
            /* End_PlaceHolder_Range_GetHtml */
            var action = _createMethodAction(this.context, this, "GetHtml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets hyperlink child ranges within the range.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.getHyperlinkRanges = function () {
            /* Begin_PlaceHolder_Range_GetHyperlinkRanges */
            /* End_PlaceHolder_Range_GetHyperlinkRanges */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "GetHyperlinkRanges", 1 /* Read */, [], true, false, null));
        };
        /**
         *
         * Gets the next text range by using punctuation marks and/or other ending marks.
         *
         * @param endingMarks Required. The punctuation marks and/or other ending marks as an array of strings.
         * @param trimSpacing Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the returned range. Default is false which indicates that spacing characters at the start and end of the range are included.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.getNextTextRange = function (endingMarks, trimSpacing) {
            /* Begin_PlaceHolder_Range_GetNextTextRange */
            /* End_PlaceHolder_Range_GetNextTextRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetNextTextRange", 1 /* Read */, [endingMarks, trimSpacing], false, false, null));
        };
        /**
         *
         * Gets the OOXML representation of the range object.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.getOoxml = function () {
            /* Begin_PlaceHolder_Range_GetOoxml */
            /* End_PlaceHolder_Range_GetOoxml */
            var action = _createMethodAction(this.context, this, "GetOoxml", 1 /* Read */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Clones the range, or gets the starting or ending point of the range as a new range.
         *
         * @param rangeLocation Optional. The range location can be 'Whole', 'Start', 'End', 'After' or 'Content'.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.getRange = function (rangeLocation) {
            /* Begin_PlaceHolder_Range_GetRange */
            /* End_PlaceHolder_Range_GetRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1 /* Read */, [rangeLocation], false, false, null));
        };
        /**
         *
         * Gets the text child ranges in the range by using punctuation marks and/or other ending marks.
         *
         * @param endingMarks Required. The punctuation marks and/or other ending marks as an array of strings.
         * @param trimSpacing Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.getTextRanges = function (endingMarks, trimSpacing) {
            /* Begin_PlaceHolder_Range_GetTextRanges */
            /* End_PlaceHolder_Range_GetTextRanges */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "GetTextRanges", 1 /* Read */, [endingMarks, trimSpacing], true, false, null));
        };
        /**
         *
         * Inserts a bookmark on the range. If a bookmark of the same name exists, it is replaced.
         *
         * @param name Required. The bookmark name, which is case-insensitive. If the name starts with an underscore character, the bookmark is an hidden one.
         *
         * [Api set: WordApi 1.4]
         */
        Range.prototype.insertBookmark = function (name) {
            /* Begin_PlaceHolder_Range_InsertBookmark */
            /* End_PlaceHolder_Range_InsertBookmark */
            _createMethodAction(this.context, this, "InsertBookmark", 0 /* Default */, [name]);
        };
        /**
         *
         * Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or 'After'.
         *
         * @param breakType Required. The break type to add.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.insertBreak = function (breakType, insertLocation) {
            /* Begin_PlaceHolder_Range_InsertBreak */
            /* End_PlaceHolder_Range_InsertBreak */
            _createMethodAction(this.context, this, "InsertBreak", 0 /* Default */, [breakType, insertLocation]);
        };
        /**
         *
         * Wraps the range object with a rich text content control.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.insertContentControl = function () {
            /* Begin_PlaceHolder_Range_InsertContentControl */
            /* End_PlaceHolder_Range_InsertContentControl */
            return new Word.ContentControl(this.context, _createMethodObjectPath(this.context, this, "InsertContentControl", 0 /* Default */, [], false, true, null));
        };
        /**
         *
         * Inserts a document at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * @param base64File Required. The base64 encoded content of a .docx file.
         * @param insertLocation Required. The value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.insertFileFromBase64 = function (base64File, insertLocation) {
            /* Begin_PlaceHolder_Range_InsertFileFromBase64 */
            /* End_PlaceHolder_Range_InsertFileFromBase64 */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertFileFromBase64", 0 /* Default */, [base64File, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts HTML at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * @param html Required. The HTML to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.insertHtml = function (html, insertLocation) {
            /* Begin_PlaceHolder_Range_InsertHtml */
            /* End_PlaceHolder_Range_InsertHtml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertHtml", 0 /* Default */, [html, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a picture at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * @param base64EncodedImage Required. The base64 encoded image to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.2]
         */
        Range.prototype.insertInlinePictureFromBase64 = function (base64EncodedImage, insertLocation) {
            /* Begin_PlaceHolder_Range_InsertInlinePictureFromBase64 */
            /* End_PlaceHolder_Range_InsertInlinePictureFromBase64 */
            return new Word.InlinePicture(this.context, _createMethodObjectPath(this.context, this, "InsertInlinePictureFromBase64", 0 /* Default */, [base64EncodedImage, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts OOXML at the specified location.  The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * @param ooxml Required. The OOXML to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.insertOoxml = function (ooxml, insertLocation) {
            /* Begin_PlaceHolder_Range_InsertOoxml */
            /* End_PlaceHolder_Range_InsertOoxml */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertOoxml", 0 /* Default */, [ooxml, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.
         *
         * @param paragraphText Required. The paragraph text to be inserted.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.insertParagraph = function (paragraphText, insertLocation) {
            /* Begin_PlaceHolder_Range_InsertParagraph */
            /* End_PlaceHolder_Range_InsertParagraph */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "InsertParagraph", 0 /* Default */, [paragraphText, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or 'After'.
         *
         * @param rowCount Required. The number of rows in the table.
         * @param columnCount Required. The number of columns in the table.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.insertTable = function (rowCount, columnCount, insertLocation, values) {
            /* Begin_PlaceHolder_Range_InsertTable */
            /* End_PlaceHolder_Range_InsertTable */
            return new Word.Table(this.context, _createMethodObjectPath(this.context, this, "InsertTable", 0 /* Default */, [rowCount, columnCount, insertLocation, values], false, true, null));
        };
        /**
         *
         * Inserts text at the specified location. The insertLocation value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * @param text Required. Text to be inserted.
         * @param insertLocation Required. The value can be 'Replace', 'Start', 'End', 'Before' or 'After'.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.insertText = function (text, insertLocation) {
            /* Begin_PlaceHolder_Range_InsertText */
            /* End_PlaceHolder_Range_InsertText */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "InsertText", 0 /* Default */, [text, insertLocation], false, true, null));
        };
        /**
         *
         * Returns a new range as the intersection of this range with another range. This range is not changed.
         *
         * @param range Required. Another range.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.intersectWith = function (range) {
            /* Begin_PlaceHolder_Range_IntersectWith */
            /* End_PlaceHolder_Range_IntersectWith */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "IntersectWith", 0 /* Default */, [range], false, false, null));
        };
        /**
         *
         * Performs a search with the specified searchOptions on the scope of the range object. The search results are a collection of range objects.
         *
         * @param searchText Required. The search text.
         * @param searchOptions Optional. Options for the search.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.search = function (searchText, searchOptions) {
            /* Begin_PlaceHolder_Range_Search */
            searchOptions = _normalizeSearchOptions(this.context, searchOptions);
            /* End_PlaceHolder_Range_Search */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Search", 1 /* Read */, [searchText, searchOptions], true, true, null));
        };
        /**
         *
         * Selects and navigates the Word UI to the range.
         *
         * @param selectionMode Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.
         *
         * [Api set: WordApi 1.1]
         */
        Range.prototype.select = function (selectionMode) {
            /* Begin_PlaceHolder_Range_Select */
            /* End_PlaceHolder_Range_Select */
            _createMethodAction(this.context, this, "Select", 1 /* Read */, [selectionMode]);
        };
        /**
         *
         * Splits the range into child ranges by using delimiters.
         *
         * @param delimiters Required. The delimiters as an array of strings.
         * @param multiParagraphs Optional. Indicates whether a returned child range can cover multiple paragraphs. Default is false which indicates that the paragraph boundaries are also used as delimiters.
         * @param trimDelimiters Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false which indicates that the delimiters are included in the ranges returned in the range collection.
         * @param trimSpacing Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.
         *
         * [Api set: WordApi 1.3]
         */
        Range.prototype.split = function (delimiters, multiParagraphs, trimDelimiters, trimSpacing) {
            /* Begin_PlaceHolder_Range_Split */
            /* End_PlaceHolder_Range_Split */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Split", 1 /* Read */, [delimiters, multiParagraphs, trimDelimiters, trimSpacing], true, false, null));
        };
        Range.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Range__KeepReference */
            /* End_PlaceHolder_Range__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        Range.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Hyperlink"])) {
                this.m_hyperlink = obj["Hyperlink"];
            }
            if (!_isUndefined(obj["IsEmpty"])) {
                this.m_isEmpty = obj["IsEmpty"];
            }
            if (!_isUndefined(obj["Style"])) {
                this.m_style = obj["Style"];
            }
            if (!_isUndefined(obj["StyleBuiltIn"])) {
                this.m_styleBuiltIn = obj["StyleBuiltIn"];
            }
            if (!_isUndefined(obj["Text"])) {
                this.m_text = obj["Text"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.m__Id = obj["_Id"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["contentControls", "ContentControls", "font", "Font", "inlinePictures", "InlinePictures", "lists", "Lists", "paragraphs", "Paragraphs", "parentBody", "ParentBody", "parentContentControl", "ParentContentControl", "parentTable", "ParentTable", "parentTableCell", "ParentTableCell", "tables", "Tables"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Range.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Range.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["_Id"])) {
                this.m__Id = value["_Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Range.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Range.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Range.prototype.toJSON = function () {
            return {
                "font": this.m_font,
                "hyperlink": this.m_hyperlink,
                "isEmpty": this.m_isEmpty,
                "style": this.m_style,
                "styleBuiltIn": this.m_styleBuiltIn,
                "text": this.m_text
            };
        };
        return Range;
    })(OfficeExtension.ClientObject);
    Word.Range = Range;
    /**
     *
     * Contains a collection of [range](range.md) objects.
     *
     * [Api set: WordApi 1.3]
     */
    var RangeCollection = (function (_super) {
        __extends(RangeCollection, _super);
        function RangeCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(RangeCollection.prototype, "items", {
            /* Begin_PlaceHolder_RangeCollection_Custom_Members */
            /* End_PlaceHolder_RangeCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_RangeCollection_items */
                /* End_PlaceHolder_RangeCollection_items */
                _throwIfNotLoaded("items", this.m__items, "RangeCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_RangeCollection__ReferenceId_get */
                /* End_PlaceHolder_RangeCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "RangeCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the first range in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        RangeCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_RangeCollection_GetFirst */
            /* End_PlaceHolder_RangeCollection_GetFirst */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a range object by its index in the collection.
         *
         * @param index A number that identifies the index location of a range object.
         *
         * [Api set: WordApi 1.3]
         */
        RangeCollection.prototype._GetItem = function (index) {
            /* Begin_PlaceHolder_RangeCollection__GetItem */
            /* End_PlaceHolder_RangeCollection__GetItem */
            return new Word.Range(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        RangeCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_RangeCollection__KeepReference */
            /* End_PlaceHolder_RangeCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        RangeCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.Range(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        RangeCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        RangeCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        RangeCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        RangeCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        RangeCollection.prototype.toJSON = function () {
            return {};
        };
        return RangeCollection;
    })(OfficeExtension.ClientObject);
    Word.RangeCollection = RangeCollection;
    /**
     *
     * Specifies the options to be included in a search operation.
     *
     * [Api set: WordApi 1.1]
     */
    var SearchOptions = (function (_super) {
        __extends(SearchOptions, _super);
        function SearchOptions() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(SearchOptions.prototype, "matchWildCards", {
            /* Begin_PlaceHolder_SearchOptions_Custom_Members */
            // "matchWildCards" with uppercase 'C' is grandfathered since it's released in O16 RTM (OM Bug# 2613775)
            // This is JScript layer redirecting "matchWildCards" to "matchWildcards".
            get: function () {
                _throwIfNotLoaded("matchWildCards", this.m_matchWildcards);
                return this.m_matchWildcards;
            },
            set: function (value) {
                this.m_matchWildcards = value;
                _createSetPropertyAction(this.context, this, "MatchWildCards", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchOptions.prototype, "ignorePunct", {
            /* End_PlaceHolder_SearchOptions_Custom_Members */
            /**
             *
             * Gets or sets a value that indicates whether to ignore all punctuation characters between words. Corresponds to the Ignore punctuation check box in the Find and Replace dialog box.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_SearchOptions_IgnorePunct_get */
                /* End_PlaceHolder_SearchOptions_IgnorePunct_get */
                _throwIfNotLoaded("ignorePunct", this.m_ignorePunct, "SearchOptions", this._isNull);
                return this.m_ignorePunct;
            },
            set: function (value) {
                /* Begin_PlaceHolder_SearchOptions_IgnorePunct_set */
                /* End_PlaceHolder_SearchOptions_IgnorePunct_set */
                this.m_ignorePunct = value;
                _createSetPropertyAction(this.context, this, "IgnorePunct", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchOptions.prototype, "ignoreSpace", {
            /**
             *
             * Gets or sets a value that indicates whether to ignore all whitespace between words. Corresponds to the Ignore whitespace characters check box in the Find and Replace dialog box.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_SearchOptions_IgnoreSpace_get */
                /* End_PlaceHolder_SearchOptions_IgnoreSpace_get */
                _throwIfNotLoaded("ignoreSpace", this.m_ignoreSpace, "SearchOptions", this._isNull);
                return this.m_ignoreSpace;
            },
            set: function (value) {
                /* Begin_PlaceHolder_SearchOptions_IgnoreSpace_set */
                /* End_PlaceHolder_SearchOptions_IgnoreSpace_set */
                this.m_ignoreSpace = value;
                _createSetPropertyAction(this.context, this, "IgnoreSpace", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchOptions.prototype, "matchCase", {
            /**
             *
             * Gets or sets a value that indicates whether to perform a case sensitive search. Corresponds to the Match case check box in the Find and Replace dialog box (Edit menu).
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_SearchOptions_MatchCase_get */
                /* End_PlaceHolder_SearchOptions_MatchCase_get */
                _throwIfNotLoaded("matchCase", this.m_matchCase, "SearchOptions", this._isNull);
                return this.m_matchCase;
            },
            set: function (value) {
                /* Begin_PlaceHolder_SearchOptions_MatchCase_set */
                /* End_PlaceHolder_SearchOptions_MatchCase_set */
                this.m_matchCase = value;
                _createSetPropertyAction(this.context, this, "MatchCase", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchOptions.prototype, "matchPrefix", {
            /**
             *
             * Gets or sets a value that indicates whether to match words that begin with the search string. Corresponds to the Match prefix check box in the Find and Replace dialog box.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_SearchOptions_MatchPrefix_get */
                /* End_PlaceHolder_SearchOptions_MatchPrefix_get */
                _throwIfNotLoaded("matchPrefix", this.m_matchPrefix, "SearchOptions", this._isNull);
                return this.m_matchPrefix;
            },
            set: function (value) {
                /* Begin_PlaceHolder_SearchOptions_MatchPrefix_set */
                /* End_PlaceHolder_SearchOptions_MatchPrefix_set */
                this.m_matchPrefix = value;
                _createSetPropertyAction(this.context, this, "MatchPrefix", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchOptions.prototype, "matchSuffix", {
            /**
             *
             * Gets or sets a value that indicates whether to match words that end with the search string. Corresponds to the Match suffix check box in the Find and Replace dialog box.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_SearchOptions_MatchSuffix_get */
                /* End_PlaceHolder_SearchOptions_MatchSuffix_get */
                _throwIfNotLoaded("matchSuffix", this.m_matchSuffix, "SearchOptions", this._isNull);
                return this.m_matchSuffix;
            },
            set: function (value) {
                /* Begin_PlaceHolder_SearchOptions_MatchSuffix_set */
                /* End_PlaceHolder_SearchOptions_MatchSuffix_set */
                this.m_matchSuffix = value;
                _createSetPropertyAction(this.context, this, "MatchSuffix", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchOptions.prototype, "matchWholeWord", {
            /**
             *
             * Gets or sets a value that indicates whether to find operation only entire words, not text that is part of a larger word. Corresponds to the Find whole words only check box in the Find and Replace dialog box.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_SearchOptions_MatchWholeWord_get */
                /* End_PlaceHolder_SearchOptions_MatchWholeWord_get */
                _throwIfNotLoaded("matchWholeWord", this.m_matchWholeWord, "SearchOptions", this._isNull);
                return this.m_matchWholeWord;
            },
            set: function (value) {
                /* Begin_PlaceHolder_SearchOptions_MatchWholeWord_set */
                /* End_PlaceHolder_SearchOptions_MatchWholeWord_set */
                this.m_matchWholeWord = value;
                _createSetPropertyAction(this.context, this, "MatchWholeWord", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchOptions.prototype, "matchWildcards", {
            /**
             *
             * Gets or sets a value that indicates whether the search will be performed using special search operators. Corresponds to the Use wildcards check box in the Find and Replace dialog box.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_SearchOptions_MatchWildcards_get */
                /* End_PlaceHolder_SearchOptions_MatchWildcards_get */
                _throwIfNotLoaded("matchWildcards", this.m_matchWildcards, "SearchOptions", this._isNull);
                return this.m_matchWildcards;
            },
            set: function (value) {
                /* Begin_PlaceHolder_SearchOptions_MatchWildcards_set */
                /* End_PlaceHolder_SearchOptions_MatchWildcards_set */
                this.m_matchWildcards = value;
                _createSetPropertyAction(this.context, this, "MatchWildcards", value);
            },
            enumerable: true,
            configurable: true
        });
        /** Handle results returned from the document
         * @private
         */
        SearchOptions.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["IgnorePunct"])) {
                this.m_ignorePunct = obj["IgnorePunct"];
            }
            if (!_isUndefined(obj["IgnoreSpace"])) {
                this.m_ignoreSpace = obj["IgnoreSpace"];
            }
            if (!_isUndefined(obj["MatchCase"])) {
                this.m_matchCase = obj["MatchCase"];
            }
            if (!_isUndefined(obj["MatchPrefix"])) {
                this.m_matchPrefix = obj["MatchPrefix"];
            }
            if (!_isUndefined(obj["MatchSuffix"])) {
                this.m_matchSuffix = obj["MatchSuffix"];
            }
            if (!_isUndefined(obj["MatchWholeWord"])) {
                this.m_matchWholeWord = obj["MatchWholeWord"];
            }
            if (!_isUndefined(obj["MatchWildcards"])) {
                this.m_matchWildcards = obj["MatchWildcards"];
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        SearchOptions.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /**
         * Create a new instance of Word.SearchOptions object
         */
        SearchOptions.newObject = function (context) {
            var ret = new Word.SearchOptions(context, _createNewObjectObjectPath(context, "Microsoft.WordServices.SearchOptions", false));
            return ret;
        };
        SearchOptions.prototype.toJSON = function () {
            return {
                "ignorePunct": this.m_ignorePunct,
                "ignoreSpace": this.m_ignoreSpace,
                "matchCase": this.m_matchCase,
                "matchPrefix": this.m_matchPrefix,
                "matchSuffix": this.m_matchSuffix,
                "matchWholeWord": this.m_matchWholeWord,
                "matchWildcards": this.m_matchWildcards
            };
        };
        return SearchOptions;
    })(OfficeExtension.ClientObject);
    Word.SearchOptions = SearchOptions;
    /**
     *
     * Represents a section in a Word document.
     *
     * [Api set: WordApi 1.1]
     */
    var Section = (function (_super) {
        __extends(Section, _super);
        function Section() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Section.prototype, "body", {
            /* Begin_PlaceHolder_Section_Custom_Members */
            /* End_PlaceHolder_Section_Custom_Members */
            /**
             *
             * Gets the body object of the section. This does not include the header/footer and other section metadata. Read-only.
             *
             * [Api set: WordApi 1.1]
             */
            get: function () {
                /* Begin_PlaceHolder_Section_Body_get */
                /* End_PlaceHolder_Section_Body_get */
                if (!this.m_body) {
                    this.m_body = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "Body", false, false));
                }
                return this.m_body;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Section.prototype, "_Id", {
            /**
             *
             * ID
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Section__Id_get */
                /* End_PlaceHolder_Section__Id_get */
                _throwIfNotLoaded("_Id", this.m__Id, "Section", this._isNull);
                return this.m__Id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Section.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Section__ReferenceId_get */
                /* End_PlaceHolder_Section__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Section", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets one of the section's footers.
         *
         * @param type Required. The type of footer to return. This value can be: 'primary', 'firstPage' or 'evenPages'.
         *
         * [Api set: WordApi 1.1]
         */
        Section.prototype.getFooter = function (type) {
            /* Begin_PlaceHolder_Section_GetFooter */
            /* End_PlaceHolder_Section_GetFooter */
            return new Word.Body(this.context, _createMethodObjectPath(this.context, this, "GetFooter", 1 /* Read */, [type], false, true, null));
        };
        /**
         *
         * Gets one of the section's headers.
         *
         * @param type Required. The type of header to return. This value can be: 'primary', 'firstPage' or 'evenPages'.
         *
         * [Api set: WordApi 1.1]
         */
        Section.prototype.getHeader = function (type) {
            /* Begin_PlaceHolder_Section_GetHeader */
            /* End_PlaceHolder_Section_GetHeader */
            return new Word.Body(this.context, _createMethodObjectPath(this.context, this, "GetHeader", 1 /* Read */, [type], false, true, null));
        };
        /**
         *
         * Gets the next section.
         *
         * [Api set: WordApi 1.3]
         */
        Section.prototype.getNext = function () {
            /* Begin_PlaceHolder_Section_GetNext */
            /* End_PlaceHolder_Section_GetNext */
            return new Word.Section(this.context, _createMethodObjectPath(this.context, this, "GetNext", 1 /* Read */, [], false, false, null));
        };
        Section.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Section__KeepReference */
            /* End_PlaceHolder_Section__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        Section.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_Id"])) {
                this.m__Id = obj["_Id"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["body", "Body"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Section.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Section.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["_Id"])) {
                this.m__Id = value["_Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Section.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Section.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Section.prototype.toJSON = function () {
            return {
                "body": this.m_body
            };
        };
        return Section;
    })(OfficeExtension.ClientObject);
    Word.Section = Section;
    /**
     *
     * Contains the collection of the document's [section](section.md) objects.
     *
     * [Api set: WordApi 1.1]
     */
    var SectionCollection = (function (_super) {
        __extends(SectionCollection, _super);
        function SectionCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(SectionCollection.prototype, "items", {
            /* Begin_PlaceHolder_SectionCollection_Custom_Members */
            /* End_PlaceHolder_SectionCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_SectionCollection_items */
                /* End_PlaceHolder_SectionCollection_items */
                _throwIfNotLoaded("items", this.m__items, "SectionCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SectionCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_SectionCollection__ReferenceId_get */
                /* End_PlaceHolder_SectionCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "SectionCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the first section in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        SectionCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_SectionCollection_GetFirst */
            /* End_PlaceHolder_SectionCollection_GetFirst */
            return new Word.Section(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a section object by its index in the collection.
         *
         * @param index A number that identifies the index location of a section object.
         *
         * [Api set: WordApi 1.1]
         */
        SectionCollection.prototype._GetItem = function (index) {
            /* Begin_PlaceHolder_SectionCollection__GetItem */
            /* End_PlaceHolder_SectionCollection__GetItem */
            return new Word.Section(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        SectionCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_SectionCollection__KeepReference */
            /* End_PlaceHolder_SectionCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        SectionCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.Section(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        SectionCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        SectionCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        SectionCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        SectionCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        SectionCollection.prototype.toJSON = function () {
            return {};
        };
        return SectionCollection;
    })(OfficeExtension.ClientObject);
    Word.SectionCollection = SectionCollection;
    /**
     *
     * Represents a setting of the add-in.
     *
     * [Api set: WordApi 1.4]
     */
    var Setting = (function (_super) {
        __extends(Setting, _super);
        function Setting() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Setting.prototype, "key", {
            /* Begin_PlaceHolder_Setting_Custom_Members */
            /* End_PlaceHolder_Setting_Custom_Members */
            /**
             *
             * Gets the key of the setting. Read only.
             *
             * [Api set: WordApi 1.4]
             */
            get: function () {
                /* Begin_PlaceHolder_Setting_Key_get */
                /* End_PlaceHolder_Setting_Key_get */
                _throwIfNotLoaded("key", this.m_key, "Setting", this._isNull);
                return this.m_key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Setting.prototype, "value", {
            /**
             *
             * Gets or sets the value of the setting.
             *
             * [Api set: WordApi 1.4]
             */
            get: function () {
                /* Begin_PlaceHolder_Setting_Value_get */
                if (!this._isNull && typeof this.m_value === "string") {
                    function dateReviver(key, val) {
                        var re = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
                        if (re.exec(val))
                            return new Date(val);
                        return val;
                    }
                    ;
                    var newValue = JSON.parse(this.m_value, dateReviver);
                    return newValue;
                }
                /* End_PlaceHolder_Setting_Value_get */
                _throwIfNotLoaded("value", this.m_value, "Setting", this._isNull);
                return this.m_value;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Setting_Value_set */
                var newValue = JSON.stringify(value);
                if (newValue !== null) {
                    this.m_value = newValue;
                    _createSetPropertyAction(this.context, this, "Value", newValue);
                    return;
                }
                /* End_PlaceHolder_Setting_Value_set */
                this.m_value = value;
                _createSetPropertyAction(this.context, this, "Value", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Setting.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Setting__ReferenceId_get */
                /* End_PlaceHolder_Setting__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Setting", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Deletes the setting.
         *
         * [Api set: WordApi 1.4]
         */
        Setting.prototype.delete = function () {
            /* Begin_PlaceHolder_Setting_Delete */
            /* End_PlaceHolder_Setting_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, []);
        };
        Setting.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Setting__KeepReference */
            /* End_PlaceHolder_Setting__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        Setting.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Key"])) {
                this.m_key = obj["Key"];
            }
            if (!_isUndefined(obj["Value"])) {
                this.m_value = obj["Value"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Setting.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Setting.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Setting.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Setting.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Setting.prototype.toJSON = function () {
            return {
                "key": this.m_key,
                "value": this.m_value
            };
        };
        return Setting;
    })(OfficeExtension.ClientObject);
    Word.Setting = Setting;
    /**
     *
     * Contains the collection of [setting](setting.md) objects.
     *
     * [Api set: WordApi 1.4]
     */
    var SettingCollection = (function (_super) {
        __extends(SettingCollection, _super);
        function SettingCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(SettingCollection.prototype, "items", {
            /* Begin_PlaceHolder_SettingCollection_Custom_Members */
            /* End_PlaceHolder_SettingCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_SettingCollection_items */
                /* End_PlaceHolder_SettingCollection_items */
                _throwIfNotLoaded("items", this.m__items, "SettingCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SettingCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_SettingCollection__ReferenceId_get */
                /* End_PlaceHolder_SettingCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "SettingCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Deletes all settings in this add-in.
         *
         * [Api set: WordApi 1.4]
         */
        SettingCollection.prototype.deleteAll = function () {
            /* Begin_PlaceHolder_SettingCollection_DeleteAll */
            /* End_PlaceHolder_SettingCollection_DeleteAll */
            _createMethodAction(this.context, this, "DeleteAll", 0 /* Default */, []);
        };
        /**
         *
         * Gets the count of settings.
         *
         * [Api set: WordApi 1.4]
         */
        SettingCollection.prototype.getCount = function () {
            /* Begin_PlaceHolder_SettingCollection_GetCount */
            /* End_PlaceHolder_SettingCollection_GetCount */
            var action = _createMethodAction(this.context, this, "GetCount", 0 /* Default */, []);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets a setting object by its key, which is case-sensitive.
         *
         * @param key The key that identifies the setting object.
         *
         * [Api set: WordApi 1.4]
         */
        SettingCollection.prototype.getItem = function (key) {
            /* Begin_PlaceHolder_SettingCollection_GetItem */
            /* End_PlaceHolder_SettingCollection_GetItem */
            return new Word.Setting(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        /**
         *
         * Creates or sets a setting.
         *
         * @param key Required. The setting's key, which is case-sensitive.
         * @param value Required. The setting's value.
         *
         * [Api set: WordApi 1.4]
         */
        SettingCollection.prototype.set = function (key, value) {
            /* Begin_PlaceHolder_SettingCollection_Set */
            var newValue = JSON.stringify(value);
            if (newValue !== null)
                return new Word.Setting(this.context, _createMethodObjectPath(this.context, this, "Set", 0 /* Default */, [key, newValue], false, false, null));
            /* End_PlaceHolder_SettingCollection_Set */
            return new Word.Setting(this.context, _createMethodObjectPath(this.context, this, "Set", 0 /* Default */, [key, value], false, false, null));
        };
        SettingCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_SettingCollection__KeepReference */
            /* End_PlaceHolder_SettingCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        SettingCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.Setting(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        SettingCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        SettingCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        SettingCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        SettingCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        SettingCollection.prototype.toJSON = function () {
            return {};
        };
        return SettingCollection;
    })(OfficeExtension.ClientObject);
    Word.SettingCollection = SettingCollection;
    /**
     *
     * Represents a table in a Word document.
     *
     * [Api set: WordApi 1.3]
     */
    var Table = (function (_super) {
        __extends(Table, _super);
        function Table() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Table.prototype, "font", {
            /* Begin_PlaceHolder_Table_Custom_Members */
            /* End_PlaceHolder_Table_Custom_Members */
            /**
             *
             * Gets the font. Use this to get and set font name, size, color, and other properties. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_Font_get */
                /* End_PlaceHolder_Table_Font_get */
                if (!this.m_font) {
                    this.m_font = new Word.Font(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false));
                }
                return this.m_font;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "paragraphAfter", {
            /**
             *
             * Gets the paragraph after the table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_ParagraphAfter_get */
                /* End_PlaceHolder_Table_ParagraphAfter_get */
                if (!this.m_paragraphAfter) {
                    this.m_paragraphAfter = new Word.Paragraph(this.context, _createPropertyObjectPath(this.context, this, "ParagraphAfter", false, false));
                }
                return this.m_paragraphAfter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "paragraphBefore", {
            /**
             *
             * Gets the paragraph before the table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_ParagraphBefore_get */
                /* End_PlaceHolder_Table_ParagraphBefore_get */
                if (!this.m_paragraphBefore) {
                    this.m_paragraphBefore = new Word.Paragraph(this.context, _createPropertyObjectPath(this.context, this, "ParagraphBefore", false, false));
                }
                return this.m_paragraphBefore;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "parentBody", {
            /**
             *
             * Gets the parent body of the table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_ParentBody_get */
                /* End_PlaceHolder_Table_ParentBody_get */
                if (!this.m_parentBody) {
                    this.m_parentBody = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "ParentBody", false, false));
                }
                return this.m_parentBody;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "parentContentControl", {
            /**
             *
             * Gets the content control that contains the table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_ParentContentControl_get */
                /* End_PlaceHolder_Table_ParentContentControl_get */
                if (!this.m_parentContentControl) {
                    this.m_parentContentControl = new Word.ContentControl(this.context, _createPropertyObjectPath(this.context, this, "ParentContentControl", false, false));
                }
                return this.m_parentContentControl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "parentTable", {
            /**
             *
             * Gets the table that contains this table. Returns a null object if it is not contained in a table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_ParentTable_get */
                /* End_PlaceHolder_Table_ParentTable_get */
                if (!this.m_parentTable) {
                    this.m_parentTable = new Word.Table(this.context, _createPropertyObjectPath(this.context, this, "ParentTable", false, false));
                }
                return this.m_parentTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "parentTableCell", {
            /**
             *
             * Gets the table cell that contains this table. Returns a null object if it is not contained in a table cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_ParentTableCell_get */
                /* End_PlaceHolder_Table_ParentTableCell_get */
                if (!this.m_parentTableCell) {
                    this.m_parentTableCell = new Word.TableCell(this.context, _createPropertyObjectPath(this.context, this, "ParentTableCell", false, false));
                }
                return this.m_parentTableCell;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "rows", {
            /**
             *
             * Gets all of the table rows. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_Rows_get */
                /* End_PlaceHolder_Table_Rows_get */
                if (!this.m_rows) {
                    this.m_rows = new Word.TableRowCollection(this.context, _createPropertyObjectPath(this.context, this, "Rows", true, false));
                }
                return this.m_rows;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "tables", {
            /**
             *
             * Gets the child tables nested one level deeper. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_Tables_get */
                /* End_PlaceHolder_Table_Tables_get */
                if (!this.m_tables) {
                    this.m_tables = new Word.TableCollection(this.context, _createPropertyObjectPath(this.context, this, "Tables", true, false));
                }
                return this.m_tables;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "headerRowCount", {
            /**
             *
             * Gets and sets the number of header rows.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_HeaderRowCount_get */
                /* End_PlaceHolder_Table_HeaderRowCount_get */
                _throwIfNotLoaded("headerRowCount", this.m_headerRowCount, "Table", this._isNull);
                return this.m_headerRowCount;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_HeaderRowCount_set */
                /* End_PlaceHolder_Table_HeaderRowCount_set */
                this.m_headerRowCount = value;
                _createSetPropertyAction(this.context, this, "HeaderRowCount", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "height", {
            /**
             *
             * Gets the height of the table in points. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_Height_get */
                /* End_PlaceHolder_Table_Height_get */
                _throwIfNotLoaded("height", this.m_height, "Table", this._isNull);
                return this.m_height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "horizontalAlignment", {
            /**
             *
             * Gets and sets the horizontal alignment of every cell in the table. The value can be 'left', 'centered', 'right', or 'justified'.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_HorizontalAlignment_get */
                /* End_PlaceHolder_Table_HorizontalAlignment_get */
                _throwIfNotLoaded("horizontalAlignment", this.m_horizontalAlignment, "Table", this._isNull);
                return this.m_horizontalAlignment;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_HorizontalAlignment_set */
                /* End_PlaceHolder_Table_HorizontalAlignment_set */
                this.m_horizontalAlignment = value;
                _createSetPropertyAction(this.context, this, "HorizontalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "isUniform", {
            /**
             *
             * Indicates whether all of the table rows are uniform. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_IsUniform_get */
                /* End_PlaceHolder_Table_IsUniform_get */
                _throwIfNotLoaded("isUniform", this.m_isUniform, "Table", this._isNull);
                return this.m_isUniform;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "nestingLevel", {
            /**
             *
             * Gets the nesting level of the table. Top-level tables have level 1. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_NestingLevel_get */
                /* End_PlaceHolder_Table_NestingLevel_get */
                _throwIfNotLoaded("nestingLevel", this.m_nestingLevel, "Table", this._isNull);
                return this.m_nestingLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "rowCount", {
            /**
             *
             * Gets the number of rows in the table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_RowCount_get */
                /* End_PlaceHolder_Table_RowCount_get */
                _throwIfNotLoaded("rowCount", this.m_rowCount, "Table", this._isNull);
                return this.m_rowCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "shadingColor", {
            /**
             *
             * Gets and sets the shading color.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_ShadingColor_get */
                /* End_PlaceHolder_Table_ShadingColor_get */
                _throwIfNotLoaded("shadingColor", this.m_shadingColor, "Table", this._isNull);
                return this.m_shadingColor;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_ShadingColor_set */
                /* End_PlaceHolder_Table_ShadingColor_set */
                this.m_shadingColor = value;
                _createSetPropertyAction(this.context, this, "ShadingColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "style", {
            /**
             *
             * Gets or sets the style name for the table. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_Style_get */
                /* End_PlaceHolder_Table_Style_get */
                _throwIfNotLoaded("style", this.m_style, "Table", this._isNull);
                return this.m_style;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_Style_set */
                /* End_PlaceHolder_Table_Style_set */
                this.m_style = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "styleBandedColumns", {
            /**
             *
             * Gets and sets whether the table has banded columns.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_StyleBandedColumns_get */
                /* End_PlaceHolder_Table_StyleBandedColumns_get */
                _throwIfNotLoaded("styleBandedColumns", this.m_styleBandedColumns, "Table", this._isNull);
                return this.m_styleBandedColumns;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_StyleBandedColumns_set */
                /* End_PlaceHolder_Table_StyleBandedColumns_set */
                this.m_styleBandedColumns = value;
                _createSetPropertyAction(this.context, this, "StyleBandedColumns", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "styleBandedRows", {
            /**
             *
             * Gets and sets whether the table has banded rows.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_StyleBandedRows_get */
                /* End_PlaceHolder_Table_StyleBandedRows_get */
                _throwIfNotLoaded("styleBandedRows", this.m_styleBandedRows, "Table", this._isNull);
                return this.m_styleBandedRows;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_StyleBandedRows_set */
                /* End_PlaceHolder_Table_StyleBandedRows_set */
                this.m_styleBandedRows = value;
                _createSetPropertyAction(this.context, this, "StyleBandedRows", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "styleBuiltIn", {
            /**
             *
             * Gets or sets the built-in style name for the table. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_StyleBuiltIn_get */
                /* End_PlaceHolder_Table_StyleBuiltIn_get */
                _throwIfNotLoaded("styleBuiltIn", this.m_styleBuiltIn, "Table", this._isNull);
                return this.m_styleBuiltIn;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_StyleBuiltIn_set */
                /* End_PlaceHolder_Table_StyleBuiltIn_set */
                this.m_styleBuiltIn = value;
                _createSetPropertyAction(this.context, this, "StyleBuiltIn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "styleFirstColumn", {
            /**
             *
             * Gets and sets whether the table has a first column with a special style.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_StyleFirstColumn_get */
                /* End_PlaceHolder_Table_StyleFirstColumn_get */
                _throwIfNotLoaded("styleFirstColumn", this.m_styleFirstColumn, "Table", this._isNull);
                return this.m_styleFirstColumn;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_StyleFirstColumn_set */
                /* End_PlaceHolder_Table_StyleFirstColumn_set */
                this.m_styleFirstColumn = value;
                _createSetPropertyAction(this.context, this, "StyleFirstColumn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "styleLastColumn", {
            /**
             *
             * Gets and sets whether the table has a last column with a special style.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_StyleLastColumn_get */
                /* End_PlaceHolder_Table_StyleLastColumn_get */
                _throwIfNotLoaded("styleLastColumn", this.m_styleLastColumn, "Table", this._isNull);
                return this.m_styleLastColumn;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_StyleLastColumn_set */
                /* End_PlaceHolder_Table_StyleLastColumn_set */
                this.m_styleLastColumn = value;
                _createSetPropertyAction(this.context, this, "StyleLastColumn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "styleTotalRow", {
            /**
             *
             * Gets and sets whether the table has a total (last) row with a special style.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_StyleTotalRow_get */
                /* End_PlaceHolder_Table_StyleTotalRow_get */
                _throwIfNotLoaded("styleTotalRow", this.m_styleTotalRow, "Table", this._isNull);
                return this.m_styleTotalRow;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_StyleTotalRow_set */
                /* End_PlaceHolder_Table_StyleTotalRow_set */
                this.m_styleTotalRow = value;
                _createSetPropertyAction(this.context, this, "StyleTotalRow", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "values", {
            /**
             *
             * Gets and sets the text values in the table, as a 2D Javascript array.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_Values_get */
                /* End_PlaceHolder_Table_Values_get */
                _throwIfNotLoaded("values", this.m_values, "Table", this._isNull);
                return this.m_values;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_Values_set */
                /* End_PlaceHolder_Table_Values_set */
                this.m_values = value;
                _createSetPropertyAction(this.context, this, "Values", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "verticalAlignment", {
            /**
             *
             * Gets and sets the vertical alignment of every cell in the table. The value can be 'top', 'center' or 'bottom'.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_VerticalAlignment_get */
                /* End_PlaceHolder_Table_VerticalAlignment_get */
                _throwIfNotLoaded("verticalAlignment", this.m_verticalAlignment, "Table", this._isNull);
                return this.m_verticalAlignment;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_VerticalAlignment_set */
                /* End_PlaceHolder_Table_VerticalAlignment_set */
                this.m_verticalAlignment = value;
                _createSetPropertyAction(this.context, this, "VerticalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "width", {
            /**
             *
             * Gets and sets the width of the table in points.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_Table_Width_get */
                /* End_PlaceHolder_Table_Width_get */
                _throwIfNotLoaded("width", this.m_width, "Table", this._isNull);
                return this.m_width;
            },
            set: function (value) {
                /* Begin_PlaceHolder_Table_Width_set */
                /* End_PlaceHolder_Table_Width_set */
                this.m_width = value;
                _createSetPropertyAction(this.context, this, "Width", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "_Id", {
            /**
             *
             * ID
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Table__Id_get */
                /* End_PlaceHolder_Table__Id_get */
                _throwIfNotLoaded("_Id", this.m__Id, "Table", this._isNull);
                return this.m__Id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_Table__ReferenceId_get */
                /* End_PlaceHolder_Table__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "Table", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Adds columns to the start or end of the table, using the first or last existing column as a template. This is applicable to uniform tables. The string values, if specified, are set in the newly inserted rows.
         *
         * @param insertLocation Required. It can be 'Start' or 'End', corresponding to the appropriate side of the table.
         * @param columnCount Required. Number of columns to add.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.addColumns = function (insertLocation, columnCount, values) {
            /* Begin_PlaceHolder_Table_AddColumns */
            /* End_PlaceHolder_Table_AddColumns */
            _createMethodAction(this.context, this, "AddColumns", 0 /* Default */, [insertLocation, columnCount, values]);
        };
        /**
         *
         * Adds rows to the start or end of the table, using the first or last existing row as a template. The string values, if specified, are set in the newly inserted rows.
         *
         * @param insertLocation Required. It can be 'Start' or 'End'.
         * @param rowCount Required. Number of rows to add.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.addRows = function (insertLocation, rowCount, values) {
            /* Begin_PlaceHolder_Table_AddRows */
            /* End_PlaceHolder_Table_AddRows */
            return new Word.TableRowCollection(this.context, _createMethodObjectPath(this.context, this, "AddRows", 0 /* Default */, [insertLocation, rowCount, values], true, false, null));
        };
        /**
         *
         * Autofits the table columns to the width of their contents.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.autoFitContents = function () {
            /* Begin_PlaceHolder_Table_AutoFitContents */
            /* End_PlaceHolder_Table_AutoFitContents */
            _createMethodAction(this.context, this, "AutoFitContents", 0 /* Default */, []);
        };
        /**
         *
         * Autofits the table columns to the width of the window.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.autoFitWindow = function () {
            /* Begin_PlaceHolder_Table_AutoFitWindow */
            /* End_PlaceHolder_Table_AutoFitWindow */
            _createMethodAction(this.context, this, "AutoFitWindow", 0 /* Default */, []);
        };
        /**
         *
         * Clears the contents of the table.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.clear = function () {
            /* Begin_PlaceHolder_Table_Clear */
            /* End_PlaceHolder_Table_Clear */
            _createMethodAction(this.context, this, "Clear", 0 /* Default */, []);
        };
        /**
         *
         * Deletes the entire table.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.delete = function () {
            /* Begin_PlaceHolder_Table_Delete */
            /* End_PlaceHolder_Table_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, []);
        };
        /**
         *
         * Deletes specific columns. This is applicable to uniform tables.
         *
         * @param columnIndex Required. The first column to delete.
         * @param columnCount Optional. The number of columns to delete. Default 1.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.deleteColumns = function (columnIndex, columnCount) {
            /* Begin_PlaceHolder_Table_DeleteColumns */
            /* End_PlaceHolder_Table_DeleteColumns */
            _createMethodAction(this.context, this, "DeleteColumns", 0 /* Default */, [columnIndex, columnCount]);
        };
        /**
         *
         * Deletes specific rows.
         *
         * @param rowIndex Required. The first row to delete.
         * @param rowCount Optional. The number of rows to delete. Default 1.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.deleteRows = function (rowIndex, rowCount) {
            /* Begin_PlaceHolder_Table_DeleteRows */
            /* End_PlaceHolder_Table_DeleteRows */
            _createMethodAction(this.context, this, "DeleteRows", 0 /* Default */, [rowIndex, rowCount]);
        };
        /**
         *
         * Distributes the column widths evenly.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.distributeColumns = function () {
            /* Begin_PlaceHolder_Table_DistributeColumns */
            /* End_PlaceHolder_Table_DistributeColumns */
            _createMethodAction(this.context, this, "DistributeColumns", 0 /* Default */, []);
        };
        /**
         *
         * Distributes the row heights evenly.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.distributeRows = function () {
            /* Begin_PlaceHolder_Table_DistributeRows */
            /* End_PlaceHolder_Table_DistributeRows */
            _createMethodAction(this.context, this, "DistributeRows", 0 /* Default */, []);
        };
        /**
         *
         * Gets the border style for the specified border.
         *
         * @param borderLocation Required. The border location.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.getBorder = function (borderLocation) {
            /* Begin_PlaceHolder_Table_GetBorder */
            /* End_PlaceHolder_Table_GetBorder */
            return new Word.TableBorder(this.context, _createMethodObjectPath(this.context, this, "GetBorder", 1 /* Read */, [borderLocation], false, false, null));
        };
        /**
         *
         * Gets the table cell at a specified row and column.
         *
         * @param rowIndex Required. The index of the row.
         * @param cellIndex Required. The index of the cell in the row.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.getCell = function (rowIndex, cellIndex) {
            /* Begin_PlaceHolder_Table_GetCell */
            /* End_PlaceHolder_Table_GetCell */
            return new Word.TableCell(this.context, _createMethodObjectPath(this.context, this, "GetCell", 0 /* Default */, [rowIndex, cellIndex], false, false, null));
        };
        /**
         *
         * Gets cell padding in points.
         *
         * @param cellPaddingLocation Required. The cell padding location can be 'Top', 'Left', 'Bottom' or 'Right'.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.getCellPadding = function (cellPaddingLocation) {
            /* Begin_PlaceHolder_Table_GetCellPadding */
            /* End_PlaceHolder_Table_GetCellPadding */
            var action = _createMethodAction(this.context, this, "GetCellPadding", 1 /* Read */, [cellPaddingLocation]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the next table.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.getNext = function () {
            /* Begin_PlaceHolder_Table_GetNext */
            /* End_PlaceHolder_Table_GetNext */
            return new Word.Table(this.context, _createMethodObjectPath(this.context, this, "GetNext", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets the range that contains this table, or the range at the start or end of the table.
         *
         * @param rangeLocation Optional. The range location can be 'Whole', 'Start', 'End' or 'After'.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.getRange = function (rangeLocation) {
            /* Begin_PlaceHolder_Table_GetRange */
            /* End_PlaceHolder_Table_GetRange */
            return new Word.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1 /* Read */, [rangeLocation], false, false, null));
        };
        /**
         *
         * Inserts a content control on the table.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.insertContentControl = function () {
            /* Begin_PlaceHolder_Table_InsertContentControl */
            /* End_PlaceHolder_Table_InsertContentControl */
            return new Word.ContentControl(this.context, _createMethodObjectPath(this.context, this, "InsertContentControl", 0 /* Default */, [], false, true, null));
        };
        /**
         *
         * Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.
         *
         * @param paragraphText Required. The paragraph text to be inserted.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.insertParagraph = function (paragraphText, insertLocation) {
            /* Begin_PlaceHolder_Table_InsertParagraph */
            /* End_PlaceHolder_Table_InsertParagraph */
            return new Word.Paragraph(this.context, _createMethodObjectPath(this.context, this, "InsertParagraph", 0 /* Default */, [paragraphText, insertLocation], false, true, null));
        };
        /**
         *
         * Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or 'After'.
         *
         * @param rowCount Required. The number of rows in the table.
         * @param columnCount Required. The number of columns in the table.
         * @param insertLocation Required. The value can be 'Before' or 'After'.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.insertTable = function (rowCount, columnCount, insertLocation, values) {
            /* Begin_PlaceHolder_Table_InsertTable */
            /* End_PlaceHolder_Table_InsertTable */
            return new Word.Table(this.context, _createMethodObjectPath(this.context, this, "InsertTable", 0 /* Default */, [rowCount, columnCount, insertLocation, values], false, true, null));
        };
        /**
         *
         * Merges the cells bounded inclusively by a first and last cell.
         *
         * @param topRow Required. The row of the first cell
         * @param firstCell Required. The index of the first cell in its row
         * @param bottomRow Required. The row of the last cell
         * @param lastCell Required. The index of the last cell in its row
         *
         * [Api set: WordApi 1.4]
         */
        Table.prototype.mergeCells = function (topRow, firstCell, bottomRow, lastCell) {
            /* Begin_PlaceHolder_Table_MergeCells */
            /* End_PlaceHolder_Table_MergeCells */
            return new Word.TableCell(this.context, _createMethodObjectPath(this.context, this, "MergeCells", 0 /* Default */, [topRow, firstCell, bottomRow, lastCell], false, true, null));
        };
        /**
         *
         * Performs a search with the specified searchOptions on the scope of the table object. The search results are a collection of range objects.
         *
         * @param searchText Required. The search text.
         * @param searchOptions Optional. Options for the search.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.search = function (searchText, searchOptions) {
            /* Begin_PlaceHolder_Table_Search */
            /* End_PlaceHolder_Table_Search */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Search", 1 /* Read */, [searchText, searchOptions], true, true, null));
        };
        /**
         *
         * Selects the table, or the position at the start or end of the table, and navigates the Word UI to it.
         *
         * @param selectionMode Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.select = function (selectionMode) {
            /* Begin_PlaceHolder_Table_Select */
            /* End_PlaceHolder_Table_Select */
            _createMethodAction(this.context, this, "Select", 1 /* Read */, [selectionMode]);
        };
        /**
         *
         * Sets cell padding in points.
         *
         * @param cellPaddingLocation Required. The cell padding location can be 'Top', 'Left', 'Bottom' or 'Right'.
         *
         * [Api set: WordApi 1.3]
         */
        Table.prototype.setCellPadding = function (cellPaddingLocation, cellPadding) {
            /* Begin_PlaceHolder_Table_SetCellPadding */
            /* End_PlaceHolder_Table_SetCellPadding */
            _createMethodAction(this.context, this, "SetCellPadding", 0 /* Default */, [cellPaddingLocation, cellPadding]);
        };
        Table.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_Table__KeepReference */
            /* End_PlaceHolder_Table__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        Table.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["HeaderRowCount"])) {
                this.m_headerRowCount = obj["HeaderRowCount"];
            }
            if (!_isUndefined(obj["Height"])) {
                this.m_height = obj["Height"];
            }
            if (!_isUndefined(obj["HorizontalAlignment"])) {
                this.m_horizontalAlignment = obj["HorizontalAlignment"];
            }
            if (!_isUndefined(obj["IsUniform"])) {
                this.m_isUniform = obj["IsUniform"];
            }
            if (!_isUndefined(obj["NestingLevel"])) {
                this.m_nestingLevel = obj["NestingLevel"];
            }
            if (!_isUndefined(obj["RowCount"])) {
                this.m_rowCount = obj["RowCount"];
            }
            if (!_isUndefined(obj["ShadingColor"])) {
                this.m_shadingColor = obj["ShadingColor"];
            }
            if (!_isUndefined(obj["Style"])) {
                this.m_style = obj["Style"];
            }
            if (!_isUndefined(obj["StyleBandedColumns"])) {
                this.m_styleBandedColumns = obj["StyleBandedColumns"];
            }
            if (!_isUndefined(obj["StyleBandedRows"])) {
                this.m_styleBandedRows = obj["StyleBandedRows"];
            }
            if (!_isUndefined(obj["StyleBuiltIn"])) {
                this.m_styleBuiltIn = obj["StyleBuiltIn"];
            }
            if (!_isUndefined(obj["StyleFirstColumn"])) {
                this.m_styleFirstColumn = obj["StyleFirstColumn"];
            }
            if (!_isUndefined(obj["StyleLastColumn"])) {
                this.m_styleLastColumn = obj["StyleLastColumn"];
            }
            if (!_isUndefined(obj["StyleTotalRow"])) {
                this.m_styleTotalRow = obj["StyleTotalRow"];
            }
            if (!_isUndefined(obj["Values"])) {
                this.m_values = obj["Values"];
            }
            if (!_isUndefined(obj["VerticalAlignment"])) {
                this.m_verticalAlignment = obj["VerticalAlignment"];
            }
            if (!_isUndefined(obj["Width"])) {
                this.m_width = obj["Width"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.m__Id = obj["_Id"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["font", "Font", "paragraphAfter", "ParagraphAfter", "paragraphBefore", "ParagraphBefore", "parentBody", "ParentBody", "parentContentControl", "ParentContentControl", "parentTable", "ParentTable", "parentTableCell", "ParentTableCell", "rows", "Rows", "tables", "Tables"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        Table.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        Table.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["_Id"])) {
                this.m__Id = value["_Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        Table.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        Table.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Table.prototype.toJSON = function () {
            return {
                "font": this.m_font,
                "headerRowCount": this.m_headerRowCount,
                "height": this.m_height,
                "horizontalAlignment": this.m_horizontalAlignment,
                "isUniform": this.m_isUniform,
                "nestingLevel": this.m_nestingLevel,
                "rowCount": this.m_rowCount,
                "shadingColor": this.m_shadingColor,
                "style": this.m_style,
                "styleBandedColumns": this.m_styleBandedColumns,
                "styleBandedRows": this.m_styleBandedRows,
                "styleBuiltIn": this.m_styleBuiltIn,
                "styleFirstColumn": this.m_styleFirstColumn,
                "styleLastColumn": this.m_styleLastColumn,
                "styleTotalRow": this.m_styleTotalRow,
                "values": this.m_values,
                "verticalAlignment": this.m_verticalAlignment,
                "width": this.m_width
            };
        };
        return Table;
    })(OfficeExtension.ClientObject);
    Word.Table = Table;
    /**
     *
     * Contains the collection of the document's Table objects.
     *
     * [Api set: WordApi 1.3]
     */
    var TableCollection = (function (_super) {
        __extends(TableCollection, _super);
        function TableCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TableCollection.prototype, "items", {
            /* Begin_PlaceHolder_TableCollection_Custom_Members */
            /* End_PlaceHolder_TableCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_TableCollection_items */
                /* End_PlaceHolder_TableCollection_items */
                _throwIfNotLoaded("items", this.m__items, "TableCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCollection__ReferenceId_get */
                /* End_PlaceHolder_TableCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "TableCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the first table in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        TableCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_TableCollection_GetFirst */
            /* End_PlaceHolder_TableCollection_GetFirst */
            return new Word.Table(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a table object by its index in the collection.
         *
         * @param index A number that identifies the index location of a table object.
         *
         * [Api set: WordApi 1.3]
         */
        TableCollection.prototype._GetItem = function (index) {
            /* Begin_PlaceHolder_TableCollection__GetItem */
            /* End_PlaceHolder_TableCollection__GetItem */
            return new Word.Table(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        TableCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_TableCollection__KeepReference */
            /* End_PlaceHolder_TableCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        TableCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.Table(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        TableCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        TableCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        TableCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        TableCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        TableCollection.prototype.toJSON = function () {
            return {};
        };
        return TableCollection;
    })(OfficeExtension.ClientObject);
    Word.TableCollection = TableCollection;
    /**
     *
     * Represents a row in a Word document.
     *
     * [Api set: WordApi 1.3]
     */
    var TableRow = (function (_super) {
        __extends(TableRow, _super);
        function TableRow() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TableRow.prototype, "cells", {
            /* Begin_PlaceHolder_TableRow_Custom_Members */
            /* End_PlaceHolder_TableRow_Custom_Members */
            /**
             *
             * Gets cells. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_Cells_get */
                /* End_PlaceHolder_TableRow_Cells_get */
                if (!this.m_cells) {
                    this.m_cells = new Word.TableCellCollection(this.context, _createPropertyObjectPath(this.context, this, "Cells", true, false));
                }
                return this.m_cells;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "font", {
            /**
             *
             * Gets the font. Use this to get and set font name, size, color, and other properties. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_Font_get */
                /* End_PlaceHolder_TableRow_Font_get */
                if (!this.m_font) {
                    this.m_font = new Word.Font(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false));
                }
                return this.m_font;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "parentTable", {
            /**
             *
             * Gets parent table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_ParentTable_get */
                /* End_PlaceHolder_TableRow_ParentTable_get */
                if (!this.m_parentTable) {
                    this.m_parentTable = new Word.Table(this.context, _createPropertyObjectPath(this.context, this, "ParentTable", false, false));
                }
                return this.m_parentTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "cellCount", {
            /**
             *
             * Gets the number of cells in the row. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_CellCount_get */
                /* End_PlaceHolder_TableRow_CellCount_get */
                _throwIfNotLoaded("cellCount", this.m_cellCount, "TableRow", this._isNull);
                return this.m_cellCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "horizontalAlignment", {
            /**
             *
             * Gets and sets the horizontal alignment of every cell in the row. The value can be 'left', 'centered', 'right', or 'justified'.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_HorizontalAlignment_get */
                /* End_PlaceHolder_TableRow_HorizontalAlignment_get */
                _throwIfNotLoaded("horizontalAlignment", this.m_horizontalAlignment, "TableRow", this._isNull);
                return this.m_horizontalAlignment;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableRow_HorizontalAlignment_set */
                /* End_PlaceHolder_TableRow_HorizontalAlignment_set */
                this.m_horizontalAlignment = value;
                _createSetPropertyAction(this.context, this, "HorizontalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "isHeader", {
            /**
             *
             * Checks whether the row is a header row. Read-only. To set the number of header rows, use HeaderRowCount on the Table object.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_IsHeader_get */
                /* End_PlaceHolder_TableRow_IsHeader_get */
                _throwIfNotLoaded("isHeader", this.m_isHeader, "TableRow", this._isNull);
                return this.m_isHeader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "preferredHeight", {
            /**
             *
             * Gets and sets the preferred height of the row in points.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_PreferredHeight_get */
                /* End_PlaceHolder_TableRow_PreferredHeight_get */
                _throwIfNotLoaded("preferredHeight", this.m_preferredHeight, "TableRow", this._isNull);
                return this.m_preferredHeight;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableRow_PreferredHeight_set */
                /* End_PlaceHolder_TableRow_PreferredHeight_set */
                this.m_preferredHeight = value;
                _createSetPropertyAction(this.context, this, "PreferredHeight", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "rowIndex", {
            /**
             *
             * Gets the index of the row in its parent table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_RowIndex_get */
                /* End_PlaceHolder_TableRow_RowIndex_get */
                _throwIfNotLoaded("rowIndex", this.m_rowIndex, "TableRow", this._isNull);
                return this.m_rowIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "shadingColor", {
            /**
             *
             * Gets and sets the shading color.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_ShadingColor_get */
                /* End_PlaceHolder_TableRow_ShadingColor_get */
                _throwIfNotLoaded("shadingColor", this.m_shadingColor, "TableRow", this._isNull);
                return this.m_shadingColor;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableRow_ShadingColor_set */
                /* End_PlaceHolder_TableRow_ShadingColor_set */
                this.m_shadingColor = value;
                _createSetPropertyAction(this.context, this, "ShadingColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "values", {
            /**
             *
             * Gets and sets the text values in the row, as a 1D Javascript array.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_Values_get */
                /* End_PlaceHolder_TableRow_Values_get */
                _throwIfNotLoaded("values", this.m_values, "TableRow", this._isNull);
                return this.m_values;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableRow_Values_set */
                /* End_PlaceHolder_TableRow_Values_set */
                this.m_values = value;
                _createSetPropertyAction(this.context, this, "Values", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "verticalAlignment", {
            /**
             *
             * Gets and sets the vertical alignment of the cells in the row. The value can be 'top', 'center' or 'bottom'.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow_VerticalAlignment_get */
                /* End_PlaceHolder_TableRow_VerticalAlignment_get */
                _throwIfNotLoaded("verticalAlignment", this.m_verticalAlignment, "TableRow", this._isNull);
                return this.m_verticalAlignment;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableRow_VerticalAlignment_set */
                /* End_PlaceHolder_TableRow_VerticalAlignment_set */
                this.m_verticalAlignment = value;
                _createSetPropertyAction(this.context, this, "VerticalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "_Id", {
            /**
             *
             * ID
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow__Id_get */
                /* End_PlaceHolder_TableRow__Id_get */
                _throwIfNotLoaded("_Id", this.m__Id, "TableRow", this._isNull);
                return this.m__Id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRow__ReferenceId_get */
                /* End_PlaceHolder_TableRow__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "TableRow", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Clears the contents of the row.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.clear = function () {
            /* Begin_PlaceHolder_TableRow_Clear */
            /* End_PlaceHolder_TableRow_Clear */
            _createMethodAction(this.context, this, "Clear", 0 /* Default */, []);
        };
        /**
         *
         * Deletes the entire row.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.delete = function () {
            /* Begin_PlaceHolder_TableRow_Delete */
            /* End_PlaceHolder_TableRow_Delete */
            _createMethodAction(this.context, this, "Delete", 0 /* Default */, []);
        };
        /**
         *
         * Gets the border style of the cells in the row.
         *
         * @param borderLocation Required. The border location.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.getBorder = function (borderLocation) {
            /* Begin_PlaceHolder_TableRow_GetBorder */
            /* End_PlaceHolder_TableRow_GetBorder */
            return new Word.TableBorder(this.context, _createMethodObjectPath(this.context, this, "GetBorder", 1 /* Read */, [borderLocation], false, false, null));
        };
        /**
         *
         * Gets cell padding in points.
         *
         * @param cellPaddingLocation Required. The cell padding location can be 'Top', 'Left', 'Bottom' or 'Right'.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.getCellPadding = function (cellPaddingLocation) {
            /* Begin_PlaceHolder_TableRow_GetCellPadding */
            /* End_PlaceHolder_TableRow_GetCellPadding */
            var action = _createMethodAction(this.context, this, "GetCellPadding", 1 /* Read */, [cellPaddingLocation]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the next row.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.getNext = function () {
            /* Begin_PlaceHolder_TableRow_GetNext */
            /* End_PlaceHolder_TableRow_GetNext */
            return new Word.TableRow(this.context, _createMethodObjectPath(this.context, this, "GetNext", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Inserts rows using this row as a template. If values are specified, inserts the values into the new rows.
         *
         * @param insertLocation Required. Where the new rows should be inserted, relative to the current row. It can be 'Before' or 'After'.
         * @param rowCount Required. Number of rows to add
         * @param values Optional. Strings to insert in the new rows, specified as a 2D array. The number of cells in each row must not exceed the number of cells in the existing row.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.insertRows = function (insertLocation, rowCount, values) {
            /* Begin_PlaceHolder_TableRow_InsertRows */
            /* End_PlaceHolder_TableRow_InsertRows */
            return new Word.TableRowCollection(this.context, _createMethodObjectPath(this.context, this, "InsertRows", 1 /* Read */, [insertLocation, rowCount, values], true, false, null));
        };
        /**
         *
         * Merges the row into one cell.
         *
         * [Api set: WordApi 1.4]
         */
        TableRow.prototype.merge = function () {
            /* Begin_PlaceHolder_TableRow_Merge */
            /* End_PlaceHolder_TableRow_Merge */
            return new Word.TableCell(this.context, _createMethodObjectPath(this.context, this, "Merge", 0 /* Default */, [], false, false, null));
        };
        /**
         *
         * Performs a search with the specified searchOptions on the scope of the row. The search results are a collection of range objects.
         *
         * @param searchText Required. The search text.
         * @param searchOptions Optional. Options for the search.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.search = function (searchText, searchOptions) {
            /* Begin_PlaceHolder_TableRow_Search */
            /* End_PlaceHolder_TableRow_Search */
            return new Word.RangeCollection(this.context, _createMethodObjectPath(this.context, this, "Search", 1 /* Read */, [searchText, searchOptions], true, true, null));
        };
        /**
         *
         * Selects the row and navigates the Word UI to it.
         *
         * @param selectionMode Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.select = function (selectionMode) {
            /* Begin_PlaceHolder_TableRow_Select */
            /* End_PlaceHolder_TableRow_Select */
            _createMethodAction(this.context, this, "Select", 1 /* Read */, [selectionMode]);
        };
        /**
         *
         * Sets cell padding in points.
         *
         * @param cellPaddingLocation Required. The cell padding location can be 'Top', 'Left', 'Bottom' or 'Right'.
         *
         * [Api set: WordApi 1.3]
         */
        TableRow.prototype.setCellPadding = function (cellPaddingLocation, cellPadding) {
            /* Begin_PlaceHolder_TableRow_SetCellPadding */
            /* End_PlaceHolder_TableRow_SetCellPadding */
            _createMethodAction(this.context, this, "SetCellPadding", 0 /* Default */, [cellPaddingLocation, cellPadding]);
        };
        TableRow.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_TableRow__KeepReference */
            /* End_PlaceHolder_TableRow__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        TableRow.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["CellCount"])) {
                this.m_cellCount = obj["CellCount"];
            }
            if (!_isUndefined(obj["HorizontalAlignment"])) {
                this.m_horizontalAlignment = obj["HorizontalAlignment"];
            }
            if (!_isUndefined(obj["IsHeader"])) {
                this.m_isHeader = obj["IsHeader"];
            }
            if (!_isUndefined(obj["PreferredHeight"])) {
                this.m_preferredHeight = obj["PreferredHeight"];
            }
            if (!_isUndefined(obj["RowIndex"])) {
                this.m_rowIndex = obj["RowIndex"];
            }
            if (!_isUndefined(obj["ShadingColor"])) {
                this.m_shadingColor = obj["ShadingColor"];
            }
            if (!_isUndefined(obj["Values"])) {
                this.m_values = obj["Values"];
            }
            if (!_isUndefined(obj["VerticalAlignment"])) {
                this.m_verticalAlignment = obj["VerticalAlignment"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.m__Id = obj["_Id"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["cells", "Cells", "font", "Font", "parentTable", "ParentTable"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        TableRow.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        TableRow.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["_Id"])) {
                this.m__Id = value["_Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        TableRow.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        TableRow.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        TableRow.prototype.toJSON = function () {
            return {
                "cellCount": this.m_cellCount,
                "font": this.m_font,
                "horizontalAlignment": this.m_horizontalAlignment,
                "isHeader": this.m_isHeader,
                "preferredHeight": this.m_preferredHeight,
                "rowIndex": this.m_rowIndex,
                "shadingColor": this.m_shadingColor,
                "values": this.m_values,
                "verticalAlignment": this.m_verticalAlignment
            };
        };
        return TableRow;
    })(OfficeExtension.ClientObject);
    Word.TableRow = TableRow;
    /**
     *
     * Contains the collection of the document's TableRow objects.
     *
     * [Api set: WordApi 1.3]
     */
    var TableRowCollection = (function (_super) {
        __extends(TableRowCollection, _super);
        function TableRowCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TableRowCollection.prototype, "items", {
            /* Begin_PlaceHolder_TableRowCollection_Custom_Members */
            /* End_PlaceHolder_TableRowCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_TableRowCollection_items */
                /* End_PlaceHolder_TableRowCollection_items */
                _throwIfNotLoaded("items", this.m__items, "TableRowCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRowCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableRowCollection__ReferenceId_get */
                /* End_PlaceHolder_TableRowCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "TableRowCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the first row in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        TableRowCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_TableRowCollection_GetFirst */
            /* End_PlaceHolder_TableRowCollection_GetFirst */
            return new Word.TableRow(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a table row object by its index in the collection.
         *
         * @param index A number that identifies the index location of a table row object.
         *
         * [Api set: WordApi 1.3]
         */
        TableRowCollection.prototype._GetItem = function (index) {
            /* Begin_PlaceHolder_TableRowCollection__GetItem */
            /* End_PlaceHolder_TableRowCollection__GetItem */
            return new Word.TableRow(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        TableRowCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_TableRowCollection__KeepReference */
            /* End_PlaceHolder_TableRowCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        TableRowCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.TableRow(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        TableRowCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        TableRowCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        TableRowCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        TableRowCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        TableRowCollection.prototype.toJSON = function () {
            return {};
        };
        return TableRowCollection;
    })(OfficeExtension.ClientObject);
    Word.TableRowCollection = TableRowCollection;
    /**
     *
     * Represents a table cell in a Word document.
     *
     * [Api set: WordApi 1.3]
     */
    var TableCell = (function (_super) {
        __extends(TableCell, _super);
        function TableCell() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TableCell.prototype, "body", {
            /* Begin_PlaceHolder_TableCell_Custom_Members */
            /* End_PlaceHolder_TableCell_Custom_Members */
            /**
             *
             * Gets the body object of the cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_Body_get */
                /* End_PlaceHolder_TableCell_Body_get */
                if (!this.m_body) {
                    this.m_body = new Word.Body(this.context, _createPropertyObjectPath(this.context, this, "Body", false, false));
                }
                return this.m_body;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "parentRow", {
            /**
             *
             * Gets the parent row of the cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_ParentRow_get */
                /* End_PlaceHolder_TableCell_ParentRow_get */
                if (!this.m_parentRow) {
                    this.m_parentRow = new Word.TableRow(this.context, _createPropertyObjectPath(this.context, this, "ParentRow", false, false));
                }
                return this.m_parentRow;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "parentTable", {
            /**
             *
             * Gets the parent table of the cell. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_ParentTable_get */
                /* End_PlaceHolder_TableCell_ParentTable_get */
                if (!this.m_parentTable) {
                    this.m_parentTable = new Word.Table(this.context, _createPropertyObjectPath(this.context, this, "ParentTable", false, false));
                }
                return this.m_parentTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "cellIndex", {
            /**
             *
             * Gets the index of the cell in its row. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_CellIndex_get */
                /* End_PlaceHolder_TableCell_CellIndex_get */
                _throwIfNotLoaded("cellIndex", this.m_cellIndex, "TableCell", this._isNull);
                return this.m_cellIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "columnWidth", {
            /**
             *
             * Gets and sets the width of the cell's column in points. This is applicable to uniform tables.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_ColumnWidth_get */
                /* End_PlaceHolder_TableCell_ColumnWidth_get */
                _throwIfNotLoaded("columnWidth", this.m_columnWidth, "TableCell", this._isNull);
                return this.m_columnWidth;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableCell_ColumnWidth_set */
                /* End_PlaceHolder_TableCell_ColumnWidth_set */
                this.m_columnWidth = value;
                _createSetPropertyAction(this.context, this, "ColumnWidth", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "horizontalAlignment", {
            /**
             *
             * Gets and sets the horizontal alignment of the cell. The value can be 'left', 'centered', 'right', or 'justified'.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_HorizontalAlignment_get */
                /* End_PlaceHolder_TableCell_HorizontalAlignment_get */
                _throwIfNotLoaded("horizontalAlignment", this.m_horizontalAlignment, "TableCell", this._isNull);
                return this.m_horizontalAlignment;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableCell_HorizontalAlignment_set */
                /* End_PlaceHolder_TableCell_HorizontalAlignment_set */
                this.m_horizontalAlignment = value;
                _createSetPropertyAction(this.context, this, "HorizontalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "rowIndex", {
            /**
             *
             * Gets the index of the cell's row in the table. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_RowIndex_get */
                /* End_PlaceHolder_TableCell_RowIndex_get */
                _throwIfNotLoaded("rowIndex", this.m_rowIndex, "TableCell", this._isNull);
                return this.m_rowIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "shadingColor", {
            /**
             *
             * Gets or sets the shading color of the cell. Color is specified in "#RRGGBB" format or by using the color name.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_ShadingColor_get */
                /* End_PlaceHolder_TableCell_ShadingColor_get */
                _throwIfNotLoaded("shadingColor", this.m_shadingColor, "TableCell", this._isNull);
                return this.m_shadingColor;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableCell_ShadingColor_set */
                /* End_PlaceHolder_TableCell_ShadingColor_set */
                this.m_shadingColor = value;
                _createSetPropertyAction(this.context, this, "ShadingColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "value", {
            /**
             *
             * Gets and sets the text of the cell.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_Value_get */
                /* End_PlaceHolder_TableCell_Value_get */
                _throwIfNotLoaded("value", this.m_value, "TableCell", this._isNull);
                return this.m_value;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableCell_Value_set */
                /* End_PlaceHolder_TableCell_Value_set */
                this.m_value = value;
                _createSetPropertyAction(this.context, this, "Value", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "verticalAlignment", {
            /**
             *
             * Gets and sets the vertical alignment of the cell. The value can be 'top', 'center' or 'bottom'.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_VerticalAlignment_get */
                /* End_PlaceHolder_TableCell_VerticalAlignment_get */
                _throwIfNotLoaded("verticalAlignment", this.m_verticalAlignment, "TableCell", this._isNull);
                return this.m_verticalAlignment;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableCell_VerticalAlignment_set */
                /* End_PlaceHolder_TableCell_VerticalAlignment_set */
                this.m_verticalAlignment = value;
                _createSetPropertyAction(this.context, this, "VerticalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "width", {
            /**
             *
             * Gets the width of the cell in points. Read-only.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell_Width_get */
                /* End_PlaceHolder_TableCell_Width_get */
                _throwIfNotLoaded("width", this.m_width, "TableCell", this._isNull);
                return this.m_width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "_Id", {
            /**
             *
             * ID
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell__Id_get */
                /* End_PlaceHolder_TableCell__Id_get */
                _throwIfNotLoaded("_Id", this.m__Id, "TableCell", this._isNull);
                return this.m__Id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCell__ReferenceId_get */
                /* End_PlaceHolder_TableCell__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "TableCell", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Deletes the column containing this cell. This is applicable to uniform tables.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.deleteColumn = function () {
            /* Begin_PlaceHolder_TableCell_DeleteColumn */
            /* End_PlaceHolder_TableCell_DeleteColumn */
            _createMethodAction(this.context, this, "DeleteColumn", 0 /* Default */, []);
        };
        /**
         *
         * Deletes the row containing this cell.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.deleteRow = function () {
            /* Begin_PlaceHolder_TableCell_DeleteRow */
            /* End_PlaceHolder_TableCell_DeleteRow */
            _createMethodAction(this.context, this, "DeleteRow", 0 /* Default */, []);
        };
        /**
         *
         * Gets the border style for the specified border.
         *
         * @param borderLocation Required. The border location.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.getBorder = function (borderLocation) {
            /* Begin_PlaceHolder_TableCell_GetBorder */
            /* End_PlaceHolder_TableCell_GetBorder */
            return new Word.TableBorder(this.context, _createMethodObjectPath(this.context, this, "GetBorder", 1 /* Read */, [borderLocation], false, false, null));
        };
        /**
         *
         * Gets cell padding in points.
         *
         * @param cellPaddingLocation Required. The cell padding location can be 'Top', 'Left', 'Bottom' or 'Right'.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.getCellPadding = function (cellPaddingLocation) {
            /* Begin_PlaceHolder_TableCell_GetCellPadding */
            /* End_PlaceHolder_TableCell_GetCellPadding */
            var action = _createMethodAction(this.context, this, "GetCellPadding", 1 /* Read */, [cellPaddingLocation]);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        /**
         *
         * Gets the next cell.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.getNext = function () {
            /* Begin_PlaceHolder_TableCell_GetNext */
            /* End_PlaceHolder_TableCell_GetNext */
            return new Word.TableCell(this.context, _createMethodObjectPath(this.context, this, "GetNext", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Adds columns to the left or right of the cell, using the cell's column as a template. This is applicable to uniform tables. The string values, if specified, are set in the newly inserted rows.
         *
         * @param insertLocation Required. It can be 'Before' or 'After'.
         * @param columnCount Required. Number of columns to add
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.insertColumns = function (insertLocation, columnCount, values) {
            /* Begin_PlaceHolder_TableCell_InsertColumns */
            /* End_PlaceHolder_TableCell_InsertColumns */
            _createMethodAction(this.context, this, "InsertColumns", 0 /* Default */, [insertLocation, columnCount, values]);
        };
        /**
         *
         * Inserts rows above or below the cell, using the cell's row as a template. The string values, if specified, are set in the newly inserted rows.
         *
         * @param insertLocation Required. It can be 'Before' or 'After'.
         * @param rowCount Required. Number of rows to add.
         * @param values Optional 2D array. Cells are filled if the corresponding strings are specified in the array.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.insertRows = function (insertLocation, rowCount, values) {
            /* Begin_PlaceHolder_TableCell_InsertRows */
            /* End_PlaceHolder_TableCell_InsertRows */
            return new Word.TableRowCollection(this.context, _createMethodObjectPath(this.context, this, "InsertRows", 0 /* Default */, [insertLocation, rowCount, values], true, false, null));
        };
        /**
         *
         * Sets cell padding in points.
         *
         * @param cellPaddingLocation Required. The cell padding location can be 'Top', 'Left', 'Bottom' or 'Right'.
         *
         * [Api set: WordApi 1.3]
         */
        TableCell.prototype.setCellPadding = function (cellPaddingLocation, cellPadding) {
            /* Begin_PlaceHolder_TableCell_SetCellPadding */
            /* End_PlaceHolder_TableCell_SetCellPadding */
            _createMethodAction(this.context, this, "SetCellPadding", 0 /* Default */, [cellPaddingLocation, cellPadding]);
        };
        /**
         *
         * Adds columns to the left or right of the cell, using the existing column as a template. The string values, if specified, are set in the newly inserted rows.
         *
         * @param rowCount Required. The number of rows to split into. Must be a divisor of the number of underlying rows.
         * @param columnCount Required. The number of columns to split into.
         *
         * [Api set: WordApi 1.4]
         */
        TableCell.prototype.split = function (rowCount, columnCount) {
            /* Begin_PlaceHolder_TableCell_Split */
            /* End_PlaceHolder_TableCell_Split */
            _createMethodAction(this.context, this, "Split", 0 /* Default */, [rowCount, columnCount]);
        };
        TableCell.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_TableCell__KeepReference */
            /* End_PlaceHolder_TableCell__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        TableCell.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["CellIndex"])) {
                this.m_cellIndex = obj["CellIndex"];
            }
            if (!_isUndefined(obj["ColumnWidth"])) {
                this.m_columnWidth = obj["ColumnWidth"];
            }
            if (!_isUndefined(obj["HorizontalAlignment"])) {
                this.m_horizontalAlignment = obj["HorizontalAlignment"];
            }
            if (!_isUndefined(obj["RowIndex"])) {
                this.m_rowIndex = obj["RowIndex"];
            }
            if (!_isUndefined(obj["ShadingColor"])) {
                this.m_shadingColor = obj["ShadingColor"];
            }
            if (!_isUndefined(obj["Value"])) {
                this.m_value = obj["Value"];
            }
            if (!_isUndefined(obj["VerticalAlignment"])) {
                this.m_verticalAlignment = obj["VerticalAlignment"];
            }
            if (!_isUndefined(obj["Width"])) {
                this.m_width = obj["Width"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.m__Id = obj["_Id"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            _handleNavigationPropertyResults(this, obj, ["body", "Body", "parentRow", "ParentRow", "parentTable", "ParentTable"]);
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        TableCell.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        TableCell.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
            if (!_isUndefined(value["_Id"])) {
                this.m__Id = value["_Id"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        TableCell.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        TableCell.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        TableCell.prototype.toJSON = function () {
            return {
                "body": this.m_body,
                "cellIndex": this.m_cellIndex,
                "columnWidth": this.m_columnWidth,
                "horizontalAlignment": this.m_horizontalAlignment,
                "rowIndex": this.m_rowIndex,
                "shadingColor": this.m_shadingColor,
                "value": this.m_value,
                "verticalAlignment": this.m_verticalAlignment,
                "width": this.m_width
            };
        };
        return TableCell;
    })(OfficeExtension.ClientObject);
    Word.TableCell = TableCell;
    /**
     *
     * Contains the collection of the document's TableCell objects.
     *
     * [Api set: WordApi 1.3]
     */
    var TableCellCollection = (function (_super) {
        __extends(TableCellCollection, _super);
        function TableCellCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TableCellCollection.prototype, "items", {
            /* Begin_PlaceHolder_TableCellCollection_Custom_Members */
            /* End_PlaceHolder_TableCellCollection_Custom_Members */
            /** Gets the loaded child items in this collection. */
            get: function () {
                /* Begin_PlaceHolder_TableCellCollection_items */
                /* End_PlaceHolder_TableCellCollection_items */
                _throwIfNotLoaded("items", this.m__items, "TableCellCollection", this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCellCollection.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableCellCollection__ReferenceId_get */
                /* End_PlaceHolder_TableCellCollection__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "TableCellCollection", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Gets the first table cell in this collection.
         *
         * [Api set: WordApi 1.3]
         */
        TableCellCollection.prototype.getFirst = function () {
            /* Begin_PlaceHolder_TableCellCollection_GetFirst */
            /* End_PlaceHolder_TableCellCollection_GetFirst */
            return new Word.TableCell(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1 /* Read */, [], false, false, null));
        };
        /**
         *
         * Gets a table cell object by its index in the collection.
         *
         * @param index A number that identifies the index location of a table cell object.
         *
         * [Api set: WordApi 1.3]
         */
        TableCellCollection.prototype._GetItem = function (index) {
            /* Begin_PlaceHolder_TableCellCollection__GetItem */
            /* End_PlaceHolder_TableCellCollection__GetItem */
            return new Word.TableCell(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        TableCellCollection.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_TableCellCollection__KeepReference */
            /* End_PlaceHolder_TableCellCollection__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        TableCellCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Word.TableCell(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        TableCellCollection.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        TableCellCollection.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        TableCellCollection.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        TableCellCollection.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        TableCellCollection.prototype.toJSON = function () {
            return {};
        };
        return TableCellCollection;
    })(OfficeExtension.ClientObject);
    Word.TableCellCollection = TableCellCollection;
    /**
     *
     * Specifies the border style
     *
     * [Api set: WordApi 1.3]
     */
    var TableBorder = (function (_super) {
        __extends(TableBorder, _super);
        function TableBorder() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TableBorder.prototype, "color", {
            /* Begin_PlaceHolder_TableBorder_Custom_Members */
            /* End_PlaceHolder_TableBorder_Custom_Members */
            /**
             *
             * Gets or sets the table border color, as a hex value or name.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableBorder_Color_get */
                /* End_PlaceHolder_TableBorder_Color_get */
                _throwIfNotLoaded("color", this.m_color, "TableBorder", this._isNull);
                return this.m_color;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableBorder_Color_set */
                /* End_PlaceHolder_TableBorder_Color_set */
                this.m_color = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableBorder.prototype, "type", {
            /**
             *
             * Gets or sets the type of the table border.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableBorder_Type_get */
                /* End_PlaceHolder_TableBorder_Type_get */
                _throwIfNotLoaded("type", this.m_type, "TableBorder", this._isNull);
                return this.m_type;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableBorder_Type_set */
                /* End_PlaceHolder_TableBorder_Type_set */
                this.m_type = value;
                _createSetPropertyAction(this.context, this, "Type", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableBorder.prototype, "width", {
            /**
             *
             * Gets or sets the width, in points, of the table border. Not applicable to table border types that have fixed widths.
             *
             * [Api set: WordApi 1.3]
             */
            get: function () {
                /* Begin_PlaceHolder_TableBorder_Width_get */
                /* End_PlaceHolder_TableBorder_Width_get */
                _throwIfNotLoaded("width", this.m_width, "TableBorder", this._isNull);
                return this.m_width;
            },
            set: function (value) {
                /* Begin_PlaceHolder_TableBorder_Width_set */
                /* End_PlaceHolder_TableBorder_Width_set */
                this.m_width = value;
                _createSetPropertyAction(this.context, this, "Width", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableBorder.prototype, "_ReferenceId", {
            /**
             *
             * ReferenceId
             *
             * [Api set: WordApi]
             */
            get: function () {
                /* Begin_PlaceHolder_TableBorder__ReferenceId_get */
                /* End_PlaceHolder_TableBorder__ReferenceId_get */
                _throwIfNotLoaded("_ReferenceId", this.m__ReferenceId, "TableBorder", this._isNull);
                return this.m__ReferenceId;
            },
            enumerable: true,
            configurable: true
        });
        TableBorder.prototype._KeepReference = function () {
            /* Begin_PlaceHolder_TableBorder__KeepReference */
            /* End_PlaceHolder_TableBorder__KeepReference */
            _createMethodAction(this.context, this, "_KeepReference", 1 /* Read */, []);
        };
        /** Handle results returned from the document
         * @private
         */
        TableBorder.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Color"])) {
                this.m_color = obj["Color"];
            }
            if (!_isUndefined(obj["Type"])) {
                this.m_type = obj["Type"];
            }
            if (!_isUndefined(obj["Width"])) {
                this.m_width = obj["Width"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.m__ReferenceId = obj["_ReferenceId"];
            }
        };
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        TableBorder.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        /** Handle identity results returned from the document
         * @private
         */
        TableBorder.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.m__ReferenceId = value["_ReferenceId"];
            }
        };
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        TableBorder.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        /**
         * Release the memory associated with this object, if has previous been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        TableBorder.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        TableBorder.prototype.toJSON = function () {
            return {
                "color": this.m_color,
                "type": this.m_type,
                "width": this.m_width
            };
        };
        return TableBorder;
    })(OfficeExtension.ClientObject);
    Word.TableBorder = TableBorder;
    /**
     *
     * Specifies supported content control types and subtypes.
     *
     * [Api set: WordApi]
     */
    var ContentControlType;
    (function (ContentControlType) {
        ContentControlType.unknown = "Unknown";
        ContentControlType.richTextInline = "RichTextInline";
        ContentControlType.richTextParagraphs = "RichTextParagraphs";
        ContentControlType.richTextTableCell = "RichTextTableCell";
        ContentControlType.richTextTableRow = "RichTextTableRow";
        ContentControlType.richTextTable = "RichTextTable";
        ContentControlType.plainTextInline = "PlainTextInline";
        ContentControlType.plainTextParagraph = "PlainTextParagraph";
        ContentControlType.picture = "Picture";
        ContentControlType.buildingBlockGallery = "BuildingBlockGallery";
        ContentControlType.checkBox = "CheckBox";
        ContentControlType.comboBox = "ComboBox";
        ContentControlType.dropDownList = "DropDownList";
        ContentControlType.datePicker = "DatePicker";
        ContentControlType.repeatingSection = "RepeatingSection";
        ContentControlType.richText = "RichText";
        ContentControlType.plainText = "PlainText";
    })(ContentControlType = Word.ContentControlType || (Word.ContentControlType = {}));
    /**
     *
     * ContentControl appearance
     *
     * [Api set: WordApi]
     */
    var ContentControlAppearance;
    (function (ContentControlAppearance) {
        ContentControlAppearance.boundingBox = "BoundingBox";
        ContentControlAppearance.tags = "Tags";
        ContentControlAppearance.hidden = "Hidden";
    })(ContentControlAppearance = Word.ContentControlAppearance || (Word.ContentControlAppearance = {}));
    /**
     *
     * Underline types
     *
     * [Api set: WordApi]
     */
    var UnderlineType;
    (function (UnderlineType) {
        UnderlineType.mixed = "Mixed";
        UnderlineType.none = "None";
        /**
         *
         * @deprecated Hidden is no longer supported.
         */
        UnderlineType.hidden = "Hidden";
        /**
         *
         * @deprecated DotLine is no longer supported.
         */
        UnderlineType.dotLine = "DotLine";
        UnderlineType.single = "Single";
        UnderlineType.word = "Word";
        UnderlineType.double = "Double";
        UnderlineType.thick = "Thick";
        UnderlineType.dotted = "Dotted";
        UnderlineType.dottedHeavy = "DottedHeavy";
        UnderlineType.dashLine = "DashLine";
        UnderlineType.dashLineHeavy = "DashLineHeavy";
        UnderlineType.dashLineLong = "DashLineLong";
        UnderlineType.dashLineLongHeavy = "DashLineLongHeavy";
        UnderlineType.dotDashLine = "DotDashLine";
        UnderlineType.dotDashLineHeavy = "DotDashLineHeavy";
        UnderlineType.twoDotDashLine = "TwoDotDashLine";
        UnderlineType.twoDotDashLineHeavy = "TwoDotDashLineHeavy";
        UnderlineType.wave = "Wave";
        UnderlineType.waveHeavy = "WaveHeavy";
        UnderlineType.waveDouble = "WaveDouble";
    })(UnderlineType = Word.UnderlineType || (Word.UnderlineType = {}));
    /**
     *
     * Page break, line break, and four section breaks
     *
     * [Api set: WordApi]
     */
    var BreakType;
    (function (BreakType) {
        /**
         *
         * Page break.
         *
         */
        BreakType.page = "Page";
        /**
         *
         * @deprecated Use sectionNext instead.
         */
        BreakType.next = "Next";
        /**
         *
         * Section break, with the new section starting on the next page.
         *
         */
        BreakType.sectionNext = "SectionNext";
        /**
         *
         * Section break, with the new section starting on the same page.
         *
         */
        BreakType.sectionContinuous = "SectionContinuous";
        /**
         *
         * Section break, with the new section starting on the next even-numbered page.
         *
         */
        BreakType.sectionEven = "SectionEven";
        /**
         *
         * Section break, with the new section starting on the next odd-numbered page.
         *
         */
        BreakType.sectionOdd = "SectionOdd";
        /**
         *
         * Line break.
         *
         */
        BreakType.line = "Line";
    })(BreakType = Word.BreakType || (Word.BreakType = {}));
    /**
     *
     * The insertion location types
     *
     * [Api set: WordApi]
     */
    var InsertLocation;
    (function (InsertLocation) {
        InsertLocation.before = "Before";
        InsertLocation.after = "After";
        InsertLocation.start = "Start";
        InsertLocation.end = "End";
        InsertLocation.replace = "Replace";
    })(InsertLocation = Word.InsertLocation || (Word.InsertLocation = {}));
    /**
     * [Api set: WordApi]
     */
    var Alignment;
    (function (Alignment) {
        Alignment.mixed = "Mixed";
        Alignment.unknown = "Unknown";
        Alignment.left = "Left";
        Alignment.centered = "Centered";
        Alignment.right = "Right";
        Alignment.justified = "Justified";
    })(Alignment = Word.Alignment || (Word.Alignment = {}));
    /**
     * [Api set: WordApi]
     */
    var HeaderFooterType;
    (function (HeaderFooterType) {
        HeaderFooterType.primary = "Primary";
        HeaderFooterType.firstPage = "FirstPage";
        HeaderFooterType.evenPages = "EvenPages";
    })(HeaderFooterType = Word.HeaderFooterType || (Word.HeaderFooterType = {}));
    /**
     * [Api set: WordApi]
     */
    var BodyType;
    (function (BodyType) {
        BodyType.unknown = "Unknown";
        BodyType.mainDoc = "MainDoc";
        BodyType.section = "Section";
        BodyType.header = "Header";
        BodyType.footer = "Footer";
        BodyType.tableCell = "TableCell";
    })(BodyType = Word.BodyType || (Word.BodyType = {}));
    /**
     * [Api set: WordApi]
     */
    var SelectionMode;
    (function (SelectionMode) {
        SelectionMode.select = "Select";
        SelectionMode.start = "Start";
        SelectionMode.end = "End";
    })(SelectionMode = Word.SelectionMode || (Word.SelectionMode = {}));
    /**
     * [Api set: WordApi]
     */
    var ImageFormat;
    (function (ImageFormat) {
        ImageFormat.unsupported = "Unsupported";
        ImageFormat.undefined = "Undefined";
        ImageFormat.bmp = "Bmp";
        ImageFormat.jpeg = "Jpeg";
        ImageFormat.gif = "Gif";
        ImageFormat.tiff = "Tiff";
        ImageFormat.png = "Png";
        ImageFormat.icon = "Icon";
        ImageFormat.exif = "Exif";
        ImageFormat.wmf = "Wmf";
        ImageFormat.emf = "Emf";
        ImageFormat.pict = "Pict";
        ImageFormat.pdf = "Pdf";
        ImageFormat.svg = "Svg";
    })(ImageFormat = Word.ImageFormat || (Word.ImageFormat = {}));
    /**
     * [Api set: WordApi]
     */
    var RangeLocation;
    (function (RangeLocation) {
        RangeLocation.whole = "Whole";
        RangeLocation.start = "Start";
        RangeLocation.end = "End";
        RangeLocation.before = "Before";
        RangeLocation.after = "After";
        RangeLocation.content = "Content";
    })(RangeLocation = Word.RangeLocation || (Word.RangeLocation = {}));
    /**
     * [Api set: WordApi]
     */
    var LocationRelation;
    (function (LocationRelation) {
        LocationRelation.unrelated = "Unrelated";
        LocationRelation.equal = "Equal";
        LocationRelation.containsStart = "ContainsStart";
        LocationRelation.containsEnd = "ContainsEnd";
        LocationRelation.contains = "Contains";
        LocationRelation.insideStart = "InsideStart";
        LocationRelation.insideEnd = "InsideEnd";
        LocationRelation.inside = "Inside";
        LocationRelation.adjacentBefore = "AdjacentBefore";
        LocationRelation.overlapsBefore = "OverlapsBefore";
        LocationRelation.before = "Before";
        LocationRelation.adjacentAfter = "AdjacentAfter";
        LocationRelation.overlapsAfter = "OverlapsAfter";
        LocationRelation.after = "After";
    })(LocationRelation = Word.LocationRelation || (Word.LocationRelation = {}));
    /**
     * [Api set: WordApi]
     */
    var BorderLocation;
    (function (BorderLocation) {
        BorderLocation.top = "Top";
        BorderLocation.left = "Left";
        BorderLocation.bottom = "Bottom";
        BorderLocation.right = "Right";
        BorderLocation.insideHorizontal = "InsideHorizontal";
        BorderLocation.insideVertical = "InsideVertical";
        BorderLocation.inside = "Inside";
        BorderLocation.outside = "Outside";
        BorderLocation.all = "All";
    })(BorderLocation = Word.BorderLocation || (Word.BorderLocation = {}));
    /**
     * [Api set: WordApi]
     */
    var CellPaddingLocation;
    (function (CellPaddingLocation) {
        CellPaddingLocation.top = "Top";
        CellPaddingLocation.left = "Left";
        CellPaddingLocation.bottom = "Bottom";
        CellPaddingLocation.right = "Right";
    })(CellPaddingLocation = Word.CellPaddingLocation || (Word.CellPaddingLocation = {}));
    /**
     * [Api set: WordApi]
     */
    var BorderType;
    (function (BorderType) {
        BorderType.mixed = "Mixed";
        BorderType.none = "None";
        BorderType.single = "Single";
        BorderType.double = "Double";
        BorderType.dotted = "Dotted";
        BorderType.dashed = "Dashed";
        BorderType.dotDashed = "DotDashed";
        BorderType.dot2Dashed = "Dot2Dashed";
        BorderType.triple = "Triple";
        BorderType.thinThickSmall = "ThinThickSmall";
        BorderType.thickThinSmall = "ThickThinSmall";
        BorderType.thinThickThinSmall = "ThinThickThinSmall";
        BorderType.thinThickMed = "ThinThickMed";
        BorderType.thickThinMed = "ThickThinMed";
        BorderType.thinThickThinMed = "ThinThickThinMed";
        BorderType.thinThickLarge = "ThinThickLarge";
        BorderType.thickThinLarge = "ThickThinLarge";
        BorderType.thinThickThinLarge = "ThinThickThinLarge";
        BorderType.wave = "Wave";
        BorderType.doubleWave = "DoubleWave";
        BorderType.dashedSmall = "DashedSmall";
        BorderType.dashDotStroked = "DashDotStroked";
        BorderType.threeDEmboss = "ThreeDEmboss";
        BorderType.threeDEngrave = "ThreeDEngrave";
    })(BorderType = Word.BorderType || (Word.BorderType = {}));
    /**
     * [Api set: WordApi]
     */
    var VerticalAlignment;
    (function (VerticalAlignment) {
        VerticalAlignment.mixed = "Mixed";
        VerticalAlignment.top = "Top";
        VerticalAlignment.center = "Center";
        VerticalAlignment.bottom = "Bottom";
    })(VerticalAlignment = Word.VerticalAlignment || (Word.VerticalAlignment = {}));
    /**
     * [Api set: WordApi]
     */
    var ListLevelType;
    (function (ListLevelType) {
        ListLevelType.bullet = "Bullet";
        ListLevelType.number = "Number";
        ListLevelType.picture = "Picture";
    })(ListLevelType = Word.ListLevelType || (Word.ListLevelType = {}));
    /**
     * [Api set: WordApi]
     */
    var ListBullet;
    (function (ListBullet) {
        ListBullet.custom = "Custom";
        ListBullet.solid = "Solid";
        ListBullet.hollow = "Hollow";
        ListBullet.square = "Square";
        ListBullet.diamonds = "Diamonds";
        ListBullet.arrow = "Arrow";
        ListBullet.checkmark = "Checkmark";
    })(ListBullet = Word.ListBullet || (Word.ListBullet = {}));
    /**
     * [Api set: WordApi]
     */
    var ListNumbering;
    (function (ListNumbering) {
        ListNumbering.none = "None";
        ListNumbering.arabic = "Arabic";
        ListNumbering.upperRoman = "UpperRoman";
        ListNumbering.lowerRoman = "LowerRoman";
        ListNumbering.upperLetter = "UpperLetter";
        ListNumbering.lowerLetter = "LowerLetter";
    })(ListNumbering = Word.ListNumbering || (Word.ListNumbering = {}));
    /**
     * [Api set: WordApi]
     */
    var Style;
    (function (Style) {
        /**
         *
         * Mixed styles or other style not in this list.
         *
         */
        Style.other = "Other";
        /**
         *
         * Reset character and paragraph style to default.
         *
         */
        Style.normal = "Normal";
        Style.heading1 = "Heading1";
        Style.heading2 = "Heading2";
        Style.heading3 = "Heading3";
        Style.heading4 = "Heading4";
        Style.heading5 = "Heading5";
        Style.heading6 = "Heading6";
        Style.heading7 = "Heading7";
        Style.heading8 = "Heading8";
        Style.heading9 = "Heading9";
        /**
         *
         * Table-of-content level 1.
         *
         */
        Style.toc1 = "Toc1";
        /**
         *
         * Table-of-content level 2.
         *
         */
        Style.toc2 = "Toc2";
        /**
         *
         * Table-of-content level 3.
         *
         */
        Style.toc3 = "Toc3";
        /**
         *
         * Table-of-content level 4.
         *
         */
        Style.toc4 = "Toc4";
        /**
         *
         * Table-of-content level 5.
         *
         */
        Style.toc5 = "Toc5";
        /**
         *
         * Table-of-content level 6.
         *
         */
        Style.toc6 = "Toc6";
        /**
         *
         * Table-of-content level 7.
         *
         */
        Style.toc7 = "Toc7";
        /**
         *
         * Table-of-content level 8.
         *
         */
        Style.toc8 = "Toc8";
        /**
         *
         * Table-of-content level 9.
         *
         */
        Style.toc9 = "Toc9";
        Style.footnoteText = "FootnoteText";
        Style.header = "Header";
        Style.footer = "Footer";
        Style.caption = "Caption";
        Style.footnoteReference = "FootnoteReference";
        Style.endnoteReference = "EndnoteReference";
        Style.endnoteText = "EndnoteText";
        Style.title = "Title";
        Style.subtitle = "Subtitle";
        Style.hyperlink = "Hyperlink";
        Style.strong = "Strong";
        Style.emphasis = "Emphasis";
        Style.noSpacing = "NoSpacing";
        Style.listParagraph = "ListParagraph";
        Style.quote = "Quote";
        Style.intenseQuote = "IntenseQuote";
        Style.subtleEmphasis = "SubtleEmphasis";
        Style.intenseEmphasis = "IntenseEmphasis";
        Style.subtleReference = "SubtleReference";
        Style.intenseReference = "IntenseReference";
        Style.bookTitle = "BookTitle";
        Style.bibliography = "Bibliography";
        /**
         *
         * Table-of-content heading.
         *
         */
        Style.tocHeading = "TocHeading";
        Style.tableGrid = "TableGrid";
        Style.plainTable1 = "PlainTable1";
        Style.plainTable2 = "PlainTable2";
        Style.plainTable3 = "PlainTable3";
        Style.plainTable4 = "PlainTable4";
        Style.plainTable5 = "PlainTable5";
        Style.tableGridLight = "TableGridLight";
        Style.gridTable1Light = "GridTable1Light";
        Style.gridTable1Light_Accent1 = "GridTable1Light_Accent1";
        Style.gridTable1Light_Accent2 = "GridTable1Light_Accent2";
        Style.gridTable1Light_Accent3 = "GridTable1Light_Accent3";
        Style.gridTable1Light_Accent4 = "GridTable1Light_Accent4";
        Style.gridTable1Light_Accent5 = "GridTable1Light_Accent5";
        Style.gridTable1Light_Accent6 = "GridTable1Light_Accent6";
        Style.gridTable2 = "GridTable2";
        Style.gridTable2_Accent1 = "GridTable2_Accent1";
        Style.gridTable2_Accent2 = "GridTable2_Accent2";
        Style.gridTable2_Accent3 = "GridTable2_Accent3";
        Style.gridTable2_Accent4 = "GridTable2_Accent4";
        Style.gridTable2_Accent5 = "GridTable2_Accent5";
        Style.gridTable2_Accent6 = "GridTable2_Accent6";
        Style.gridTable3 = "GridTable3";
        Style.gridTable3_Accent1 = "GridTable3_Accent1";
        Style.gridTable3_Accent2 = "GridTable3_Accent2";
        Style.gridTable3_Accent3 = "GridTable3_Accent3";
        Style.gridTable3_Accent4 = "GridTable3_Accent4";
        Style.gridTable3_Accent5 = "GridTable3_Accent5";
        Style.gridTable3_Accent6 = "GridTable3_Accent6";
        Style.gridTable4 = "GridTable4";
        Style.gridTable4_Accent1 = "GridTable4_Accent1";
        Style.gridTable4_Accent2 = "GridTable4_Accent2";
        Style.gridTable4_Accent3 = "GridTable4_Accent3";
        Style.gridTable4_Accent4 = "GridTable4_Accent4";
        Style.gridTable4_Accent5 = "GridTable4_Accent5";
        Style.gridTable4_Accent6 = "GridTable4_Accent6";
        Style.gridTable5Dark = "GridTable5Dark";
        Style.gridTable5Dark_Accent1 = "GridTable5Dark_Accent1";
        Style.gridTable5Dark_Accent2 = "GridTable5Dark_Accent2";
        Style.gridTable5Dark_Accent3 = "GridTable5Dark_Accent3";
        Style.gridTable5Dark_Accent4 = "GridTable5Dark_Accent4";
        Style.gridTable5Dark_Accent5 = "GridTable5Dark_Accent5";
        Style.gridTable5Dark_Accent6 = "GridTable5Dark_Accent6";
        Style.gridTable6Colorful = "GridTable6Colorful";
        Style.gridTable6Colorful_Accent1 = "GridTable6Colorful_Accent1";
        Style.gridTable6Colorful_Accent2 = "GridTable6Colorful_Accent2";
        Style.gridTable6Colorful_Accent3 = "GridTable6Colorful_Accent3";
        Style.gridTable6Colorful_Accent4 = "GridTable6Colorful_Accent4";
        Style.gridTable6Colorful_Accent5 = "GridTable6Colorful_Accent5";
        Style.gridTable6Colorful_Accent6 = "GridTable6Colorful_Accent6";
        Style.gridTable7Colorful = "GridTable7Colorful";
        Style.gridTable7Colorful_Accent1 = "GridTable7Colorful_Accent1";
        Style.gridTable7Colorful_Accent2 = "GridTable7Colorful_Accent2";
        Style.gridTable7Colorful_Accent3 = "GridTable7Colorful_Accent3";
        Style.gridTable7Colorful_Accent4 = "GridTable7Colorful_Accent4";
        Style.gridTable7Colorful_Accent5 = "GridTable7Colorful_Accent5";
        Style.gridTable7Colorful_Accent6 = "GridTable7Colorful_Accent6";
        Style.listTable1Light = "ListTable1Light";
        Style.listTable1Light_Accent1 = "ListTable1Light_Accent1";
        Style.listTable1Light_Accent2 = "ListTable1Light_Accent2";
        Style.listTable1Light_Accent3 = "ListTable1Light_Accent3";
        Style.listTable1Light_Accent4 = "ListTable1Light_Accent4";
        Style.listTable1Light_Accent5 = "ListTable1Light_Accent5";
        Style.listTable1Light_Accent6 = "ListTable1Light_Accent6";
        Style.listTable2 = "ListTable2";
        Style.listTable2_Accent1 = "ListTable2_Accent1";
        Style.listTable2_Accent2 = "ListTable2_Accent2";
        Style.listTable2_Accent3 = "ListTable2_Accent3";
        Style.listTable2_Accent4 = "ListTable2_Accent4";
        Style.listTable2_Accent5 = "ListTable2_Accent5";
        Style.listTable2_Accent6 = "ListTable2_Accent6";
        Style.listTable3 = "ListTable3";
        Style.listTable3_Accent1 = "ListTable3_Accent1";
        Style.listTable3_Accent2 = "ListTable3_Accent2";
        Style.listTable3_Accent3 = "ListTable3_Accent3";
        Style.listTable3_Accent4 = "ListTable3_Accent4";
        Style.listTable3_Accent5 = "ListTable3_Accent5";
        Style.listTable3_Accent6 = "ListTable3_Accent6";
        Style.listTable4 = "ListTable4";
        Style.listTable4_Accent1 = "ListTable4_Accent1";
        Style.listTable4_Accent2 = "ListTable4_Accent2";
        Style.listTable4_Accent3 = "ListTable4_Accent3";
        Style.listTable4_Accent4 = "ListTable4_Accent4";
        Style.listTable4_Accent5 = "ListTable4_Accent5";
        Style.listTable4_Accent6 = "ListTable4_Accent6";
        Style.listTable5Dark = "ListTable5Dark";
        Style.listTable5Dark_Accent1 = "ListTable5Dark_Accent1";
        Style.listTable5Dark_Accent2 = "ListTable5Dark_Accent2";
        Style.listTable5Dark_Accent3 = "ListTable5Dark_Accent3";
        Style.listTable5Dark_Accent4 = "ListTable5Dark_Accent4";
        Style.listTable5Dark_Accent5 = "ListTable5Dark_Accent5";
        Style.listTable5Dark_Accent6 = "ListTable5Dark_Accent6";
        Style.listTable6Colorful = "ListTable6Colorful";
        Style.listTable6Colorful_Accent1 = "ListTable6Colorful_Accent1";
        Style.listTable6Colorful_Accent2 = "ListTable6Colorful_Accent2";
        Style.listTable6Colorful_Accent3 = "ListTable6Colorful_Accent3";
        Style.listTable6Colorful_Accent4 = "ListTable6Colorful_Accent4";
        Style.listTable6Colorful_Accent5 = "ListTable6Colorful_Accent5";
        Style.listTable6Colorful_Accent6 = "ListTable6Colorful_Accent6";
        Style.listTable7Colorful = "ListTable7Colorful";
        Style.listTable7Colorful_Accent1 = "ListTable7Colorful_Accent1";
        Style.listTable7Colorful_Accent2 = "ListTable7Colorful_Accent2";
        Style.listTable7Colorful_Accent3 = "ListTable7Colorful_Accent3";
        Style.listTable7Colorful_Accent4 = "ListTable7Colorful_Accent4";
        Style.listTable7Colorful_Accent5 = "ListTable7Colorful_Accent5";
        Style.listTable7Colorful_Accent6 = "ListTable7Colorful_Accent6";
    })(Style = Word.Style || (Word.Style = {}));
    /**
     * [Api set: WordApi]
     */
    var DocumentPropertyType;
    (function (DocumentPropertyType) {
        DocumentPropertyType.string = "String";
        DocumentPropertyType.number = "Number";
        DocumentPropertyType.date = "Date";
        DocumentPropertyType.boolean = "Boolean";
    })(DocumentPropertyType = Word.DocumentPropertyType || (Word.DocumentPropertyType = {}));
    var ErrorCodes;
    (function (ErrorCodes) {
        ErrorCodes.accessDenied = "AccessDenied";
        ErrorCodes.generalException = "GeneralException";
        ErrorCodes.invalidArgument = "InvalidArgument";
        ErrorCodes.itemNotFound = "ItemNotFound";
        ErrorCodes.notImplemented = "NotImplemented";
    })(ErrorCodes = Word.ErrorCodes || (Word.ErrorCodes = {}));
})(Word || (Word = {})); // Word
/* Begin_PlaceHolder_GlobalFooter */
/* End_PlaceHolder_GlobalFooter */
var Word;
(function (Word) {
    /**
     * The RequestContext object facilitates requests to the Word application. Since the Office add-in and the Word application run in two different processes, the request context is required to get access to the Word object model from the add-in.
     */
    var RequestContext = (function (_super) {
        __extends(RequestContext, _super);
        function RequestContext(url) {
            _super.call(this, url);
            this.m_document = new Word.Document(this, OfficeExtension.ObjectPathFactory.createGlobalObjectObjectPath(this));
            this._rootObject = this.m_document;
        }
        Object.defineProperty(RequestContext.prototype, "document", {
            get: function () {
                return this.m_document;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RequestContext.prototype, "application", {
            get: function () {
                if (this.m_application == null) {
                    this.m_application = new Word.Application(this, OfficeExtension.ObjectPathFactory.createNewObjectObjectPath(this, "Microsoft.WordServices.Application", false));
                }
                return this.m_application;
            },
            enumerable: true,
            configurable: true
        });
        return RequestContext;
    })(OfficeExtension.ClientRequestContext);
    Word.RequestContext = RequestContext;
    function run(arg1, arg2) {
        return OfficeExtension.ClientRequestContext._runBatch("Word.run", arguments, function () { return new Word.RequestContext(); });
    }
    Word.run = run;
})(Word || (Word = {}));
exports.Word = Word;
exports.OfficeExtension = OfficeExtension;
