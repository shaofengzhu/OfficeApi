<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Helper.tt" #>
<#@ include file="Core.tt" #>
<#@ output extension=".txt" #>
<#+
	void WriteCSharp()
	{
		this.LaunchDebuggerIfNecessary();
		if (this.CheckInputParameters())
		{
			CodeGenTemplateFileManager templateFileManager = new CodeGenTemplateFileManager(this.GenerationEnvironment);
			templateFileManager.StartHeader();

#>
/*
 * This is a generated file. <#=this.CreatedByToolStatement#>
 * If there are content placeholders, only edit content inside content placeholders.
 * If there are no content placeholders, do not edit this file directly.
 */

<#+
			templateFileManager.EndBlock();

			XDocument xdoc;
			if (string.IsNullOrWhiteSpace(this.DocXmlFilePath))
			{
				xdoc = new XDocument();
			}
			else
			{
				xdoc = XDocument.Load(this.DocXmlFilePath);
			}

			AssemblyReader assemblyReader = new AssemblyReader(this.InputFilePath, null, this.ReferencedAssemblyPaths);
			assemblyReader.Process();

			foreach (ClientCallableTypeInfo type in assemblyReader.Types)
			{
				templateFileManager.StartNewFile(type.Name + ".cs");
				WriteType(type, xdoc, GetExistingFileContent(type.Name + ".cs"));
				templateFileManager.EndBlock();
			}

			templateFileManager.StartNewFile("ErrorCodes.cs");
			WriteErrorCode(assemblyReader.AllErrorCodes, GetExistingFileContent("ErrorCodes.cs"));
			
			templateFileManager.WriteTo(this.OutputDirectory, this.CheckoutCommandPrefix);
		}
	}

	private string[] GetExistingFileContent(string fileName)
    {
		string existingFilePath = System.IO.Path.Combine(this.OutputDirectory, fileName);
		string[] existingFileContent = new string[0];
		if (File.Exists(existingFilePath))
		{
			existingFileContent = File.ReadAllLines(existingFilePath);
		}

		return existingFileContent;
    }

	private void WriteErrorCode(IEnumerable<string> errorCodes, string[] existingFileContent)
	{
#>
using System;

public static class ErrorCodes
{
<#+
		foreach(string errorCode in errorCodes.OrderBy(s => s))
		{
#>
	public const string <#=errorCode#>: string = "<#=errorCode#>";
<#+
		}
#>
}

<#+
	}

	private void WriteType(ClientCallableTypeInfo type, XDocument xdoc, string[] existingFileContent)
	{
		if (type.IsEnum)
		{
			WriteEnumType(type, xdoc, existingFileContent);
		}
		else if (type.IsValueObject)
		{
			WriteClientValueObjectType(type, xdoc, existingFileContent);
		}
		else
		{
			WriteClientObjectType(type, xdoc, existingFileContent);
		}
	}

	private void WriteEnumType(ClientCallableTypeInfo type, XDocument xdoc, string[] existingFileContent)
	{
#>
namespace <#=type.Namespace#>
{
	using System;
<#+
		this.PushIndent(Constants.IndentString);
		this.WritePlaceHolderContent("UsingHeader", existingFileContent);
		this.WriteLine(string.Empty);
		this.WritePlaceHolderContent("Header", existingFileContent);
#>
public static class <#=type.Name#>
{
<#+
		this.PushIndent(Constants.IndentString);
		foreach (KeyValuePair<string, int> field in type.EnumFields)
		{
#>
public const string <#=field.Key#> = "<#=Utility.TrimUnderscore(field.Key)#>";
<#+
		}
		this.PopIndent();
#>
}
<#+
		this.PopIndent();
#>
}
<#+
	}

	private void WriteClientObjectType(ClientCallableTypeInfo type, XDocument xdoc, string[] existingFileContent)
	{
#>
namespace <#=type.Namespace#>
{
	using System;
<#+
		this.PushIndent(Constants.IndentString);
		this.WritePlaceHolderContent("UsingHeader", existingFileContent);
		this.WriteLine(string.Empty);
		this.WritePlaceHolderContent("Header", existingFileContent);
#>
public class <#=type.Name#>: <#=Constants.TypeFullNames.ClientObject#>
{
<#+
		this.PushIndent(Constants.IndentString);
		WriteTypeFields(type);
		this.WriteLine(string.Empty);
		this.WritePlaceHolderContent(type.Name + "_Custom_Members", existingFileContent);
		WriteConstructor(type, xdoc);
		WriteObjectProperties(type, xdoc);
		WriteScalarProperties(type, xdoc);
		WriteMethods(type, xdoc, existingFileContent);
		this.WriteLine(string.Empty);
		WriteHandleResult(type);
		WriteLoadMethod(type);
		if (type.AllowCreation)
		{
			this.WriteLine(string.Empty);
			WriteNewObject(type);
		}
		this.PopIndent();
#>
}
<#+ 
		this.PopIndent();
#>
}
<#+
	}

	private void WriteTypeFields(ClientCallableTypeInfo type)
	{
		foreach (ClientCallablePropertyInfo prop in type.Properties.Where(p => !p.IsVolatile && !p.ExcludedFromClientLibrary))
		{
#>
private <#=prop.PropertyType.CSharpTypeName#> <#=prop.FieldName#>;
<#+
		}

		if (type.ClientType.ChildItemClientType != null && type.ClientType.ChildItemClientType.IsClientObject)
		{
#>
private <#=type.ClientType.ChildItemClientType.CSharpTypeName#>[] m__items;
<#+
		}
	}

	private void WriteConstructor(ClientCallableTypeInfo type, XDocument xdoc)
    {
#>
public <#=type.Name#>(<#=Constants.TypeFullNames.ClientRequestContext#> context, <#=Constants.TypeFullNames.ObjectPath#> objectPath)
	: base(context, objectPath)
{
}

<#+
    }

	private void WriteObjectProperties(ClientCallableTypeInfo type, XDocument xdoc)
	{
		foreach (ClientCallablePropertyInfo prop in type.ObjectProperties.Where(p => !p.IsVolatile && !p.ExcludedFromClientLibrary))
		{
#>

public <#=prop.PropertyType.CSharpTypeName#> <#=prop.Name#>
{
	get
	{
		if (this.<#=prop.FieldName#> == null)
		{
			this.<#=prop.FieldName#> = new <#=prop.PropertyType.CSharpTypeName#>(this.Context, <#=Constants.CSharpMemberFullNames.CreatePropertyObjectPath#>(this.Context, this, "<#=prop.Name#>", <#=Utility.GetBooleanLiteral(prop.PropertyType.IsClientObjectCollection)#> /*isCollection*/, false /*isInvalidAfterRequest*/));	
		}

		return this.<#=prop.FieldName#>;
	}
<#+
			if (!prop.IsReadonly)
			{
#>

	set
	{
		this.<#=prop.FieldName#> = value;
		<#=Constants.CSharpMemberFullNames.CreateSetPropertyAction#>(this.Context, this, "<#=prop.Name#>", value);
	}
<#+	
			}
#>
}
<#+
		}

		foreach (ClientCallablePropertyInfo prop in type.ObjectProperties.Where(p => p.IsVolatile && !p.ExcludedFromClientLibrary))
		{
			this.WriteLine(string.Empty);
#>
public <#=prop.PropertyType.CSharpTypeName#> Get<#=prop.Name#>()
{
	return new <#=prop.PropertyType.CSharpTypeName#>(this.Context, <#=Constants.CSharpMemberFullNames.CreatePropertyObjectPath#>(this.Context, this, "<#=prop.Name#>", <#=Utility.GetBooleanLiteral(prop.PropertyType.IsClientObjectCollection)#> /*isCollection*/, <#=Utility.GetBooleanLiteral(prop.InvalidateReturnObjectPathAfterRequest)#> /*isInvalidAfterRequest*/));
}
<#+
			if (!prop.IsReadonly)
			{
				this.WriteLine(string.Empty);
#>
public void Set<#=prop.Name#>(<#=prop.PropertyType.CSharpTypeName#> value)
{
	<#=Constants.CSharpMemberFullNames.CreateSetPropertyAction#>(this.Context, this, "<#=prop.Name#>", value);
}
<#+
			}
		}

		// child items
		if (type.ClientType.ChildItemClientType != null && type.ClientType.ChildItemClientType.IsClientObject)
		{
#>

/* Gets the loaded child items in this collection. */
public <#=type.ClientType.ChildItemClientType.CSharpTypeName#>[] Items
{
	get
	{
		<#=Constants.CSharpMemberFullNames.ThrowIfNotLoaded#>("items", this.m__items);
		return this.m__items;
	}
}
<#+
		}
	}

	private void WriteScalarProperties(ClientCallableTypeInfo type, XDocument xdoc)
	{
		foreach (ClientCallablePropertyInfo prop in type.ScalarProperties.Where(p => !p.ExcludedFromClientLibrary))
		{
			this.WriteLine(string.Empty);
#>
public <#=prop.PropertyType.CSharpTypeName#> <#=prop.Name#>
{
	get
	{
		<#=Constants.CSharpMemberFullNames.ThrowIfNotLoaded#>("<#=Utility.ToCamelLowerCase(prop.Name)#>", this.<#=prop.FieldName#>);
		return this.<#=prop.FieldName#>;
	}
<#+
			if (!prop.IsReadonly)
			{
				this.WriteLine(string.Empty);
#>
	set
	{
		this.<#=prop.FieldName#> = value;
		<#=Constants.CSharpMemberFullNames.CreateSetPropertyAction#>(this.Context, this, "<#=prop.Name#>", value);
	}
<#+	
			}
#>
}
<#+
		}
	}

	private void WriteMethods(ClientCallableTypeInfo type, XDocument xdoc, string[] existingFileContent)
	{
		foreach (ClientCallableMethodInfo method in type.Methods.Where(m => m.ShouldGenerateScriptMethod))
		{
			this.WriteLine(string.Empty);
			if (method.ReturnType.IsClientObject)
			{
				if (method.IsIndexerMethod)
				{
					WriteIndexerMethod(type, method, xdoc, existingFileContent);
				}
				else
				{
					WriteObjectMethod(type, method, xdoc, existingFileContent);
				}
			}
			else
			{
				if (method.ReturnType.IsVoid)
				{
					WriteScalarMethodReturnVoid(type, method, xdoc, existingFileContent);
				}
				else
				{
					WriteScalarMethodReturnValue(type, method, xdoc, existingFileContent);
				}
			}
		}
	}

	private void WriteScalarMethodReturnVoid(ClientCallableTypeInfo type, ClientCallableMethodInfo method, XDocument xdoc, string[] existingFileContent)
	{
#>
public void <#=method.Name#>(<#=BuildMethodParameterList(method)#>)
{
<#+
		this.PushIndent(Constants.IndentString);
		this.WritePlaceHolderContent(type.Name + "_" + method.Name, existingFileContent);
		this.PopIndent();
#>
	<#=Constants.CSharpMemberFullNames.CreateMethodAction#>(this.Context, this, "<#=method.Name#>", <#=Constants.TypeFullNames.OperationType#>.<#=method.OperationType#>, <#=BuildMethodParameterValueArray(method)#>);
}
<#+
	}

	private void WriteScalarMethodReturnValue(ClientCallableTypeInfo type, ClientCallableMethodInfo method, XDocument xdoc, string[] existingFileContent)
	{
#>
public <#=Constants.TypeFullNames.ClientResultGenericPrefix#> <#=method.ReturnType.CSharpTypeName#> <#=Constants.TypeFullNames.ClientResultGenericSuffix#> <#=method.Name#>(<#=BuildMethodParameterList(method)#>)
{
<#+
		this.PushIndent(Constants.IndentString);
		this.WritePlaceHolderContent(type.Name + "_" + method.Name, existingFileContent);
		this.PopIndent();
#>
	var action = <#=Constants.CSharpMemberFullNames.CreateMethodAction#>(this.Context, this, "<#=method.Name#>", <#=Constants.TypeFullNames.OperationType#>.<#=method.OperationType#>, <#=BuildMethodParameterValueArray(method)#>);
	var ret = new <#=Constants.TypeFullNames.ClientResultGenericPrefix#> <#=method.ReturnType.CSharpTypeName#> <#=Constants.TypeFullNames.ClientResultGenericSuffix#>();
	<#=Constants.CSharpMemberFullNames.AddActionResultHandler#>(this, action, ret);
	return ret;
}
<#+
	}

	private void WriteObjectMethod(ClientCallableTypeInfo type, ClientCallableMethodInfo method, XDocument xdoc, string[] existingFileContent)
	{
#>
public <#=method.ReturnType.CSharpTypeName#> <#=method.Name#>(<#=BuildMethodParameterList(method)#>)
{
<#+
		this.PushIndent(Constants.IndentString);
		this.WritePlaceHolderContent(type.Name + "_" + method.Name, existingFileContent);
		this.PopIndent();
#>
	return new <#=method.ReturnType.CSharpTypeName#>(this.Context, <#=Constants.CSharpMemberFullNames.CreateMethodObjectPath#>(this.Context, this, "<#=method.Name#>", <#=Constants.TypeFullNames.OperationType#>.<#=method.OperationType#>, <#=BuildMethodParameterValueArray(method)#>, <#=Utility.GetBooleanLiteral(method.ReturnType.IsClientObjectCollection)#> /*isCollection*/, <#=Utility.GetBooleanLiteral(method.InvalidateReturnObjectPathAfterRequest)#> /*isInvalidAfterRequest*/));
}
<#+
	}
	
	private void WriteIndexerMethod(ClientCallableTypeInfo type, ClientCallableMethodInfo method, XDocument xdoc, string[] existingFileContent)
	{
#>
public <#=method.ReturnType.CSharpTypeName#> <#=method.Name#>(<#=BuildMethodParameterList(method)#>)
{
<#+
		this.PushIndent(Constants.IndentString);
		this.WritePlaceHolderContent(type.Name + "_" + method.Name, existingFileContent);
		this.PopIndent();
#>
	return new <#=method.ReturnType.CSharpTypeName#>(this.Context, <#=Constants.CSharpMemberFullNames.CreateIndexerObjectPath#>(this.Context, this, <#=BuildMethodParameterValueArray(method)#>));
}
<#+
	}

	private void WriteNewObject(ClientCallableTypeInfo type)
	{
#>
	/*
	 * Create a new instance of <#=type.ClientType.CSharpTypeName#> object
	 */
public static static <#=type.ClientType.CSharpTypeName#> NewObject(<#=Constants.TypeFullNames.ClientRequestContext#> context) 
{
	var ret = new <#=type.ClientType.CSharpTypeName#>(context, <#=Constants.CSharpMemberFullNames.CreateNewObjectObjectPath#>(context, "<#=type.FullName#>", <#=Utility.GetBooleanLiteral(type.ClientType.IsClientObjectCollection)#> /*isCollection*/));
	return ret;
} 
<#+
	}

	private string BuildMethodParameterList(ClientCallableMethodInfo method)
	{
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < method.Parameters.Count; i++)
		{
			ClientCallableParameterInfo param = method.Parameters[i];
			if (i != 0)
			{
				sb.Append(", ");
			}

			if (param.IsParams)
			{
				sb.Append("params ");
			}

			sb.Append(param.ParameterType.CSharpTypeName);
			sb.Append(" ");
			sb.Append(NormalizeMemberName(param.Name));
		}

		return sb.ToString();
	}

	private string BuildMethodParameterValueArray(ClientCallableMethodInfo method)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("new object[] {");
		for (int i = 0; i < method.Parameters.Count; i++)
		{
			if (i != 0)
			{
				sb.Append(", ");
			}

			sb.Append(NormalizeMemberName(method.Parameters[i].Name));
		}

		sb.Append("}");
		return sb.ToString();
	}

	private void WriteHandleResult(ClientCallableTypeInfo type)
	{
#>
	/** Handle results returned from the document
	 */
public override void _HandleResult(Newtonsoft.Json.Linq.JToken value)
{
	if (<#=Constants.CSharpMemberFullNames.IsNullOrUndefined#>(value))
	{
		return;
	}
	Newtonsoft.Json.Linq.JObject obj = value as Newtonsoft.Json.Linq.JObject;
	if (obj == null)
	{
		return;
	}

	<#=Constants.CSharpMemberFullNames.FixObjectPathIfNecessary#>(this, obj);
<#+
		foreach(ClientCallablePropertyInfo prop in type.ScalarProperties.Where(p => !p.ExcludedFromClientLibrary))
		{
#>
	if (!<#=Constants.CSharpMemberFullNames.IsUndefined#>(obj["<#=prop.Name#>"]))
	{
		this.<#=prop.FieldName#> = obj["<#=prop.Name#>"].ToObject<<#=prop.PropertyType.CSharpTypeName#>>();
	}

<#+
		}

		foreach (ClientCallablePropertyInfo prop in type.ObjectProperties.Where(p => !p.IsVolatile && !p.ExcludedFromClientLibrary))
		{
#>
    if (!<#=Constants.CSharpMemberFullNames.IsUndefined#>(obj["<#=prop.Name#>"]))
	{
        this.<#=prop.Name#>._HandleResult(obj["<#=prop.Name#>"]);
	}
<#+
		}

		if (type.ClientType.ChildItemClientType != null && type.ClientType.ChildItemClientType.IsClientObject)
		{
			bool hasIndexerMethod = (type.Methods.FirstOrDefault(m => m.IsIndexerMethod) != null);
#>
	Newtonsoft.Json.Linq.JArray itemsData = obj[OfficeExtension.Constants.Items] as Newtonsoft.Json.Linq.JArray;
	if (itemsData != null)
	{
		this.m__items = new <#=type.ClientType.ChildItemClientType.CSharpTypeName#>[itemsData.Count];
		for (var i = 0; i < itemsData.Count; i++)
		{
			var _item = new <#=type.ClientType.ChildItemClientType.CSharpTypeName#>(this.Context, <#=Constants.CSharpMemberFullNames.CreateChildItemObjectPathUsingIndexerOrGetItemAt#>(<#=Utility.GetBooleanLiteral(hasIndexerMethod)#>, this.Context, this, itemsData[i], i));
			_item._HandleResult(itemsData[i]);
			this.m__items[i] = _item;
		}
	}
<#+
		}
#>
}
<#+
	}

	private void WriteLoadMethod(ClientCallableTypeInfo type)
	{
		if (!type.IsValueObject)
		{
#>

/*
 * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
 */
public <#=type.ClientType.CSharpTypeName#> Load(OfficeExtension.LoadOption option) 
{
	<#=Constants.CSharpMemberFullNames.Load#>(this, option);
	return this;
}
<#+
		}
	}

	private void WriteClientValueObjectType(ClientCallableTypeInfo type, XDocument xdoc, string[] existingFileContent)
	{
#>
using System;
namespace <#=type.Namespace#>
{
<#+
		this.PushIndent(Constants.IndentString);
#>
public class <#=type.Name#> 
{
<#+
		this.PushIndent(Constants.IndentString);
		WriteClientValueObjectTypeProperties(type, xdoc);
		this.WriteLine(string.Empty);
		this.WritePlaceHolderContent(type.Name + "_Custom_Members", existingFileContent);
		this.PopIndent();
#>
}
<#+
		this.PopIndent();
#>
}
<#+
	}

	private void WriteClientValueObjectTypeProperties(ClientCallableTypeInfo type, XDocument xdoc)
	{
		foreach (ClientCallablePropertyInfo prop in type.Properties.Where(p => !p.ExcludedFromClientLibrary))
		{
#>
public <#=prop.PropertyType.CSharpTypeName#> <#=prop.Name#> { get; set; }
<#+
		}
	}

	private string NormalizeMemberName(string name)
	{
		string[] keywords = new string[] 
			{
				"base",
				"ref",
				"if",
				"yield",
			};

		if (keywords.Contains(name))
		{
			return  name + "_";
		}

		return name;
	}

	private void WriteComments(IEnumerable<string> comments)
	{
		if (comments != null)
		{
			foreach (string line in comments)
			{
				this.WriteLine(line);
			}
		}
	}
#>
