
/*
 * This is an auto-generated file. Do not edit it by hand!
 * Generated by %SRCROOT%\xlshared\src\Api\Metadata\WorksheetFunctionsCodegen\Codegen.bat
 * on Friday, January 22, 2016 12:24 PM
 * After running the above script, be sure to also run %SRCROOT%\util\XlsApiGen.bat.
*/

using Microsoft.OfficeExtension.CodeGen;

namespace Microsoft.ExcelServices
{
	/// <summary>
	/// An object containing the result of a function-evaluation operation
	/// </summary>
	[ApiSet(Version = 1.2)]
	[ClientCallableComType(Name = "IFunctionResult", InterfaceId = "e80ad1e5-a8a8-4a91-9aed-bea7b35ccf49", CoClassName = "FunctionResult")]
	[TypeScriptType("FunctionResult<T>")]
	public interface FunctionResult
	{
		/// <summary>
		/// Error value (such as "#DIV/0") representing the error. If the error string is not set, then the function succeeded, and its result is written to the Value field. The error is always in the English locale.
		/// </summary>
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = DispatchIds.FunctionResult_Error)]
		string Error { get; }

		/// <summary>
		/// The value of function evaluation. The value field will be populated only if no error has occured (i.e., the Error property is not set).
		/// </summary>
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = DispatchIds.FunctionResult_Value)]
		[TypeScriptType("T")] // The generic type parameter
		object Value { get; }
	}

	internal static class FunctionsDispatchIds
	{
		internal const int Count_DispId = 1;
		internal const int If_DispId = 2;
		internal const int IsNA_DispId = 3;
		internal const int IsError_DispId = 4;
		internal const int Sum_DispId = 5;
		internal const int Average_DispId = 6;
		internal const int Min_DispId = 7;
		internal const int Max_DispId = 8;
		/* SKIPPED: internal const int Row_DispId = 9; REASON: Function 'ROW' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Column_DispId = 10; REASON: Function 'COLUMN' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Na_DispId = 11;
		internal const int Npv_DispId = 12;
		internal const int Dollar_DispId = 13;
		internal const int Fixed_DispId = 14;
		internal const int Sin_DispId = 15;
		internal const int Cos_DispId = 16;
		internal const int Tan_DispId = 17;
		internal const int Atan_DispId = 18;
		internal const int Pi_DispId = 19;
		internal const int Sqrt_DispId = 20;
		internal const int Exp_DispId = 21;
		internal const int Ln_DispId = 22;
		internal const int Log10_DispId = 23;
		internal const int Abs_DispId = 24;
		internal const int Int_DispId = 25;
		internal const int Sign_DispId = 26;
		internal const int Round_DispId = 27;
		internal const int Lookup_DispId = 28;
		/* SKIPPED: internal const int Index_DispId = 29; REASON: Function 'INDEX' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Rept_DispId = 30;
		internal const int Mid_DispId = 31;
		internal const int Len_DispId = 32;
		internal const int Value_DispId = 33;
		internal const int True_DispId = 34;
		internal const int False_DispId = 35;
		internal const int And_DispId = 36;
		internal const int Or_DispId = 37;
		internal const int Not_DispId = 38;
		internal const int Mod_DispId = 39;
		internal const int DCount_DispId = 40;
		internal const int DSum_DispId = 41;
		internal const int DAverage_DispId = 42;
		internal const int DMin_DispId = 43;
		internal const int DMax_DispId = 44;
		internal const int DStDev_DispId = 45;
		internal const int DVar_DispId = 46;
		internal const int Text_DispId = 47;
		/* SKIPPED: internal const int LinEst_DispId = 48; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		/* SKIPPED: internal const int Trend_DispId = 49; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		/* SKIPPED: internal const int LogEst_DispId = 50; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		/* SKIPPED: internal const int Growth_DispId = 51; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		internal const int Pv_DispId = 52;
		internal const int Fv_DispId = 53;
		internal const int NPer_DispId = 54;
		internal const int Pmt_DispId = 55;
		internal const int Rate_DispId = 56;
		internal const int MIrr_DispId = 57;
		internal const int Irr_DispId = 58;
		internal const int Rand_DispId = 59;
		internal const int Match_DispId = 60;
		internal const int Date_DispId = 61;
		internal const int Time_DispId = 62;
		internal const int Day_DispId = 63;
		internal const int Month_DispId = 64;
		internal const int Year_DispId = 65;
		internal const int Weekday_DispId = 66;
		internal const int Hour_DispId = 67;
		internal const int Minute_DispId = 68;
		internal const int Second_DispId = 69;
		internal const int Now_DispId = 70;
		internal const int Areas_DispId = 71;
		internal const int Rows_DispId = 72;
		internal const int Columns_DispId = 73;
		/* SKIPPED: internal const int Offset_DispId = 74; REASON: Return type is exclusively a Range type. We don't support a Range return type. */
		/* SKIPPED: internal const int Search_DispId = 75; REASON: Function 'SEARCH' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Transpose_DispId = 76; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		internal const int Type_DispId = 77;
		/* SKIPPED: internal const int Deref_DispId = 78; REASON: Help is missing from funcs.tok, so likely not something allowed in formulas (maybe carry-over of pre-VBA Macros?) | Funcs.tok does not have a help-text description for parameter #0; is it intentional? */
		internal const int Atan2_DispId = 79;
		internal const int Asin_DispId = 80;
		internal const int Acos_DispId = 81;
		internal const int Choose_DispId = 82;
		internal const int HLookup_DispId = 83;
		internal const int VLookup_DispId = 84;
		internal const int Isref_DispId = 85;
		internal const int Log_DispId = 86;
		internal const int Char_DispId = 87;
		internal const int Lower_DispId = 88;
		internal const int Upper_DispId = 89;
		internal const int Proper_DispId = 90;
		internal const int Left_DispId = 91;
		internal const int Right_DispId = 92;
		internal const int Exact_DispId = 93;
		internal const int Trim_DispId = 94;
		internal const int Replace_DispId = 95;
		internal const int Substitute_DispId = 96;
		internal const int Code_DispId = 97;
		internal const int Find_DispId = 98;
		/* SKIPPED: internal const int Cell_DispId = 99; REASON: Function 'CELL' excluded.  See reason in FunctionsCommon.tt. */
		internal const int IsErr_DispId = 100;
		internal const int IsText_DispId = 101;
		internal const int IsNumber_DispId = 102;
		/* SKIPPED: internal const int Isblank_DispId = 103; REASON: Function 'ISBLANK' excluded.  See reason in FunctionsCommon.tt. */
		internal const int T_DispId = 104;
		internal const int N_DispId = 105;
		internal const int Datevalue_DispId = 106;
		internal const int Timevalue_DispId = 107;
		internal const int Sln_DispId = 108;
		internal const int Syd_DispId = 109;
		internal const int Ddb_DispId = 110;
		/* SKIPPED: internal const int Indirect_DispId = 111; REASON: Return type is exclusively a Range type. We don't support a Range return type. */
		internal const int Clean_DispId = 112;
		/* SKIPPED: internal const int MDeterm_DispId = 113; REASON: Function 'MDETERM' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int MInverse_DispId = 114; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		/* SKIPPED: internal const int MMult_DispId = 115; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant | Funcs.tok does not have a help-text description for parameter #1; is it intentional? */
		internal const int Ipmt_DispId = 116;
		internal const int Ppmt_DispId = 117;
		internal const int CountA_DispId = 118;
		internal const int Product_DispId = 119;
		internal const int Fact_DispId = 120;
		internal const int DProduct_DispId = 121;
		internal const int IsNonText_DispId = 122;
		internal const int DStDevP_DispId = 123;
		internal const int DVarP_DispId = 124;
		internal const int Trunc_DispId = 125;
		internal const int IsLogical_DispId = 126;
		internal const int DCountA_DispId = 127;
		internal const int USDollar_DispId = 128;
		internal const int FindB_DispId = 129;
		/* SKIPPED: internal const int SearchB_DispId = 130; REASON: Function 'SEARCHB' excluded.  See reason in FunctionsCommon.tt. */
		internal const int ReplaceB_DispId = 131;
		internal const int Leftb_DispId = 132;
		internal const int Rightb_DispId = 133;
		internal const int Midb_DispId = 134;
		internal const int Lenb_DispId = 135;
		internal const int RoundUp_DispId = 136;
		internal const int RoundDown_DispId = 137;
		internal const int Asc_DispId = 138;
		internal const int Dbcs_DispId = 139;
		/* SKIPPED: internal const int Address_DispId = 140; REASON: Function 'ADDRESS' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Days360_DispId = 141;
		internal const int Today_DispId = 142;
		internal const int Vdb_DispId = 143;
		internal const int Median_DispId = 144;
		/* SKIPPED: internal const int SumProduct_DispId = 145; REASON: Function 'SUMPRODUCT' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Sinh_DispId = 146;
		internal const int Cosh_DispId = 147;
		internal const int Tanh_DispId = 148;
		internal const int Asinh_DispId = 149;
		internal const int Acosh_DispId = 150;
		internal const int Atanh_DispId = 151;
		internal const int DGet_DispId = 152;
		/* SKIPPED: internal const int Info_DispId = 153; REASON: Function 'INFO' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Db_DispId = 154;
		/* SKIPPED: internal const int Frequency_DispId = 155; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		internal const int Error_Type_DispId = 156;
		internal const int AveDev_DispId = 157;
		internal const int GammaLn_DispId = 158;
		internal const int Combin_DispId = 159;
		internal const int Even_DispId = 160;
		internal const int Fisher_DispId = 161;
		internal const int FisherInv_DispId = 162;
		internal const int Standardize_DispId = 163;
		internal const int Odd_DispId = 164;
		internal const int Permut_DispId = 165;
		/* SKIPPED: internal const int SumXMY2_DispId = 166; REASON: Function 'SUMXMY2' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int SumX2MY2_DispId = 167; REASON: Function 'SUMX2MY2' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int SumX2PY2_DispId = 168; REASON: Function 'SUMX2PY2' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Correl_DispId = 169; REASON: Function 'CORREL' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Intercept_DispId = 170; REASON: Function 'INTERCEPT' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Pearson_DispId = 171; REASON: Function 'PEARSON' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int RSq_DispId = 172; REASON: Function 'RSQ' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int StEyx_DispId = 173; REASON: Function 'STEYX' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Slope_DispId = 174; REASON: Function 'SLOPE' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Prob_DispId = 175; REASON: Function 'PROB' excluded.  See reason in FunctionsCommon.tt. */
		internal const int DevSq_DispId = 176;
		internal const int GeoMean_DispId = 177;
		internal const int HarMean_DispId = 178;
		internal const int SumSq_DispId = 179;
		internal const int Kurt_DispId = 180;
		internal const int Skew_DispId = 181;
		internal const int Large_DispId = 182;
		internal const int Small_DispId = 183;
		internal const int TrimMean_DispId = 184;
		internal const int Concatenate_DispId = 185;
		internal const int Power_DispId = 186;
		internal const int Radians_DispId = 187;
		internal const int Degrees_DispId = 188;
		internal const int Subtotal_DispId = 189;
		internal const int SumIf_DispId = 190;
		internal const int CountIf_DispId = 191;
		internal const int CountBlank_DispId = 192;
		internal const int Ispmt_DispId = 193;
		/* SKIPPED: internal const int Datedif_DispId = 194; REASON: Funcs.tok does not have a description of the parameters; is it intentional? */
		/* SKIPPED: internal const int Datestring_DispId = 195; REASON: Help is missing from funcs.tok, so likely not something allowed in formulas (maybe carry-over of pre-VBA Macros?) | Funcs.tok does not have a description of the parameters; is it intentional? */
		/* SKIPPED: internal const int Numberstring_DispId = 196; REASON: Help is missing from funcs.tok, so likely not something allowed in formulas (maybe carry-over of pre-VBA Macros?) | Funcs.tok does not have a description of the parameters; is it intentional? */
		internal const int Roman_DispId = 197;
		/* SKIPPED: internal const int GetPivotData_DispId = 198; REASON: Function 'GETPIVOTDATA' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Hyperlink_DispId = 199;
		/* SKIPPED: internal const int Phonetic_DispId = 200; REASON: Function 'PHONETIC' excluded.  See reason in FunctionsCommon.tt. */
		internal const int AverageA_DispId = 201;
		internal const int MaxA_DispId = 202;
		internal const int MinA_DispId = 203;
		internal const int StDevPA_DispId = 204;
		internal const int VarPA_DispId = 205;
		internal const int StDevA_DispId = 206;
		internal const int VarA_DispId = 207;
		internal const int BahtText_DispId = 208;
		/* SKIPPED: internal const int ThaiDayOfWeek_DispId = 209; REASON: Function 'THAIDAYOFWEEK' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int ThaiDigit_DispId = 210; REASON: Function 'THAIDIGIT' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int ThaiMonthOfYear_DispId = 211; REASON: Function 'THAIMONTHOFYEAR' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int ThaiNumSound_DispId = 212; REASON: Function 'THAINUMSOUND' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int ThaiNumString_DispId = 213; REASON: Function 'THAINUMSTRING' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int ThaiStringLength_DispId = 214; REASON: Function 'THAISTRINGLENGTH' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int IsThaiDigit_DispId = 215; REASON: Function 'ISTHAIDIGIT' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int RoundBahtDown_DispId = 216; REASON: Function 'ROUNDBAHTDOWN' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int RoundBahtUp_DispId = 217; REASON: Function 'ROUNDBAHTUP' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int ThaiYear_DispId = 218; REASON: Function 'THAIYEAR' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int CubeValue_DispId = 219; REASON: Function 'CUBEVALUE' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int CubeMember_DispId = 220; REASON: Function 'CUBEMEMBER' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int CubeMemberProperty_DispId = 221; REASON: Function 'CUBEMEMBERPROPERTY' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int CubeRankedMember_DispId = 222; REASON: Function 'CUBERANKEDMEMBER' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Hex2Bin_DispId = 223;
		internal const int Hex2Dec_DispId = 224;
		internal const int Hex2Oct_DispId = 225;
		internal const int Dec2Bin_DispId = 226;
		internal const int Dec2Hex_DispId = 227;
		internal const int Dec2Oct_DispId = 228;
		internal const int Oct2Bin_DispId = 229;
		internal const int Oct2Hex_DispId = 230;
		internal const int Oct2Dec_DispId = 231;
		internal const int Bin2Dec_DispId = 232;
		internal const int Bin2Oct_DispId = 233;
		internal const int Bin2Hex_DispId = 234;
		internal const int ImSub_DispId = 235;
		internal const int ImDiv_DispId = 236;
		internal const int ImPower_DispId = 237;
		internal const int ImAbs_DispId = 238;
		internal const int ImSqrt_DispId = 239;
		internal const int ImLn_DispId = 240;
		internal const int ImLog2_DispId = 241;
		internal const int ImLog10_DispId = 242;
		internal const int ImSin_DispId = 243;
		internal const int ImCos_DispId = 244;
		internal const int ImExp_DispId = 245;
		internal const int ImArgument_DispId = 246;
		internal const int ImConjugate_DispId = 247;
		internal const int Imaginary_DispId = 248;
		internal const int ImReal_DispId = 249;
		internal const int Complex_DispId = 250;
		internal const int ImSum_DispId = 251;
		internal const int ImProduct_DispId = 252;
		internal const int SeriesSum_DispId = 253;
		internal const int FactDouble_DispId = 254;
		internal const int SqrtPi_DispId = 255;
		internal const int Quotient_DispId = 256;
		internal const int Delta_DispId = 257;
		internal const int GeStep_DispId = 258;
		internal const int IsEven_DispId = 259;
		internal const int IsOdd_DispId = 260;
		internal const int MRound_DispId = 261;
		internal const int Erf_DispId = 262;
		internal const int ErfC_DispId = 263;
		internal const int BesselJ_DispId = 264;
		internal const int BesselK_DispId = 265;
		internal const int BesselY_DispId = 266;
		internal const int BesselI_DispId = 267;
		internal const int Xirr_DispId = 268;
		internal const int Xnpv_DispId = 269;
		internal const int PriceMat_DispId = 270;
		internal const int YieldMat_DispId = 271;
		internal const int IntRate_DispId = 272;
		internal const int Received_DispId = 273;
		internal const int Disc_DispId = 274;
		internal const int PriceDisc_DispId = 275;
		internal const int YieldDisc_DispId = 276;
		internal const int TBillEq_DispId = 277;
		internal const int TBillPrice_DispId = 278;
		internal const int TBillYield_DispId = 279;
		internal const int Price_DispId = 280;
		internal const int Yield_DispId = 281;
		internal const int DollarDe_DispId = 282;
		internal const int DollarFr_DispId = 283;
		internal const int Nominal_DispId = 284;
		internal const int Effect_DispId = 285;
		internal const int CumPrinc_DispId = 286;
		internal const int CumIPmt_DispId = 287;
		internal const int EDate_DispId = 288;
		internal const int EoMonth_DispId = 289;
		internal const int YearFrac_DispId = 290;
		internal const int CoupDayBs_DispId = 291;
		internal const int CoupDays_DispId = 292;
		internal const int CoupDaysNc_DispId = 293;
		internal const int CoupNcd_DispId = 294;
		internal const int CoupNum_DispId = 295;
		internal const int CoupPcd_DispId = 296;
		internal const int Duration_DispId = 297;
		internal const int MDuration_DispId = 298;
		internal const int OddLPrice_DispId = 299;
		internal const int OddLYield_DispId = 300;
		internal const int OddFPrice_DispId = 301;
		internal const int OddFYield_DispId = 302;
		internal const int RandBetween_DispId = 303;
		internal const int WeekNum_DispId = 304;
		internal const int AmorDegrc_DispId = 305;
		internal const int AmorLinc_DispId = 306;
		internal const int Convert_DispId = 307;
		internal const int AccrInt_DispId = 308;
		internal const int AccrIntM_DispId = 309;
		internal const int WorkDay_DispId = 310;
		internal const int NetworkDays_DispId = 311;
		internal const int Gcd_DispId = 312;
		internal const int MultiNomial_DispId = 313;
		internal const int Lcm_DispId = 314;
		internal const int FVSchedule_DispId = 315;
		/* SKIPPED: internal const int CubeKPIMember_DispId = 316; REASON: Function 'CUBEKPIMEMBER' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int CubeSet_DispId = 317; REASON: Function 'CUBESET' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int CubeSetCount_DispId = 318; REASON: Function 'CUBESETCOUNT' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int IfError_DispId = 319; REASON: Function 'IFERROR' excluded.  See reason in FunctionsCommon.tt. */
		internal const int CountIfs_DispId = 320;
		internal const int SumIfs_DispId = 321;
		internal const int AverageIf_DispId = 322;
		internal const int AverageIfs_DispId = 323;
		/* SKIPPED: internal const int Aggregate_DispId = 324; REASON: Function has overload with one or both of the overloaded params accepting '...'. At time of codegen creation,  there is only one function that does this (Aggregate), and it's unclear how to expose it. So just will ignore this pattern for now. */
		internal const int Binom_Dist_DispId = 325;
		internal const int Binom_Inv_DispId = 326;
		internal const int Confidence_Norm_DispId = 327;
		internal const int Confidence_T_DispId = 328;
		/* SKIPPED: internal const int ChiSq_Test_DispId = 329; REASON: Function 'CHISQ_TEST' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int F_Test_DispId = 330; REASON: Function 'F_TEST' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Covariance_P_DispId = 331; REASON: Function 'COVARIANCE_P' excluded.  See reason in FunctionsCommon.tt. */
		/* SKIPPED: internal const int Covariance_S_DispId = 332; REASON: Function 'COVARIANCE_S' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Expon_Dist_DispId = 333;
		internal const int Gamma_Dist_DispId = 334;
		internal const int Gamma_Inv_DispId = 335;
		/* SKIPPED: internal const int Mode_Mult_DispId = 336; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		/* SKIPPED: internal const int Mode_Sngl_DispId = 337; REASON: Function 'MODE_SNGL' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Norm_Dist_DispId = 338;
		internal const int Norm_Inv_DispId = 339;
		internal const int Percentile_Exc_DispId = 340;
		internal const int Percentile_Inc_DispId = 341;
		internal const int PercentRank_Exc_DispId = 342;
		internal const int PercentRank_Inc_DispId = 343;
		internal const int Poisson_Dist_DispId = 344;
		internal const int Quartile_Exc_DispId = 345;
		internal const int Quartile_Inc_DispId = 346;
		internal const int Rank_Avg_DispId = 347;
		internal const int Rank_Eq_DispId = 348;
		internal const int StDev_S_DispId = 349;
		internal const int StDev_P_DispId = 350;
		internal const int T_Dist_DispId = 351;
		internal const int T_Dist_2T_DispId = 352;
		internal const int T_Dist_RT_DispId = 353;
		internal const int T_Inv_DispId = 354;
		internal const int T_Inv_2T_DispId = 355;
		internal const int Var_S_DispId = 356;
		internal const int Var_P_DispId = 357;
		internal const int Weibull_Dist_DispId = 358;
		internal const int NetworkDays_Intl_DispId = 359;
		internal const int WorkDay_Intl_DispId = 360;
		internal const int ECMA_Ceiling_DispId = 361;
		internal const int ISO_Ceiling_DispId = 362;
		internal const int Beta_Dist_DispId = 363;
		internal const int Beta_Inv_DispId = 364;
		internal const int ChiSq_Dist_DispId = 365;
		internal const int ChiSq_Dist_RT_DispId = 366;
		internal const int ChiSq_Inv_DispId = 367;
		internal const int ChiSq_Inv_RT_DispId = 368;
		internal const int F_Dist_DispId = 369;
		internal const int F_Dist_RT_DispId = 370;
		internal const int F_Inv_DispId = 371;
		internal const int F_Inv_RT_DispId = 372;
		internal const int HypGeom_Dist_DispId = 373;
		internal const int LogNorm_Dist_DispId = 374;
		internal const int LogNorm_Inv_DispId = 375;
		internal const int NegBinom_Dist_DispId = 376;
		internal const int Norm_S_Dist_DispId = 377;
		internal const int Norm_S_Inv_DispId = 378;
		/* SKIPPED: internal const int T_Test_DispId = 379; REASON: Function 'T_TEST' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Z_Test_DispId = 380;
		internal const int Erf_Precise_DispId = 381;
		internal const int ErfC_Precise_DispId = 382;
		internal const int GammaLn_Precise_DispId = 383;
		internal const int Ceiling_Precise_DispId = 384;
		internal const int Floor_Precise_DispId = 385;
		internal const int Acot_DispId = 386;
		internal const int Acoth_DispId = 387;
		internal const int Cot_DispId = 388;
		internal const int Coth_DispId = 389;
		internal const int Csc_DispId = 390;
		internal const int Csch_DispId = 391;
		internal const int Sec_DispId = 392;
		internal const int Sech_DispId = 393;
		internal const int ImTan_DispId = 394;
		internal const int ImCot_DispId = 395;
		internal const int ImCsc_DispId = 396;
		internal const int ImCsch_DispId = 397;
		internal const int ImSec_DispId = 398;
		internal const int ImSech_DispId = 399;
		internal const int Bitand_DispId = 400;
		internal const int Bitor_DispId = 401;
		internal const int Bitxor_DispId = 402;
		internal const int Bitlshift_DispId = 403;
		internal const int Bitrshift_DispId = 404;
		internal const int Permutationa_DispId = 405;
		internal const int Combina_DispId = 406;
		internal const int Xor_DispId = 407;
		internal const int PDuration_DispId = 408;
		internal const int Base_DispId = 409;
		internal const int Decimal_DispId = 410;
		internal const int Days_DispId = 411;
		internal const int Binom_Dist_Range_DispId = 412;
		internal const int Gamma_DispId = 413;
		internal const int Skew_p_DispId = 414;
		internal const int Gauss_DispId = 415;
		internal const int Phi_DispId = 416;
		internal const int Rri_DispId = 417;
		internal const int Unichar_DispId = 418;
		internal const int Unicode_DispId = 419;
		/* SKIPPED: internal const int Munit_DispId = 420; REASON: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant */
		internal const int Arabic_DispId = 421;
		internal const int IsoWeekNum_DispId = 422;
		internal const int NumberValue_DispId = 423;
		internal const int Sheet_DispId = 424;
		internal const int Sheets_DispId = 425;
		/* SKIPPED: internal const int Formulatext_DispId = 426; REASON: Function 'FORMULATEXT' excluded.  See reason in FunctionsCommon.tt. */
		internal const int IsFormula_DispId = 427;
		/* SKIPPED: internal const int IfNa_DispId = 428; REASON: Function 'IFNA' excluded.  See reason in FunctionsCommon.tt. */
		internal const int Ceiling_Math_DispId = 429;
		internal const int Floor_Math_DispId = 430;
		internal const int ImSinh_DispId = 431;
		internal const int ImCosh_DispId = 432;
		/* SKIPPED: internal const int FilterXML_DispId = 433; REASON: Function 'FILTERXML' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int WebService_DispId = 434; REASON: Function 'WEBSERVICE' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int EncodeURL_DispId = 435; REASON: Function 'ENCODEURL' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Forecast_ETS_DispId = 436; REASON: Function 'FORECAST_ETS' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Forecast_ETS_ConfInt_DispId = 437; REASON: Function 'FORECAST_ETS_CONFINT' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Forecast_ETS_Seasonality_DispId = 438; REASON: Function 'FORECAST_ETS_SEASONALITY' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Forecast_Linear_DispId = 439; REASON: Function 'FORECAST_LINEAR' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Forecast_ETS_STAT_DispId = 440; REASON: Function 'FORECAST_ETS_STAT' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int MaxIfs_DispId = 441; REASON: Function 'MAXIFS' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int MinIfs_DispId = 442; REASON: Function 'MINIFS' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int TextJoin_DispId = 443; REASON: Function 'TEXTJOIN' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Concat_DispId = 444; REASON: Function 'CONCAT' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Ifs_DispId = 445; REASON: Function 'IFS' excluded due to lack of support on all platforms (ios/mac). */
		/* SKIPPED: internal const int Switch_DispId = 446; REASON: Skipping due to invalidly named parameters (contains invalid character '|'). | Function 'SWITCH' excluded due to lack of support on all platforms (ios/mac). */
	}

	/// <summary>
	/// An object for evaluating Excel functions.
	/// </summary>
	[ApiSet(Version = 1.2)]
	[ClientCallableComType(Name = "IFunctions", InterfaceId = "769e969a-ffbf-4862-b79a-719a2bf269db", CoClassName = "Functions")]
	public interface Functions
	{

		/// <summary>
		/// Counts the number of cells in a range that contain numbers.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 arguments that can contain or refer to a variety of different types of data, but only numbers are counted.</param>
		// [[FCN_COUNT]],Count,COUNT,;M3;fgrpStatistical;1;N;NRME,...;;?fnCount;;CWXL;"[[PARAM_COUNT]]";"[[FHLP_COUNT]]";"[[AHLP1_COUNT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Count_DispId, Name = "Func_Count")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Count(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Checks whether a condition is met, and returns one value if TRUE, and another value if FALSE.
		/// </summary>
		/// <param name="logicalTest">Is any value or expression that can be evaluated to TRUE or FALSE.</param>
		/// <param name="valueIfTrue">Is the value that is returned if logicalTest is TRUE. If omitted, TRUE is returned. You can nest up to seven IF functions.</param>
		/// <param name="valueIfFalse">Is the value that is returned if logicalTest is FALSE. If omitted, FALSE is returned.</param>
		// [[FCN_IF]],,IF,;M;fgrpLogical;1;RNSBGM;MB,MRNSBGE,MRNSBGE;0;fnIF;;CWXL;"[[PARAM1_IF]]![[PARAM2_IF]]";"[[FHLP_IF]]";"[[AHLP1_IF]]";"[[AHLP2_IF]]";"[[AHLP3_IF]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.If_DispId, Name = "Func_If")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|string|boolean>")]
		FunctionResult If(

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @logicalTest,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @valueIfTrue,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @valueIfFalse
		);

		/// <summary>
		/// Checks whether a value is #N/A, and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.</param>
		// [[FCN_ISNA]],IsNA,ISNA,;ML;fgrpInfo;1;B;NSBE;1;fnISERR;;CWXL;"[[PARAM_ISNA]]";"[[FHLP_ISNA]]";"[[AHLP1_ISNA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsNA_DispId, Name = "Func_IsNA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsNA(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Checks whether a value is an error (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!), and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.</param>
		// [[FCN_ISERROR]],IsError,ISERROR,;ML;fgrpInfo;1;B;NSBE;2;fnISERR;;CWXL;"[[PARAM_ISERROR]]";"[[FHLP_ISERROR]]";"[[AHLP1_ISERROR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsError_DispId, Name = "Func_IsError")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsError(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Adds all the numbers in a range of cells.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers to sum. Logical values and text are ignored in cells, included if typed as arguments.</param>
		// [[FCN_SUM]],Sum,SUM,;M3;fgrpMathTrig;1;N;NRM,...;;?fnSumProduct;0;CWXL;"[[PARAM_SUM]]";"[[FHLP_SUM]]";"[[AHLP1_SUM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sum_DispId, Name = "Func_Sum")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sum(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the average (arithmetic mean) of its arguments, which can be numbers or names, arrays, or references that contain numbers.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numeric arguments for which you want the average.</param>
		// [[FCN_AVERAGE]],Average,AVERAGE,;M3;fgrpStatistical;1;N;NRM,...;0;?fnAverage;;CWXL;"[[PARAM_AVERAGE]]";"[[FHLP_AVERAGE]]";"[[AHLP1_AVERAGE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Average_DispId, Name = "Func_Average")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Average(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the smallest number in a set of values. Ignores logical values and text.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.</param>
		// [[FCN_MIN]],Min,MIN,;M3;fgrpStatistical;1;N;NRM,...;0;?fnMinMax;1;CWXL;"[[PARAM_MIN]]";"[[FHLP_MIN]]";"[[AHLP1_MIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Min_DispId, Name = "Func_Min")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Min(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the largest value in a set of values. Ignores logical values and text.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.</param>
		// [[FCN_MAX]],Max,MAX,;M3;fgrpStatistical;1;N;NRM,...;0;?fnMinMax;2;CWXL;"[[PARAM_MAX]]";"[[FHLP_MAX]]";"[[AHLP1_MAX]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Max_DispId, Name = "Func_Max")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Max(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		// SKIPPED due to: Function 'ROW' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the row number of a reference.
		// /// </summary>
		// /// <param name="reference">Is the cell or a single range of cells for which you want the row number; if omitted, returns the cell containing the ROW function.</param>
		// [[FCN_ROW]],,ROW,;M;fgrpLookup;0;NM;R;1;?fnRowCol:m;;CWX;"[[PARAM_ROW]]";"[[FHLP_ROW]]";"[[AHLP1_ROW]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Row_DispId, Name = "Func_Row")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Row(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @reference
		// );

		// SKIPPED due to: Function 'COLUMN' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the column number of a reference.
		// /// </summary>
		// /// <param name="reference">Is the cell or range of contiguous cells for which you want the column number. If omitted, the cell containing the COLUMN function is used.</param>
		// [[FCN_COLUMN]],,COLUMN,;M;fgrpLookup;0;NM;R;0;?fnRowCol:m;;CWX;"[[PARAM_COLUMN]]";"[[FHLP_COLUMN]]";"[[AHLP1_COLUMN]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Column_DispId, Name = "Func_Column")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Column(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @reference
		// );

		/// <summary>
		/// Returns the error value #N/A (value not available).
		/// </summary>
		// [[FCN_NA]],,NA,;M3;fgrpInfo;0;NS;;;?fnNA;;CWX;;"[[FHLP_NA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Na_DispId, Name = "Func_Na")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|string>")]
		FunctionResult Na(
		);

		/// <summary>
		/// Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).
		/// </summary>
		/// <param name="rate">Is the rate of discount over the length of one period.</param>
		/// <param name="values">List of parameters, whose elements are 1 to 254 payments and income, equally spaced in time and occurring at the end of each period.</param>
		// [[FCN_NPV]],Npv,NPV,;M3;fgrpFinancial;2;N;N,NRM,...;;?fnNPV;;CWXL;"[[PARAM_NPV]]";"[[FHLP_NPV]]";"[[AHLP1_NPV]]";"[[AHLP2_NPV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Npv_DispId, Name = "Func_Npv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Npv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Converts a number to text, using currency format.
		/// </summary>
		/// <param name="number">Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.</param>
		/// <param name="decimals">Is the number of digits to the right of the decimal point. The number is rounded as necessary; if omitted, Decimals = 2.</param>
		// `[[FCN_DOLLAR]],Dollar,DOLLAR,;ML;fgrpText;1;S;N,N;11;?convert:m;;CWXL;"[[PARAM_DOLLAR]]";"[[FHLP_DOLLAR]]";"[[AHLP1_DOLLAR]]";"[[AHLP2_DOLLAR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Dollar_DispId, Name = "Func_Dollar")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Dollar(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @decimals
		);

		/// <summary>
		/// Rounds a number to the specified number of decimals and returns the result as text with or without commas.
		/// </summary>
		/// <param name="number">Is the number you want to round and convert to text.</param>
		/// <param name="decimals">Is the number of digits to the right of the decimal point. If omitted, Decimals = 2.</param>
		/// <param name="noCommas">Is a logical value: do not display commas in the returned text = TRUE; do display commas in the returned text = FALSE or omitted.</param>
		// `[[FCN_FIXED]],Fixed,FIXED,;ML;fgrpText;1;S;N,NX,B;4;?convert:m;;CWXL;"[[PARAM_FIXED]]";"[[FHLP_FIXED]]";"[[AHLP1_FIXED]]";"[[AHLP2_FIXED]]";"[[AHLP3_FIXED]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Fixed_DispId, Name = "Func_Fixed")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Fixed(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @decimals,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @noCommas
		);

		/// <summary>
		/// Returns the sine of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the sine. Degrees * PI()/180 = radians.</param>
		// [[FCN_SIN]],,SIN,;M;fgrpMathTrig;1;N;N;0;?fnTrans:m;;CWXL;"[[PARAM_SIN]]";"[[FHLP_SIN]]";"[[AHLP1_SIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sin_DispId, Name = "Func_Sin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sin(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the cosine of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the cosine.</param>
		// [[FCN_COS]],,COS,;M;fgrpMathTrig;1;N;N;1;?fnTrans:m;;CWXL;"[[PARAM_COS]]";"[[FHLP_COS]]";"[[AHLP1_COS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Cos_DispId, Name = "Func_Cos")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Cos(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the tangent of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the tangent. Degrees * PI()/180 = radians.</param>
		// [[FCN_TAN]],,TAN,;M;fgrpMathTrig;1;N;N;2;?fnTrans:m;;CWXL;"[[PARAM_TAN]]";"[[FHLP_TAN]]";"[[AHLP1_TAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Tan_DispId, Name = "Func_Tan")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Tan(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the arctangent of a number in radians, in the range -Pi/2 to Pi/2.
		/// </summary>
		/// <param name="number">Is the tangent of the angle you want.</param>
		// [[FCN_ATAN]],,ATAN,;M;fgrpMathTrig;1;N;N;3;?fnTrans:m;;CWXL;"[[PARAM_ATAN]]";"[[FHLP_ATAN]]";"[[AHLP1_ATAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Atan_DispId, Name = "Func_Atan")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Atan(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the value of Pi, 3.14159265358979, accurate to 15 digits.
		/// </summary>
		// [[FCN_PI]],Pi,PI,;M;fgrpMathTrig;0;N;;10;?fnTrans:m;;CWXL;;"[[FHLP_PI]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Pi_DispId, Name = "Func_Pi")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Pi(
		);

		/// <summary>
		/// Returns the square root of a number.
		/// </summary>
		/// <param name="number">Is the number for which you want the square root.</param>
		// [[FCN_SQRT]],,SQRT,;M;fgrpMathTrig;1;N;N;6;?fnTrans:m;;CWXL;"[[PARAM_SQRT]]";"[[FHLP_SQRT]]";"[[AHLP1_SQRT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sqrt_DispId, Name = "Func_Sqrt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sqrt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns e raised to the power of a given number.
		/// </summary>
		/// <param name="number">Is the exponent applied to the base e. The constant e equals 2.71828182845904, the base of the natural logarithm.</param>
		// [[FCN_EXP]],,EXP,;M;fgrpMathTrig;1;N;N;5;?fnTrans:m;;CWXL;"[[PARAM_EXP]]";"[[FHLP_EXP]]";"[[AHLP1_EXP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Exp_DispId, Name = "Func_Exp")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Exp(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the natural logarithm of a number.
		/// </summary>
		/// <param name="number">Is the positive real number for which you want the natural logarithm.</param>
		// [[FCN_LN]],Ln,LN,;M;fgrpMathTrig;1;N;N;4;?fnTrans:m;;CWXL;"[[PARAM_LN]]";"[[FHLP_LN]]";"[[AHLP1_LN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ln_DispId, Name = "Func_Ln")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Ln(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the base-10 logarithm of a number.
		/// </summary>
		/// <param name="number">Is the positive real number for which you want the base-10 logarithm.</param>
		// [[FCN_LOG10]],Log10,LOG10,;M;fgrpMathTrig;1;N;N;7;?fnTrans:m;;CWXL;"[[PARAM_LOG10]]";"[[FHLP_LOG10]]";"[[AHLP1_LOG10]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Log10_DispId, Name = "Func_Log10")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Log10(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the absolute value of a number, a number without its sign.
		/// </summary>
		/// <param name="number">Is the real number for which you want the absolute value.</param>
		// [[FCN_ABS]],,ABS,;M;fgrpMathTrig;1;N;N;9;?fnTrans:m;;CWXL;"[[PARAM_ABS]]";"[[FHLP_ABS]]";"[[AHLP1_ABS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Abs_DispId, Name = "Func_Abs")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Abs(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Rounds a number down to the nearest integer.
		/// </summary>
		/// <param name="number">Is the real number you want to round down to an integer.</param>
		// [[FCN_INT]],,INT,;M;fgrpMathTrig;1;N;N;;?math;fnInt;CWXL;"[[PARAM_INT]]";"[[FHLP_INT]]";"[[AHLP1_INT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Int_DispId, Name = "Func_Int")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Int(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the sign of a number: 1 if the number is positive, zero if the number is zero, or -1 if the number is negative.
		/// </summary>
		/// <param name="number">Is any real number.</param>
		// [[FCN_SIGN]],,SIGN,;M;fgrpMathTrig;1;N;N;;?math;fsign;CWXL;"[[PARAM_SIGN]]";"[[FHLP_SIGN]]";"[[AHLP1_SIGN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sign_DispId, Name = "Func_Sign")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sign(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Rounds a number to a specified number of digits.
		/// </summary>
		/// <param name="number">Is the number you want to round.</param>
		/// <param name="numDigits">Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero to the nearest integer.</param>
		// [[FCN_ROUND]],Round,ROUND,;M;fgrpMathTrig;2;N;N,N;128;?math;fnRound;CWXL;"[[PARAM_ROUND]]";"[[FHLP_ROUND]]";"[[AHLP1_ROUND]]";"[[AHLP2_ROUND]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Round_DispId, Name = "Func_Round")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Round(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numDigits
		);

		/// <summary>
		/// Looks up a value either from a one-row or one-column range or from an array. Provided for backward compatibility.
		/// </summary>
		/// <param name="lookupValue">Is a value that LOOKUP searches for in lookupVector and can be a number, text, a logical value, or a name or reference to a value.</param>
		/// <param name="lookupVector">Is a range that contains only one row or one column of text, numbers, or logical values, placed in ascending order.</param>
		/// <param name="resultVector">Is a range that contains only one row or column, the same size as lookupVector.</param>
		// [[FCN_LOOKUP]],Lookup,LOOKUP,;M;fgrpLookup;2;NSB;NSB,MR,MR;8;?math;fnLookup:l;CWX;"[[PARAM1_LOOKUP]]![[PARAM2_LOOKUP]]";"[[FHLP_LOOKUP]]";"[[AHLP1_LOOKUP]]";"[[AHLP2_LOOKUP]]";"[[AHLP3_LOOKUP]]";"[[AHLP4_LOOKUP]]";"[[AHLP5_LOOKUP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Lookup_DispId, Name = "Func_Lookup")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|string|boolean>")]
		FunctionResult Lookup(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lookupValue,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lookupVector,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @resultVector
		);

		// SKIPPED due to: Function 'INDEX' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns a value or reference of the cell at the intersection of a particular row and column, in a given range.
		// /// </summary>
		// /// <param name="reference">Is a reference to one or more cell ranges.</param>
		// /// <param name="rowNum">Selects the row in Array or Reference from which to return a value. If omitted, columnNum is required.</param>
		// /// <param name="columnNum">Selects the column in Array or Reference from which to return a value. If omitted, rowNum is required.</param>
		// /// <param name="areaNum">Selects a range in Reference from which to return a value. The first area selected or entered is area 1, the second area is area 2, and so on.</param>
		// [[FCN_INDEX]],Index,INDEX,;M;fgrpLookup;2;MRNSB;MR,N,N,N;;?fnIndex:m;;CWX;"[[PARAM1_INDEX]]![[PARAM2_INDEX]]";"[[FHLP_INDEX]]";"[[AHLP1_INDEX]]";"[[AHLP2_INDEX]]";"[[AHLP3_INDEX]]";"[[AHLP4_INDEX]]";"[[AHLP5_INDEX]]";"[[AHLP6_INDEX]]";"[[AHLP7_INDEX]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Index_DispId, Name = "Func_Index")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult Index(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reference,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rowNum,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @columnNum,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @areaNum
		// );

		/// <summary>
		/// Repeats text a given number of times. Use REPT to fill a cell with a number of instances of a text string.
		/// </summary>
		/// <param name="text">Is the text you want to repeat.</param>
		/// <param name="numberTimes">Is a positive number specifying the number of times to repeat text.</param>
		// `[[FCN_REPT]],Rept,REPT,;ML;fgrpText;2;S;S,N;1;?convert:m;;CWXL;"[[PARAM_REPT]]";"[[FHLP_REPT]]";"[[AHLP1_REPT]]";"[[AHLP2_REPT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rept_DispId, Name = "Func_Rept")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Rept(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberTimes
		);

		/// <summary>
		/// Returns the characters from the middle of a text string, given a starting position and length.
		/// </summary>
		/// <param name="text">Is the text string from which you want to extract the characters.</param>
		/// <param name="startNum">Is the position of the first character you want to extract. The first character in Text is 1.</param>
		/// <param name="numChars">Specifies how many characters to return from Text.</param>
		// `[[FCN_MID]],,MID,;ML;fgrpText;3;S;S,N,N;2;?convert:m;;CWXL;"[[PARAM_MID]]";"[[FHLP_MID]]";"[[AHLP1_MID]]";"[[AHLP2_MID]]";"[[AHLP3_MID]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Mid_DispId, Name = "Func_Mid")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Mid(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numChars
		);

		/// <summary>
		/// Returns the number of characters in a text string.
		/// </summary>
		/// <param name="text">Is the text whose length you want to find. Spaces count as characters.</param>
		// `[[FCN_LEN]],,LEN,;ML;fgrpText;1;N;S;3;?convert:m;;CWXL;"[[PARAM_LEN]]";"[[FHLP_LEN]]";"[[AHLP1_LEN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Len_DispId, Name = "Func_Len")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Len(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Converts a text string that represents a number to a number.
		/// </summary>
		/// <param name="text">Is the text enclosed in quotation marks or a reference to a cell containing the text you want to convert.</param>
		// `[[FCN_VALUE]],,VALUE,;ML;fgrpText;1;N;SBN;10;?convert:m;;CWXL;"[[PARAM_VALUE]]";"[[FHLP_VALUE]]";"[[AHLP1_VALUE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Value_DispId, Name = "Func_Value")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Value(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|boolean|number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Returns the logical value TRUE.
		/// </summary>
		// [[FCN_TRUE]],,TRUE,;M3;fgrpLogical;0;B;;;?fnTrue;;CWXL;;"[[FHLP_TRUE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.True_DispId, Name = "Func_True")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult True(
		);

		/// <summary>
		/// Returns the logical value FALSE.
		/// </summary>
		// [[FCN_FALSE]],,FALSE,;M3;fgrpLogical;0;B;;;?fnFalse;;CWXL;;"[[FHLP_FALSE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.False_DispId, Name = "Func_False")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult False(
		);

		/// <summary>
		/// Checks whether all arguments are TRUE, and returns TRUE if all arguments are TRUE.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.</param>
		// [[FCN_AND]],And,AND,;M3;fgrpLogical;1;B;BRM,...;;?fnAnd;;CWXL;"[[PARAM_AND]]";"[[FHLP_AND]]";"[[AHLP1_AND]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.And_DispId, Name = "Func_And")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult And(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Checks whether any of the arguments are TRUE, and returns TRUE or FALSE. Returns FALSE only if all arguments are FALSE.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 conditions that you want to test that can be either TRUE or FALSE.</param>
		// [[FCN_OR]],Or,OR,;M3;fgrpLogical;1;B;BRM,...;;?fnOr;;CWXL;"[[PARAM_OR]]";"[[FHLP_OR]]";"[[AHLP1_OR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Or_DispId, Name = "Func_Or")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult Or(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Changes FALSE to TRUE, or TRUE to FALSE.
		/// </summary>
		/// <param name="logical">Is a value or expression that can be evaluated to TRUE or FALSE.</param>
		// [[FCN_NOT]],,NOT,;M3;fgrpLogical;1;B;B;;?fnNot;;CWXL;"[[PARAM_NOT]]";"[[FHLP_NOT]]";"[[AHLP1_NOT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Not_DispId, Name = "Func_Not")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult Not(

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @logical
		);

		/// <summary>
		/// Returns the remainder after a number is divided by a divisor.
		/// </summary>
		/// <param name="number">Is the number for which you want to find the remainder after the division is performed.</param>
		/// <param name="divisor">Is the number by which you want to divide Number.</param>
		// [[FCN_MOD]],,MOD,;M;fgrpMathTrig;2;N;N,N;128;?math;fnMod;CWXL;"[[PARAM_MOD]]";"[[FHLP_MOD]]";"[[AHLP1_MOD]]";"[[AHLP2_MOD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Mod_DispId, Name = "Func_Mod")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Mod(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @divisor
		);

		/// <summary>
		/// Counts the cells containing numbers in the field (column) of records in the database that match the conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DCOUNT]],DCount,DCOUNT,;M;fgrpDatabase;3;N;R,XNSR,SR;Pgetcnt;?rrangef;16;CWX;"[[PARAM_DCOUNT]]";"[[FHLP_DCOUNT]]";"[[AHLP1_DCOUNT]]";"[[AHLP2_DCOUNT]]";"[[AHLP3_DCOUNT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DCount_DispId, Name = "Func_DCount")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DCount(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Adds the numbers in the field (column) of records in the database that match the conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DSUM]],DSum,DSUM,;M;fgrpDatabase;3;N;R,NSR,SR;;?rrangef;2;CWX;"[[PARAM_DSUM]]";"[[FHLP_DSUM]]";"[[AHLP1_DSUM]]";"[[AHLP2_DSUM]]";"[[AHLP3_DSUM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DSum_DispId, Name = "Func_DSum")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DSum(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Averages the values in a column in a list or database that match conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DAVERAGE]],DAverage,DAVERAGE,;M;fgrpDatabase;3;N;R,NSR,SR;Paverag;?rrangef;2;CWX;"[[PARAM_DAVERAGE]]";"[[FHLP_DAVERAGE]]";"[[AHLP1_DAVERAGE]]";"[[AHLP2_DAVERAGE]]";"[[AHLP3_DAVERAGE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DAverage_DispId, Name = "Func_DAverage")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DAverage(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Returns the smallest number in the field (column) of records in the database that match the conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DMIN]],DMin,DMIN,;M;fgrpDatabase;3;N;R,NSR,SR;;?rrangef;8;CWX;"[[PARAM_DMIN]]";"[[FHLP_DMIN]]";"[[AHLP1_DMIN]]";"[[AHLP2_DMIN]]";"[[AHLP3_DMIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DMin_DispId, Name = "Func_DMin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DMin(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Returns the largest number in the field (column) of records in the database that match the conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DMAX]],DMax,DMAX,;M;fgrpDatabase;3;N;R,NSR,SR;;?rrangef;10;CWX;"[[PARAM_DMAX]]";"[[FHLP_DMAX]]";"[[AHLP1_DMAX]]";"[[AHLP2_DMAX]]";"[[AHLP3_DMAX]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DMax_DispId, Name = "Func_DMax")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DMax(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Estimates the standard deviation based on a sample from selected database entries.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DSTDEV]],DStDev,DSTDEV,;M;fgrpDatabase;3;N;R,NSR,SR;Pstdvfin,stdvini;?rrangef;14;CWX;"[[PARAM_DSTDEV]]";"[[FHLP_DSTDEV]]";"[[AHLP1_DSTDEV]]";"[[AHLP2_DSTDEV]]";"[[AHLP3_DSTDEV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DStDev_DispId, Name = "Func_DStDev")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DStDev(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Estimates variance based on a sample from selected database entries.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DVAR]],DVar,DVAR,;M;fgrpDatabase;3;N;R,NSR,SR;Pvarfin,stdvini;?rrangef;14;CWX;"[[PARAM_DVAR]]";"[[FHLP_DVAR]]";"[[AHLP1_DVAR]]";"[[AHLP2_DVAR]]";"[[AHLP3_DVAR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DVar_DispId, Name = "Func_DVar")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DVar(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Converts a value to text in a specific number format.
		/// </summary>
		/// <param name="value">Is a number, a formula that evaluates to a numeric value, or a reference to a cell containing a numeric value.</param>
		/// <param name="formatText">Is a number format in text form from the Category box on the Number tab in the Format Cells dialog box (not General).</param>
		// `[[FCN_TEXT]],Text,TEXT,;ML;fgrpText;2;S;NSB,S;64;?convert:m;;CWXL;"[[PARAM_TEXT]]";"[[FHLP_TEXT]]";"[[AHLP1_TEXT]]";"[[AHLP2_TEXT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Text_DispId, Name = "Func_Text")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Text(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @formatText
		);

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Returns statistics that describe a linear trend matching known data points, by fitting a straight line using the least squares method.
		// /// </summary>
		// /// <param name="knownYs">Is the set of y-values you already know in the relationship y = mx + b.</param>
		// /// <param name="knownXs">Is an optional set of x-values that you may already know in the relationship y = mx + b.</param>
		// /// <param name="const">Is a logical value: the constant b is calculated normally if Const = TRUE or omitted; b is set equal to 0 if Const = FALSE.</param>
		// /// <param name="stats">Is a logical value: return additional regression statistics = TRUE; return m-coefficients and the constant b = FALSE or omitted.</param>
		// [[FCN_LINEST]],LinEst,LINEST,;M;fgrpStatistical;1;M;RM,RMX,BRX,BRX;1;?Trend;;CWX;"[[PARAM_LINEST]]";"[[FHLP_LINEST]]";"[[AHLP1_LINEST]]";"[[AHLP2_LINEST]]";"[[AHLP3_LINEST]]";"[[AHLP4_LINEST]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.LinEst_DispId, Name = "Func_LinEst")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult LinEst(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @knownXs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @const,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @stats
		// );

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Returns numbers in a linear trend matching known data points, using the least squares method.
		// /// </summary>
		// /// <param name="knownYs">Is a range or array of y-values you already know in the relationship y = mx + b.</param>
		// /// <param name="knownXs">Is an optional range or array of x-values that you know in the relationship y = mx + b, an array the same size as Known_y's.</param>
		// /// <param name="newXs">Is a range or array of new x-values for which you want TREND to return corresponding y-values.</param>
		// /// <param name="const">Is a logical value: the constant b is calculated normally if Const = TRUE or omitted; b is set equal to 0 if Const = FALSE.</param>
		// [[FCN_TREND]],Trend,TREND,;M;fgrpStatistical;1;M;RM,RMX,RMX,BRX;2;?Trend;;CWX;"[[PARAM_TREND]]";"[[FHLP_TREND]]";"[[AHLP1_TREND]]";"[[AHLP2_TREND]]";"[[AHLP3_TREND]]";"[[AHLP4_TREND]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Trend_DispId, Name = "Func_Trend")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Trend(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @knownXs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @newXs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @const
		// );

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Returns statistics that describe an exponential curve matching known data points.
		// /// </summary>
		// /// <param name="knownYs">Is the set of y-values you already know in the relationship y = b*m^x.</param>
		// /// <param name="knownXs">Is an optional set of x-values that you may already know in the relationship y = b*m^x.</param>
		// /// <param name="const">Is a logical value: the constant b is calculated normally if Const = TRUE or omitted; b is set equal to 1 if Const = FALSE.</param>
		// /// <param name="stats">Is a logical value: return additional regression statistics = TRUE; return m-coefficients and the constant b = FALSE or omitted.</param>
		// [[FCN_LOGEST]],LogEst,LOGEST,;M;fgrpStatistical;1;M;RM,RMX,BRX,BRX;3;?Trend;;CWX;"[[PARAM_LOGEST]]";"[[FHLP_LOGEST]]";"[[AHLP1_LOGEST]]";"[[AHLP2_LOGEST]]";"[[AHLP3_LOGEST]]";"[[AHLP4_LOGEST]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.LogEst_DispId, Name = "Func_LogEst")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult LogEst(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @knownXs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @const,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @stats
		// );

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Returns numbers in an exponential growth trend matching known data points.
		// /// </summary>
		// /// <param name="knownYs">Is the set of y-values you already know in the relationship y = b*m^x, an array or range of positive numbers.</param>
		// /// <param name="knownXs">Is an optional set of x-values that you may already know in the relationship y = b*m^x, an array or range the same size as Known_y's.</param>
		// /// <param name="newXs">Are new x-values for which you want GROWTH to return corresponding y-values.</param>
		// /// <param name="const">Is a logical value: the constant b is calculated normally if Const = TRUE; b is set equal to 1 if Const = FALSE or omitted.</param>
		// [[FCN_GROWTH]],Growth,GROWTH,;M;fgrpStatistical;1;M;RM,RMX,RMX,BRX;4;?Trend;;CWX;"[[PARAM_GROWTH]]";"[[FHLP_GROWTH]]";"[[AHLP1_GROWTH]]";"[[AHLP2_GROWTH]]";"[[AHLP3_GROWTH]]";"[[AHLP4_GROWTH]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Growth_DispId, Name = "Func_Growth")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Growth(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @knownXs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @newXs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @const
		// );

		/// <summary>
		/// Returns the present value of an investment: the total amount that a series of future payments is worth now.
		/// </summary>
		/// <param name="rate">Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.</param>
		/// <param name="nper">Is the total number of payment periods in an investment.</param>
		/// <param name="pmt">Is the payment made each period and cannot change over the life of the investment.</param>
		/// <param name="fv">Is the future value, or a cash balance you want to attain after the last payment is made.</param>
		/// <param name="type">Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.</param>
		// [[FCN_PV]],Pv,PV,;M;fgrpFinancial;3;N;N,N,N,N,N;1;?math;fnPV;CWXL;"[[PARAM_PV]]";"[[FHLP_PV]]";"[[AHLP1_PV]]";"[[AHLP2_PV]]";"[[AHLP3_PV]]";"[[AHLP4_PV]]";"[[AHLP5_PV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Pv_DispId, Name = "Func_Pv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Pv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pmt,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @fv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @type
		);

		/// <summary>
		/// Returns the future value of an investment based on periodic, constant payments and a constant interest rate.
		/// </summary>
		/// <param name="rate">Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.</param>
		/// <param name="nper">Is the total number of payment periods in the investment.</param>
		/// <param name="pmt">Is the payment made each period; it cannot change over the life of the investment.</param>
		/// <param name="pv">Is the present value, or the lump-sum amount that a series of future payments is worth now. If omitted, Pv = 0.</param>
		/// <param name="type">Is a value representing the timing of payment: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.</param>
		// [[FCN_FV]],Fv,FV,;M;fgrpFinancial;3;N;N,N,N,N,N;1;?math;fnFV;CWXL;"[[PARAM_FV]]";"[[FHLP_FV]]";"[[AHLP1_FV]]";"[[AHLP2_FV]]";"[[AHLP3_FV]]";"[[AHLP4_FV]]";"[[AHLP5_FV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Fv_DispId, Name = "Func_Fv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Fv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pmt,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @type
		);

		/// <summary>
		/// Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.
		/// </summary>
		/// <param name="rate">Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.</param>
		/// <param name="pmt">Is the payment made each period; it cannot change over the life of the investment.</param>
		/// <param name="pv">Is the present value, or the lump-sum amount that a series of future payments is worth now.</param>
		/// <param name="fv">Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, zero is used.</param>
		/// <param name="type">Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.</param>
		// [[FCN_NPER]],NPer,NPER,;M;fgrpFinancial;3;N;N,N,N,N,N;1;?math;fnPER;CWXL;"[[PARAM_NPER]]";"[[FHLP_NPER]]";"[[AHLP1_NPER]]";"[[AHLP2_NPER]]";"[[AHLP3_NPER]]";"[[AHLP4_NPER]]";"[[AHLP5_NPER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.NPer_DispId, Name = "Func_NPer")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult NPer(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pmt,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @fv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @type
		);

		/// <summary>
		/// Calculates the payment for a loan based on constant payments and a constant interest rate.
		/// </summary>
		/// <param name="rate">Is the interest rate per period for the loan. For example, use 6%/4 for quarterly payments at 6% APR.</param>
		/// <param name="nper">Is the total number of payments for the loan.</param>
		/// <param name="pv">Is the present value: the total amount that a series of future payments is worth now.</param>
		/// <param name="fv">Is the future value, or a cash balance you want to attain after the last payment is made, 0 (zero) if omitted.</param>
		/// <param name="type">Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.</param>
		// [[FCN_PMT]],Pmt,PMT,;M;fgrpFinancial;3;N;N,N,N,N,N;1;?math;fnPMT;CWXL;"[[PARAM_PMT]]";"[[FHLP_PMT]]";"[[AHLP1_PMT]]";"[[AHLP2_PMT]]";"[[AHLP3_PMT]]";"[[AHLP4_PMT]]";"[[AHLP5_PMT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Pmt_DispId, Name = "Func_Pmt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Pmt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @fv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @type
		);

		/// <summary>
		/// Returns the interest rate per period of a loan or an investment. For example, use 6%/4 for quarterly payments at 6% APR.
		/// </summary>
		/// <param name="nper">Is the total number of payment periods for the loan or investment.</param>
		/// <param name="pmt">Is the payment made each period and cannot change over the life of the loan or investment.</param>
		/// <param name="pv">Is the present value: the total amount that a series of future payments is worth now.</param>
		/// <param name="fv">Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, uses Fv = 0.</param>
		/// <param name="type">Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.</param>
		/// <param name="guess">Is your guess for what the rate will be; if omitted, Guess = 0.1 (10 percent).</param>
		// [[FCN_RATE]],Rate,RATE,;M;fgrpFinancial;3;N;N,N,N,N,N,N;0;?fnIter;;CWXL;"[[PARAM_RATE]]";"[[FHLP_RATE]]";"[[AHLP1_RATE]]";"[[AHLP2_RATE]]";"[[AHLP3_RATE]]";"[[AHLP4_RATE]]";"[[AHLP5_RATE]]";"[[AHLP6_RATE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rate_DispId, Name = "Func_Rate")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Rate(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pmt,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @fv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @type,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @guess
		);

		/// <summary>
		/// Returns the internal rate of return for a series of periodic cash flows, considering both cost of investment and interest on reinvestment of cash.
		/// </summary>
		/// <param name="values">Is an array or a reference to cells that contain numbers that represent a series of payments (negative) and income (positive) at regular periods.</param>
		/// <param name="financeRate">Is the interest rate you pay on the money used in the cash flows.</param>
		/// <param name="reinvestRate">Is the interest rate you receive on the cash flows as you reinvest them.</param>
		// &[[FCN_MIRR]],MIrr,MIRR,;M3;fgrpFinancial;3;N;MR,N,N;;?fnMIRR;;CWX;"[[PARAM_MIRR]]";"[[FHLP_MIRR]]";"[[AHLP1_MIRR]]";"[[AHLP2_MIRR]]";"[[AHLP3_MIRR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.MIrr_DispId, Name = "Func_MIrr")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult MIrr(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @financeRate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reinvestRate
		);

		/// <summary>
		/// Returns the internal rate of return for a series of cash flows.
		/// </summary>
		/// <param name="values">Is an array or a reference to cells that contain numbers for which you want to calculate the internal rate of return.</param>
		/// <param name="guess">Is a number that you guess is close to the result of IRR; 0.1 (10 percent) if omitted.</param>
		// [[FCN_IRR]],Irr,IRR,;M;fgrpFinancial;1;N;MR,N;1;?fnIter;;CWX;"[[PARAM_IRR]]";"[[FHLP_IRR]]";"[[AHLP1_IRR]]";"[[AHLP2_IRR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Irr_DispId, Name = "Func_Irr")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Irr(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @guess
		);

		/// <summary>
		/// Returns a random number greater than or equal to 0 and less than 1, evenly distributed (changes on recalculation).
		/// </summary>
		// -[[FCN_RAND]],,RAND,;M;fgrpMathTrig;0;N;;8;fnRand:m;;CWX;;"[[FHLP_RAND]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rand_DispId, Name = "Func_Rand")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Rand(
		);

		/// <summary>
		/// Returns the relative position of an item in an array that matches a specified value in a specified order.
		/// </summary>
		/// <param name="lookupValue">Is the value you use to find the value you want in the array, a number, text, or logical value, or a reference to one of these.</param>
		/// <param name="lookupArray">Is a contiguous range of cells containing possible lookup values, an array of values, or a reference to an array.</param>
		/// <param name="matchType">Is a number 1, 0, or -1 indicating which value to return.</param>
		// [[FCN_MATCH]],Match,MATCH,;M;fgrpLookup;2;N;NSB,NMR,NR;8;?math;fnMatch:l;CWX;"[[PARAM_MATCH]]";"[[FHLP_MATCH]]";"[[AHLP1_MATCH]]";"[[AHLP2_MATCH]]";"[[AHLP3_MATCH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Match_DispId, Name = "Func_Match")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Match(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lookupValue,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lookupArray,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @matchType
		);

		/// <summary>
		/// Returns the number that represents the date in Microsoft Excel date-time code.
		/// </summary>
		/// <param name="year">Is a number from 1900 or 1904 (depending on the workbook's date system) to 9999.</param>
		/// <param name="month">Is a number from 1 to 12 representing the month of the year.</param>
		/// <param name="day">Is a number from 1 to 31 representing the day of the month.</param>
		// [[FCN_DATE]],,DATE,;M;fgrpDateTime;3;N;N,N,N;1;?math;fnToSerialDate;CWXL;"[[PARAM_DATE]]";"[[FHLP_DATE]]";"[[AHLP1_DATE]]";"[[AHLP2_DATE]]";"[[AHLP3_DATE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Date_DispId, Name = "Func_Date")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Date(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @year,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @month,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @day
		);

		/// <summary>
		/// Converts hours, minutes, and seconds given as numbers to an Excel serial number, formatted with a time format.
		/// </summary>
		/// <param name="hour">Is a number from 0 to 23 representing the hour.</param>
		/// <param name="minute">Is a number from 0 to 59 representing the minute.</param>
		/// <param name="second">Is a number from 0 to 59 representing the second.</param>
		// [[FCN_TIME]],,TIME,;M;fgrpDateTime;3;N;N,N,N;1;?math;fnToSerialTime;CWXL;"[[PARAM_TIME]]";"[[FHLP_TIME]]";"[[AHLP1_TIME]]";"[[AHLP2_TIME]]";"[[AHLP3_TIME]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Time_DispId, Name = "Func_Time")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Time(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @hour,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @minute,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @second
		);

		/// <summary>
		/// Returns the day of the month, a number from 1 to 31.
		/// </summary>
		/// <param name="serialNumber">Is a number in the date-time code used by Microsoft Excel.</param>
		// [[FCN_DAY]],,DAY,;M;fgrpDateTime;1;N;N;1;?math;fnFromSerial;CWXL;"[[PARAM_DAY]]";"[[FHLP_DAY]]";"[[AHLP1_DAY]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Day_DispId, Name = "Func_Day")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Day(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber
		);

		/// <summary>
		/// Returns the month, a number from 1 (January) to 12 (December).
		/// </summary>
		/// <param name="serialNumber">Is a number in the date-time code used by Microsoft Excel.</param>
		// [[FCN_MONTH]],,MONTH,;M;fgrpDateTime;1;N;N;2;?math;fnFromSerial;CWXL;"[[PARAM_MONTH]]";"[[FHLP_MONTH]]";"[[AHLP1_MONTH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Month_DispId, Name = "Func_Month")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Month(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber
		);

		/// <summary>
		/// Returns the year of a date, an integer in the range 1900 - 9999.
		/// </summary>
		/// <param name="serialNumber">Is a number in the date-time code used by Microsoft Excel.</param>
		// [[FCN_YEAR]],,YEAR,;M;fgrpDateTime;1;N;N;3;?math;fnFromSerial;CWXL;"[[PARAM_YEAR]]";"[[FHLP_YEAR]]";"[[AHLP1_YEAR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Year_DispId, Name = "Func_Year")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Year(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber
		);

		/// <summary>
		/// Returns a number from 1 to 7 identifying the day of the week of a date.
		/// </summary>
		/// <param name="serialNumber">Is a number that represents a date.</param>
		/// <param name="returnType">Is a number: for Sunday=1 through Saturday=7, use 1; for Monday=1 through Sunday=7, use 2; for Monday=0 through Sunday=6, use 3.</param>
		// [[FCN_WEEKDAY]],Weekday,WEEKDAY,;M;fgrpDateTime;1;N;N,N;1;?fnWeekday:m;;CWXL;"[[PARAM_WEEKDAY]]";"[[FHLP_WEEKDAY]]";"[[AHLP1_WEEKDAY]]";"[[AHLP2_WEEKDAY]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Weekday_DispId, Name = "Func_Weekday")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Weekday(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @returnType
		);

		/// <summary>
		/// Returns the hour as a number from 0 (12:00 A.M.) to 23 (11:00 P.M.).
		/// </summary>
		/// <param name="serialNumber">Is a number in the date-time code used by Microsoft Excel, or text in time format, such as 16:48:00 or 4:48:00 PM.</param>
		// [[FCN_HOUR]],,HOUR,;M;fgrpDateTime;1;N;N;5;?math;fnFromSerial;CWXL;"[[PARAM_HOUR]]";"[[FHLP_HOUR]]";"[[AHLP1_HOUR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Hour_DispId, Name = "Func_Hour")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Hour(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber
		);

		/// <summary>
		/// Returns the minute, a number from 0 to 59.
		/// </summary>
		/// <param name="serialNumber">Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:00 or 4:48:00 PM.</param>
		// [[FCN_MINUTE]],,MINUTE,;M;fgrpDateTime;1;N;N;6;?math;fnFromSerial;CWXL;"[[PARAM_MINUTE]]";"[[FHLP_MINUTE]]";"[[AHLP1_MINUTE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Minute_DispId, Name = "Func_Minute")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Minute(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber
		);

		/// <summary>
		/// Returns the second, a number from 0 to 59.
		/// </summary>
		/// <param name="serialNumber">Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:23 or 4:48:47 PM.</param>
		// [[FCN_SECOND]],,SECOND,;M;fgrpDateTime;1;N;N;7;?math;fnFromSerial;CWXL;"[[PARAM_SECOND]]";"[[FHLP_SECOND]]";"[[AHLP1_SECOND]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Second_DispId, Name = "Func_Second")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Second(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber
		);

		/// <summary>
		/// Returns the current date and time formatted as a date and time.
		/// </summary>
		// -[[FCN_NOW]],,NOW,;M;fgrpDateTime;0;N;;;?math;fnNow;CWX;;"[[FHLP_NOW]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Now_DispId, Name = "Func_Now")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Now(
		);

		/// <summary>
		/// Returns the number of areas in a reference. An area is a range of contiguous cells or a single cell.
		/// </summary>
		/// <param name="reference">Is a reference to a cell or range of cells and can refer to multiple areas.</param>
		// [[FCN_AREAS]],,AREAS,;M;fgrpLookup;1;N;R;1;?fnARC;;CWX;"[[PARAM_AREAS]]";"[[FHLP_AREAS]]";"[[AHLP1_AREAS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Areas_DispId, Name = "Func_Areas")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Areas(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reference
		);

		/// <summary>
		/// Returns the number of rows in a reference or array.
		/// </summary>
		/// <param name="array">Is an array, an array formula, or a reference to a range of cells for which you want the number of rows.</param>
		// [[FCN_ROWS]],,ROWS,;M;fgrpLookup;1;N;MR;2;?fnARC;;CWX;"[[PARAM_ROWS]]";"[[FHLP_ROWS]]";"[[AHLP1_ROWS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rows_DispId, Name = "Func_Rows")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Rows(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array
		);

		/// <summary>
		/// Returns the number of columns in an array or reference.
		/// </summary>
		/// <param name="array">Is an array or array formula, or a reference to a range of cells for which you want the number of columns.</param>
		// [[FCN_COLUMNS]],,COLUMNS,;M;fgrpLookup;1;N;MR;3;?fnARC;;CWX;"[[PARAM_COLUMNS]]";"[[FHLP_COLUMNS]]";"[[AHLP1_COLUMNS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Columns_DispId, Name = "Func_Columns")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Columns(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array
		);

		// SKIPPED due to: Return type is exclusively a Range type. We don't support a Range return type.
		// /// <summary>
		// /// Returns a reference to a range that is a given number of rows and columns from a given reference.
		// /// </summary>
		// /// <param name="reference">Is the reference from which you want to base the offset, a reference to a cell or range of adjacent cells.</param>
		// /// <param name="rows">Is the number of rows, up or down, that you want the upper-left cell of the result to refer to.</param>
		// /// <param name="cols">Is the number of columns, to the left or right, that you want the upper-left cell of the result to refer to.</param>
		// /// <param name="height">Is the height, in number of rows, that you want the result to be, the same height as Reference if omitted.</param>
		// /// <param name="width">Is the width, in number of columns, that you want the result to be, the same width as Reference if omitted.</param>
		// -[[FCN_OFFSET]],,OFFSET,;M;fgrpLookup;3;R;R,NX,NX,NX,NX;1;?fnOffset;;CWX;"[[PARAM_OFFSET]]";"[[FHLP_OFFSET]]";"[[AHLP1_OFFSET]]";"[[AHLP2_OFFSET]]";"[[AHLP3_OFFSET]]";"[[AHLP4_OFFSET]]";"[[AHLP5_OFFSET]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Offset_DispId, Name = "Func_Offset")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Offset(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reference,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rows,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cols,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @height,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @width
		// );

		// SKIPPED due to: Function 'SEARCH' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the number of the character at which a specific character or text string is first found, reading left to right (not case-sensitive).
		// /// </summary>
		// /// <param name="findText">Is the text you want to find. You can use the ? and * wildcard characters; use ~? and ~* to find the ? and * characters.</param>
		// /// <param name="withinText">Is the text in which you want to search for findText.</param>
		// /// <param name="startNum">Is the character number in withinText, counting from the left, at which you want to start searching. If omitted, 1 is used.</param>
		// `[[FCN_SEARCH]],Search,SEARCH,;ML;fgrpText;2;N;S,S,N;9;?convert:m;;CWXL;"[[PARAM_SEARCH]]";"[[FHLP_SEARCH]]";"[[AHLP1_SEARCH]]";"[[AHLP2_SEARCH]]";"[[AHLP3_SEARCH]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Search_DispId, Name = "Func_Search")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Search(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @findText,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @withinText,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @startNum
		// );

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Converts a vertical range of cells to a horizontal range, or vice versa.
		// /// </summary>
		// /// <param name="array">Is a range of cells on a worksheet or an array of values that you want to transpose.</param>
		// [[FCN_TRANSPOSE]],Transpose,TRANSPOSE,;M;fgrpLookup;1;M;MNSB;;?fnTranspose;;CWX;"[[PARAM_TRANSPOSE]]";"[[FHLP_TRANSPOSE]]";"[[AHLP1_TRANSPOSE]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Transpose_DispId, Name = "Func_Transpose")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Transpose(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array
		// );

		/// <summary>
		/// Returns an integer representing the data type of a value: number = 1; text = 2; logical value = 4; error value = 16; array = 64.
		/// </summary>
		/// <param name="value">Can be any value.</param>
		// [[FCN_TYPE]],,TYPE,;M;fgrpInfo;1;N;MBSNE;4;?fnARC;;CWXL;"[[PARAM_TYPE]]";"[[FHLP_TYPE]]";"[[AHLP1_TYPE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Type_DispId, Name = "Func_Type")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Type(

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|string|number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		// SKIPPED due to: Help is missing from funcs.tok, so likely not something allowed in formulas (maybe carry-over of pre-VBA Macros?) | Funcs.tok does not have a help-text description for parameter #0; is it intentional?
		// /// <summary>
		// /// 
		// /// </summary>
		// /// <param name="reference"></param>
		// ![[FCN_DEREF]],,DEREF,COM.MICROSOFT.DEREF;;fgrpLookup;1;NSBEM;R;5;?fnARC;;CX;"[[PARAM_DEREF]]";
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Deref_DispId, Name = "Func_Deref")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult Deref(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reference
		// );

		/// <summary>
		/// Returns the arctangent of the specified x- and y- coordinates, in radians between -Pi and Pi, excluding -Pi.
		/// </summary>
		/// <param name="xNum">Is the x-coordinate of the point.</param>
		/// <param name="yNum">Is the y-coordinate of the point.</param>
		// [[FCN_ATAN2]],Atan2,ATAN2,;M;fgrpMathTrig;2;N;N,N;128;?math;Atn2;CWXL;"[[PARAM_ATAN2]]";"[[FHLP_ATAN2]]";"[[AHLP1_ATAN2]]";"[[AHLP2_ATAN2]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Atan2_DispId, Name = "Func_Atan2")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Atan2(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @xNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @yNum
		);

		/// <summary>
		/// Returns the arcsine of a number in radians, in the range -Pi/2 to Pi/2.
		/// </summary>
		/// <param name="number">Is the sine of the angle you want and must be from -1 to 1.</param>
		// [[FCN_ASIN]],Asin,ASIN,;M;fgrpMathTrig;1;N;N;;?math;Asin;CWXL;"[[PARAM_ASIN]]";"[[FHLP_ASIN]]";"[[AHLP1_ASIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Asin_DispId, Name = "Func_Asin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Asin(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the arccosine of a number, in radians in the range 0 to Pi. The arccosine is the angle whose cosine is Number.
		/// </summary>
		/// <param name="number">Is the cosine of the angle you want and must be from -1 to 1.</param>
		// [[FCN_ACOS]],Acos,ACOS,;M;fgrpMathTrig;1;N;N;;?math;Acos;CWXL;"[[PARAM_ACOS]]";"[[FHLP_ACOS]]";"[[AHLP1_ACOS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Acos_DispId, Name = "Func_Acos")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Acos(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Chooses a value or action to perform from a list of values, based on an index number.
		/// </summary>
		/// <param name="indexNum">Specifies which value argument is selected. indexNum must be between 1 and 254, or a formula or a reference to a number between 1 and 254.</param>
		/// <param name="values">List of parameters, whose elements are 1 to 254 numbers, cell references, defined names, formulas, functions, or text arguments from which CHOOSE selects.</param>
		// [[FCN_CHOOSE]],Choose,CHOOSE,;M;fgrpLookup;2;RNSBGM;MN,MRNSBGE,...;1;fnIF;;CWXL;"[[PARAM_CHOOSE]]";"[[FHLP_CHOOSE]]";"[[AHLP1_CHOOSE]]";"[[AHLP2_CHOOSE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Choose_DispId, Name = "Func_Choose")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|string|boolean>")]
		FunctionResult Choose(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @indexNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Looks for a value in the top row of a table or array of values and returns the value in the same column from a row you specify.
		/// </summary>
		/// <param name="lookupValue">Is the value to be found in the first row of the table and can be a value, a reference, or a text string.</param>
		/// <param name="tableArray">Is a table of text, numbers, or logical values in which data is looked up. tableArray can be a reference to a range or a range name.</param>
		/// <param name="rowIndexNum">Is the row number in tableArray from which the matching value should be returned. The first row of values in the table is row 1.</param>
		/// <param name="rangeLookup">Is a logical value: to find the closest match in the top row (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.</param>
		// [[FCN_HLOOKUP]],HLookup,HLOOKUP,;M;fgrpLookup;3;MNSB;NSB,MRN,MRN,B;8;?math;fnHLookup:l;CWX;"[[PARAM_HLOOKUP]]";"[[FHLP_HLOOKUP]]";"[[AHLP1_HLOOKUP]]";"[[AHLP2_HLOOKUP]]";"[[AHLP3_HLOOKUP]]";"[[AHLP4_HLOOKUP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.HLookup_DispId, Name = "Func_HLookup")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|string|boolean>")]
		FunctionResult HLookup(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lookupValue,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|Excel.RangeReference|Excel.FunctionResult<any>")] object @tableArray,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|Excel.RangeReference|Excel.FunctionResult<any>")] object @rowIndexNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @rangeLookup
		);

		/// <summary>
		/// Looks for a value in the leftmost column of a table, and then returns a value in the same row from a column you specify. By default, the table must be sorted in an ascending order.
		/// </summary>
		/// <param name="lookupValue">Is the value to be found in the first column of the table, and can be a value, a reference, or a text string.</param>
		/// <param name="tableArray">Is a table of text, numbers, or logical values, in which data is retrieved. tableArray can be a reference to a range or a range name.</param>
		/// <param name="colIndexNum">Is the column number in tableArray from which the matching value should be returned. The first column of values in the table is column 1.</param>
		/// <param name="rangeLookup">Is a logical value: to find the closest match in the first column (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.</param>
		// [[FCN_VLOOKUP]],VLookup,VLOOKUP,;M;fgrpLookup;3;MNSB;NSB,MRN,MRN,B;8;?math;fnVLookup:l;CWX;"[[PARAM_VLOOKUP]]";"[[FHLP_VLOOKUP]]";"[[AHLP1_VLOOKUP]]";"[[AHLP2_VLOOKUP]]";"[[AHLP3_VLOOKUP]]";"[[AHLP4_VLOOKUP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.VLookup_DispId, Name = "Func_VLookup")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|string|boolean>")]
		FunctionResult VLookup(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lookupValue,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|Excel.RangeReference|Excel.FunctionResult<any>")] object @tableArray,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|Excel.RangeReference|Excel.FunctionResult<any>")] object @colIndexNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @rangeLookup
		);

		/// <summary>
		/// Checks whether a value is a reference, and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.</param>
		// [[FCN_ISREF]],,ISREF,;ML;fgrpInfo;1;B;RENSBM;3;fnISERR;;CWX;"[[PARAM_ISREF]]";"[[FHLP_ISREF]]";"[[AHLP1_ISREF]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Isref_DispId, Name = "Func_Isref")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult Isref(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Returns the logarithm of a number to the base you specify.
		/// </summary>
		/// <param name="number">Is the positive real number for which you want the logarithm.</param>
		/// <param name="base">Is the base of the logarithm; 10 if omitted.</param>
		// [[FCN_LOG]],Log,LOG,;M;fgrpMathTrig;1;N;N,N;128;?math;fnLog;CWXL;"[[PARAM_LOG]]";"[[FHLP_LOG]]";"[[AHLP1_LOG]]";"[[AHLP2_LOG]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Log_DispId, Name = "Func_Log")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Log(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @base
		);

		/// <summary>
		/// Returns the character specified by the code number from the character set for your computer.
		/// </summary>
		/// <param name="number">Is a number between 1 and 255 specifying which character you want.</param>
		// `[[FCN_CHAR]],,CHAR,;ML;fgrpText;1;S;N;100;?convert:m;;CWXL;"[[PARAM_CHAR]]";"[[FHLP_CHAR]]";"[[AHLP1_CHAR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Char_DispId, Name = "Func_Char")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Char(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Converts all letters in a text string to lowercase.
		/// </summary>
		/// <param name="text">Is the text you want to convert to lowercase. Characters in Text that are not letters are not changed.</param>
		// `[[FCN_LOWER]],,LOWER,;ML;fgrpText;1;S;S;101;?convert:m;;CWXL;"[[PARAM_LOWER]]";"[[FHLP_LOWER]]";"[[AHLP1_LOWER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Lower_DispId, Name = "Func_Lower")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Lower(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Converts a text string to all uppercase letters.
		/// </summary>
		/// <param name="text">Is the text you want converted to uppercase, a reference or a text string.</param>
		// `[[FCN_UPPER]],,UPPER,;ML;fgrpText;1;S;S;102;?convert:m;;CWXL;"[[PARAM_UPPER]]";"[[FHLP_UPPER]]";"[[AHLP1_UPPER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Upper_DispId, Name = "Func_Upper")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Upper(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Converts a text string to proper case; the first letter in each word to uppercase, and all other letters to lowercase.
		/// </summary>
		/// <param name="text">Is text enclosed in quotation marks, a formula that returns text, or a reference to a cell containing text to partially capitalize.</param>
		// `[[FCN_PROPER]],Proper,PROPER,;ML;fgrpText;1;S;S;103;?convert:m;;CWXL;"[[PARAM_PROPER]]";"[[FHLP_PROPER]]";"[[AHLP1_PROPER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Proper_DispId, Name = "Func_Proper")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Proper(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Returns the specified number of characters from the start of a text string.
		/// </summary>
		/// <param name="text">Is the text string containing the characters you want to extract.</param>
		/// <param name="numChars">Specifies how many characters you want LEFT to extract; 1 if omitted.</param>
		// `[[FCN_LEFT]],,LEFT,;ML;fgrpText;1;S;S,NE;104;?convert:m;;CWXL;"[[PARAM_LEFT]]";"[[FHLP_LEFT]]";"[[AHLP1_LEFT]]";"[[AHLP2_LEFT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Left_DispId, Name = "Func_Left")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Left(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @numChars
		);

		/// <summary>
		/// Returns the specified number of characters from the end of a text string.
		/// </summary>
		/// <param name="text">Is the text string that contains the characters you want to extract.</param>
		/// <param name="numChars">Specifies how many characters you want to extract, 1 if omitted.</param>
		// `[[FCN_RIGHT]],,RIGHT,;ML;fgrpText;1;S;S,NE;105;?convert:m;;CWXL;"[[PARAM_RIGHT]]";"[[FHLP_RIGHT]]";"[[AHLP1_RIGHT]]";"[[AHLP2_RIGHT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Right_DispId, Name = "Func_Right")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Right(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @numChars
		);

		/// <summary>
		/// Checks whether two text strings are exactly the same, and returns TRUE or FALSE. EXACT is case-sensitive.
		/// </summary>
		/// <param name="text1">Is the first text string.</param>
		/// <param name="text2">Is the second text string.</param>
		// `[[FCN_EXACT]],,EXACT,;ML;fgrpText;2;B;S,S;106;?convert:m;;CWXL;"[[PARAM_EXACT]]";"[[FHLP_EXACT]]";"[[AHLP1_EXACT]]";"[[AHLP2_EXACT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Exact_DispId, Name = "Func_Exact")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult Exact(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text1,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text2
		);

		/// <summary>
		/// Removes all spaces from a text string except for single spaces between words.
		/// </summary>
		/// <param name="text">Is the text from which you want spaces removed.</param>
		// `[[FCN_TRIM]],Trim,TRIM,;ML;fgrpText;1;S;S;107;?convert:m;;CWXL;"[[PARAM_TRIM]]";"[[FHLP_TRIM]]";"[[AHLP1_TRIM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Trim_DispId, Name = "Func_Trim")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Trim(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Replaces part of a text string with a different text string.
		/// </summary>
		/// <param name="oldText">Is text in which you want to replace some characters.</param>
		/// <param name="startNum">Is the position of the character in oldText that you want to replace with newText.</param>
		/// <param name="numChars">Is the number of characters in oldText that you want to replace.</param>
		/// <param name="newText">Is the text that will replace characters in oldText.</param>
		// `[[FCN_REPLACE]],Replace,REPLACE,;ML;fgrpText;4;S;S,N,N,S;109;?convert:m;;CWXL;"[[PARAM_REPLACE]]";"[[FHLP_REPLACE]]";"[[AHLP1_REPLACE]]";"[[AHLP2_REPLACE]]";"[[AHLP3_REPLACE]]";"[[AHLP4_REPLACE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Replace_DispId, Name = "Func_Replace")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Replace(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @oldText,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numChars,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @newText
		);

		/// <summary>
		/// Replaces existing text with new text in a text string.
		/// </summary>
		/// <param name="text">Is the text or the reference to a cell containing text in which you want to substitute characters.</param>
		/// <param name="oldText">Is the existing text you want to replace. If the case of oldText does not match the case of text, SUBSTITUTE will not replace the text.</param>
		/// <param name="newText">Is the text you want to replace oldText with.</param>
		/// <param name="instanceNum">Specifies which occurrence of oldText you want to replace. If omitted, every instance of oldText is replaced.</param>
		// `[[FCN_SUBSTITUTE]],Substitute,SUBSTITUTE,;ML;fgrpText;3;S;S,S,S,S;110;?convert:m;;CWX;"[[PARAM_SUBSTITUTE]]";"[[FHLP_SUBSTITUTE]]";"[[AHLP1_SUBSTITUTE]]";"[[AHLP2_SUBSTITUTE]]";"[[AHLP3_SUBSTITUTE]]";"[[AHLP4_SUBSTITUTE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Substitute_DispId, Name = "Func_Substitute")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Substitute(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @oldText,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @newText,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @instanceNum
		);

		/// <summary>
		/// Returns a numeric code for the first character in a text string, in the character set used by your computer.
		/// </summary>
		/// <param name="text">Is the text for which you want the code of the first character.</param>
		// `[[FCN_CODE]],,CODE,;M;fgrpText;1;N;S;5;?convert:m;;CWXL;"[[PARAM_CODE]]";"[[FHLP_CODE]]";"[[AHLP1_CODE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Code_DispId, Name = "Func_Code")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Code(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Returns the starting position of one text string within another text string. FIND is case-sensitive.
		/// </summary>
		/// <param name="findText">Is the text you want to find. Use double quotes (empty text) to match the first character in withinText; wildcard characters not allowed.</param>
		/// <param name="withinText">Is the text containing the text you want to find.</param>
		/// <param name="startNum">Specifies the character at which to start the search. The first character in withinText is character number 1. If omitted, startNum = 1.</param>
		// `[[FCN_FIND]],Find,FIND,;ML;fgrpText;2;N;S,S,N;8;?convert:m;;CWXL;"[[PARAM_FIND]]";"[[FHLP_FIND]]";"[[AHLP1_FIND]]";"[[AHLP2_FIND]]";"[[AHLP3_FIND]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Find_DispId, Name = "Func_Find")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Find(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @findText,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @withinText,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @startNum
		);

		// SKIPPED due to: Function 'CELL' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns information about the formatting, location, or contents of the first cell, according to the sheet's reading order, in a reference.
		// /// </summary>
		// /// <param name="infoType">Is a text value that specifies what type of cell information you want.</param>
		// /// <param name="reference">Is the cell that you want information about.</param>
		// %-[[FCN_CELL]],,CELL,;M;fgrpInfo;1;NSBEM;S,R;1;fnCellInfo;;CWX;"[[PARAM_CELL]]";"[[FHLP_CELL]]";"[[AHLP1_CELL]]";"[[AHLP2_CELL]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Cell_DispId, Name = "Func_Cell")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult Cell(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @infoType,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @reference
		// );

		/// <summary>
		/// Checks whether a value is an error (#VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!) excluding #N/A, and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.</param>
		// [[FCN_ISERR]],IsErr,ISERR,;ML;fgrpInfo;1;B;NSBE;4;fnISERR;;CWXL;"[[PARAM_ISERR]]";"[[FHLP_ISERR]]";"[[AHLP1_ISERR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsErr_DispId, Name = "Func_IsErr")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsErr(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Checks whether a value is text, and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.</param>
		// [[FCN_ISTEXT]],IsText,ISTEXT,;ML;fgrpInfo;1;B;VENSB;5;fnISERR;;CWXL;"[[PARAM_ISTEXT]]";"[[FHLP_ISTEXT]]";"[[AHLP1_ISTEXT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsText_DispId, Name = "Func_IsText")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsText(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Checks whether a value is a number, and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.</param>
		// [[FCN_ISNUMBER]],IsNumber,ISNUMBER,;ML;fgrpInfo;1;B;VENSB;6;fnISERR;;CWXL;"[[PARAM_ISNUMBER]]";"[[FHLP_ISNUMBER]]";"[[AHLP1_ISNUMBER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsNumber_DispId, Name = "Func_IsNumber")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsNumber(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		// SKIPPED due to: Function 'ISBLANK' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Checks whether a reference is to an empty cell, and returns TRUE or FALSE.
		// /// </summary>
		// /// <param name="value">Is the cell or a name that refers to the cell you want to test.</param>
		// [[FCN_ISBLANK]],,ISBLANK,;ML;fgrpInfo;1;B;VENSB;7;fnISERR;;CWXL;"[[PARAM_ISBLANK]]";"[[FHLP_ISBLANK]]";"[[AHLP1_ISBLANK]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Isblank_DispId, Name = "Func_Isblank")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<boolean>")]
		// FunctionResult Isblank(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		// );

		/// <summary>
		/// Checks whether a value is text, and returns the text if it is, or returns double quotes (empty text) if it is not.
		/// </summary>
		/// <param name="value">Is the value to test.</param>
		// [[FCN_T]],,T,;M;fgrpText;1;S;NSBR;0;?fnNS;;CWXL;"[[PARAM_T]]";"[[FHLP_T]]";"[[AHLP1_T]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.T_DispId, Name = "Func_T")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult T(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Converts non-number value to a number, dates to serial numbers, TRUE to 1, anything else to 0 (zero).
		/// </summary>
		/// <param name="value">Is the value you want converted.</param>
		// [[FCN_N]],,N,;M;fgrpInfo;1;N;NSBR;1;?fnNS;;CWXL;"[[PARAM_N]]";"[[FHLP_N]]";"[[AHLP1_N]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.N_DispId, Name = "Func_N")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult N(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Converts a date in the form of text to a number that represents the date in Microsoft Excel date-time code.
		/// </summary>
		/// <param name="dateText">Is text that represents a date in a Microsoft Excel date format, between 1/1/1900 or 1/1/1904 (depending on the workbook's date system) and 12/31/9999.</param>
		// `[[FCN_DATEVALUE]],,DATEVALUE,;ML;fgrpDateTime;1;N;SN;6;?convert:m;;CWXL;"[[PARAM_DATEVALUE]]";"[[FHLP_DATEVALUE]]";"[[AHLP1_DATEVALUE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Datevalue_DispId, Name = "Func_Datevalue")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Datevalue(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @dateText
		);

		/// <summary>
		/// Converts a text time to an Excel serial number for a time, a number from 0 (12:00:00 AM) to 0.999988426 (11:59:59 PM). Format the number with a time format after entering the formula.
		/// </summary>
		/// <param name="timeText">Is a text string that gives a time in any one of the Microsoft Excel time formats (date information in the string is ignored).</param>
		// `[[FCN_TIMEVALUE]],,TIMEVALUE,;ML;fgrpDateTime;1;N;SN;7;?convert:m;;CWXL;"[[PARAM_TIMEVALUE]]";"[[FHLP_TIMEVALUE]]";"[[AHLP1_TIMEVALUE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Timevalue_DispId, Name = "Func_Timevalue")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Timevalue(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @timeText
		);

		/// <summary>
		/// Returns the straight-line depreciation of an asset for one period.
		/// </summary>
		/// <param name="cost">Is the initial cost of the asset.</param>
		/// <param name="salvage">Is the salvage value at the end of the life of the asset.</param>
		/// <param name="life">Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</param>
		// [[FCN_SLN]],Sln,SLN,;M;fgrpFinancial;3;N;N,N,N;1;?math;fnSLN;CWXL;"[[PARAM_SLN]]";"[[FHLP_SLN]]";"[[AHLP1_SLN]]";"[[AHLP2_SLN]]";"[[AHLP3_SLN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sln_DispId, Name = "Func_Sln")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sln(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cost,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @salvage,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @life
		);

		/// <summary>
		/// Returns the sum-of-years' digits depreciation of an asset for a specified period.
		/// </summary>
		/// <param name="cost">Is the initial cost of the asset.</param>
		/// <param name="salvage">Is the salvage value at the end of the life of the asset.</param>
		/// <param name="life">Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</param>
		/// <param name="per">Is the period and must use the same units as Life.</param>
		// [[FCN_SYD]],Syd,SYD,;M;fgrpFinancial;4;N;N,N,N,N;1;?math;fnSYD;CWXL;"[[PARAM_SYD]]";"[[FHLP_SYD]]";"[[AHLP1_SYD]]";"[[AHLP2_SYD]]";"[[AHLP3_SYD]]";"[[AHLP4_SYD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Syd_DispId, Name = "Func_Syd")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Syd(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cost,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @salvage,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @life,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @per
		);

		/// <summary>
		/// Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.
		/// </summary>
		/// <param name="cost">Is the initial cost of the asset.</param>
		/// <param name="salvage">Is the salvage value at the end of the life of the asset.</param>
		/// <param name="life">Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</param>
		/// <param name="period">Is the period for which you want to calculate the depreciation. Period must use the same units as Life.</param>
		/// <param name="factor">Is the rate at which the balance declines. If Factor is omitted, it is assumed to be 2 (the double-declining balance method).</param>
		// [[FCN_DDB]],Ddb,DDB,;M;fgrpFinancial;4;N;N,N,N,N,N;1;?math;fnDDB;CWXL;"[[PARAM_DDB]]";"[[FHLP_DDB]]";"[[AHLP1_DDB]]";"[[AHLP2_DDB]]";"[[AHLP3_DDB]]";"[[AHLP4_DDB]]";"[[AHLP5_DDB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ddb_DispId, Name = "Func_Ddb")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Ddb(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cost,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @salvage,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @life,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @period,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @factor
		);

		// SKIPPED due to: Return type is exclusively a Range type. We don't support a Range return type.
		// /// <summary>
		// /// Returns the reference specified by a text string.
		// /// </summary>
		// /// <param name="refText">Is a reference to a cell that contains an A1- or R1C1-style reference, a name defined as a reference, or a reference to a cell as a text string.</param>
		// /// <param name="a1">Is a logical value that specifies the type of reference in refText: R1C1-style = FALSE; A1-style = TRUE or omitted.</param>
		// -[[FCN_INDIRECT]],,INDIRECT,;;fgrpLookup;1;R;S,B;9;fnIndirect;;CWX;"[[PARAM_INDIRECT]]";"[[FHLP_INDIRECT]]";"[[AHLP1_INDIRECT]]";"[[AHLP2_INDIRECT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Indirect_DispId, Name = "Func_Indirect")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Indirect(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @refText,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @a1
		// );

		/// <summary>
		/// Removes all nonprintable characters from text.
		/// </summary>
		/// <param name="text">Is any worksheet information from which you want to remove nonprintable characters.</param>
		// `[[FCN_CLEAN]],Clean,CLEAN,;ML;fgrpText;1;S;S;108;?convert:m;;CWXL;"[[PARAM_CLEAN]]";"[[FHLP_CLEAN]]";"[[AHLP1_CLEAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Clean_DispId, Name = "Func_Clean")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Clean(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		// SKIPPED due to: Function 'MDETERM' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the matrix determinant of an array.
		// /// </summary>
		// /// <param name="array">Is a numeric array with an equal number of rows and columns, either a cell range or an array constant.</param>
		// [[FCN_MDETERM]],MDeterm,MDETERM,;M;fgrpMathTrig;1;N;M;1;?fnMatrix;;CWX;"[[PARAM_MDETERM]]";"[[FHLP_MDETERM]]";"[[AHLP1_MDETERM]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.MDeterm_DispId, Name = "Func_MDeterm")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult MDeterm(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array
		// );

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Returns the inverse matrix for the matrix stored in an array.
		// /// </summary>
		// /// <param name="array">Is a numeric array with an equal number of rows and columns, either a cell range or an array constant.</param>
		// [[FCN_MINVERSE]],MInverse,MINVERSE,;M;fgrpMathTrig;1;M;M;2;?fnMatrix;;CWX;"[[PARAM_MINVERSE]]";"[[FHLP_MINVERSE]]";"[[AHLP1_MINVERSE]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.MInverse_DispId, Name = "Func_MInverse")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult MInverse(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array
		// );

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant | Funcs.tok does not have a help-text description for parameter #1; is it intentional?
		// /// <summary>
		// /// Returns the matrix product of two arrays, an array with the same number of rows as array1 and columns as array2.
		// /// </summary>
		// /// <param name="array1">Is the first array of numbers to multiply and must have the same number of columns as Array2 has rows.</param>
		// /// <param name="array2"></param>
		// [[FCN_MMULT]],MMult,MMULT,;M;fgrpMathTrig;2;M;M,M;3;?fnMatrix;;CWX;"[[PARAM_MMULT]]";"[[FHLP_MMULT]]";"[[AHLP1_MMULT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.MMult_DispId, Name = "Func_MMult")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult MMult(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array2
		// );

		/// <summary>
		/// Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.
		/// </summary>
		/// <param name="rate">Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.</param>
		/// <param name="per">Is the period for which you want to find the interest and must be in the range 1 to Nper.</param>
		/// <param name="nper">Is the total number of payment periods in an investment.</param>
		/// <param name="pv">Is the present value, or the lump-sum amount that a series of future payments is worth now.</param>
		/// <param name="fv">Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, Fv = 0.</param>
		/// <param name="type">Is a logical value representing the timing of payment: at the end of the period = 0 or omitted, at the beginning of the period = 1.</param>
		// [[FCN_IPMT]],Ipmt,IPMT,;M;fgrpFinancial;4;N;N,N,N,N,N,N;1;?math;fnIPMT;CWXL;"[[PARAM_IPMT]]";"[[FHLP_IPMT]]";"[[AHLP1_IPMT]]";"[[AHLP2_IPMT]]";"[[AHLP3_IPMT]]";"[[AHLP4_IPMT]]";"[[AHLP5_IPMT]]";"[[AHLP6_IPMT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ipmt_DispId, Name = "Func_Ipmt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Ipmt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @per,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @fv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @type
		);

		/// <summary>
		/// Returns the payment on the principal for a given investment based on periodic, constant payments and a constant interest rate.
		/// </summary>
		/// <param name="rate">Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.</param>
		/// <param name="per">Specifies the period and must be in the range 1 to nper.</param>
		/// <param name="nper">Is the total number of payment periods in an investment.</param>
		/// <param name="pv">Is the present value: the total amount that a series of future payments is worth now.</param>
		/// <param name="fv">Is the future value, or cash balance you want to attain after the last payment is made.</param>
		/// <param name="type">Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.</param>
		// [[FCN_PPMT]],Ppmt,PPMT,;M;fgrpFinancial;4;N;N,N,N,N,N,N;1;?math;fnPPMT;CWXL;"[[PARAM_PPMT]]";"[[FHLP_PPMT]]";"[[AHLP1_PPMT]]";"[[AHLP2_PPMT]]";"[[AHLP3_PPMT]]";"[[AHLP4_PPMT]]";"[[AHLP5_PPMT]]";"[[AHLP6_PPMT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ppmt_DispId, Name = "Func_Ppmt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Ppmt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @per,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @fv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @type
		);

		/// <summary>
		/// Counts the number of cells in a range that are not empty.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 arguments representing the values and cells you want to count. Values can be any type of information.</param>
		// [[FCN_COUNTA]],CountA,COUNTA,;M3;fgrpStatistical;1;N;NRMEX,...;;?fnCountA;;CWXL;"[[PARAM_COUNTA]]";"[[FHLP_COUNTA]]";"[[AHLP1_COUNTA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CountA_DispId, Name = "Func_CountA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CountA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Multiplies all the numbers given as arguments.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers, logical values, or text representations of numbers that you want to multiply.</param>
		// [[FCN_PRODUCT]],Product,PRODUCT,;M3;fgrpMathTrig;1;N;NRMX,...;;?fnSumProduct;7;CWXL;"[[PARAM_PRODUCT]]";"[[FHLP_PRODUCT]]";"[[AHLP1_PRODUCT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Product_DispId, Name = "Func_Product")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Product(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the factorial of a number, equal to 1*2*3*...* Number.
		/// </summary>
		/// <param name="number">Is the nonnegative number you want the factorial of.</param>
		// [[FCN_FACT]],Fact,FACT,;M;fgrpMathTrig;1;N;N;;?math;fnFact;CWXL;"[[PARAM_FACT]]";"[[FHLP_FACT]]";"[[AHLP1_FACT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Fact_DispId, Name = "Func_Fact")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Fact(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Multiplies the values in the field (column) of records in the database that match the conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DPRODUCT]],DProduct,DPRODUCT,;M;fgrpDatabase;3;N;R,NSR,SR;;?rrangef;20;CWX;"[[PARAM_DPRODUCT]]";"[[FHLP_DPRODUCT]]";"[[AHLP1_DPRODUCT]]";"[[AHLP2_DPRODUCT]]";"[[AHLP3_DPRODUCT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DProduct_DispId, Name = "Func_DProduct")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DProduct(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Checks whether a value is not text (blank cells are not text), and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want tested: a cell; a formula; or a name referring to a cell, formula, or value.</param>
		// [[FCN_ISNONTEXT]],IsNonText,ISNONTEXT,;ML;fgrpInfo;1;B;VENSB;8;fnISERR;;CWXL;"[[PARAM_ISNONTEXT]]";"[[FHLP_ISNONTEXT]]";"[[AHLP1_ISNONTEXT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsNonText_DispId, Name = "Func_IsNonText")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsNonText(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Calculates the standard deviation based on the entire population of selected database entries.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DSTDEVP]],DStDevP,DSTDEVP,;M;fgrpDatabase;3;N;R,NSR,SR;Pstdvfinp,stdvini;?rrangef;14;CWX;"[[PARAM_DSTDEVP]]";"[[FHLP_DSTDEVP]]";"[[AHLP1_DSTDEVP]]";"[[AHLP2_DSTDEVP]]";"[[AHLP3_DSTDEVP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DStDevP_DispId, Name = "Func_DStDevP")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DStDevP(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Calculates variance based on the entire population of selected database entries.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DVARP]],DVarP,DVARP,;M;fgrpDatabase;3;N;R,NSR,SR;Pvarfinp,stdvini;?rrangef;14;CWX;"[[PARAM_DVARP]]";"[[FHLP_DVARP]]";"[[AHLP1_DVARP]]";"[[AHLP2_DVARP]]";"[[AHLP3_DVARP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DVarP_DispId, Name = "Func_DVarP")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DVarP(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Truncates a number to an integer by removing the decimal, or fractional, part of the number.
		/// </summary>
		/// <param name="number">Is the number you want to truncate.</param>
		/// <param name="numDigits">Is a number specifying the precision of the truncation, 0 (zero) if omitted.</param>
		// [[FCN_TRUNC]],,TRUNC,;M;fgrpMathTrig;1;N;N,N;128;?math;fnTrunc;CWXL;"[[PARAM_TRUNC]]";"[[FHLP_TRUNC]]";"[[AHLP1_TRUNC]]";"[[AHLP2_TRUNC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Trunc_DispId, Name = "Func_Trunc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Trunc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @numDigits
		);

		/// <summary>
		/// Checks whether a value is a logical value (TRUE or FALSE), and returns TRUE or FALSE.
		/// </summary>
		/// <param name="value">Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.</param>
		// [[FCN_ISLOGICAL]],IsLogical,ISLOGICAL,;ML;fgrpInfo;1;B;VENSB;9;fnISERR;;CWXL;"[[PARAM_ISLOGICAL]]";"[[FHLP_ISLOGICAL]]";"[[AHLP1_ISLOGICAL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsLogical_DispId, Name = "Func_IsLogical")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsLogical(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value
		);

		/// <summary>
		/// Counts nonblank cells in the field (column) of records in the database that match the conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DCOUNTA]],DCountA,DCOUNTA,;M;fgrpDatabase;3;N;R,XNSR,SR;Pgetcntall;?rrangef;16;CWX;"[[PARAM_DCOUNTA]]";"[[FHLP_DCOUNTA]]";"[[AHLP1_DCOUNTA]]";"[[AHLP2_DCOUNTA]]";"[[AHLP3_DCOUNTA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DCountA_DispId, Name = "Func_DCountA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DCountA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Converts a number to text, using currency format.
		/// </summary>
		/// <param name="number">Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.</param>
		/// <param name="decimals">Is the number of digits to the right of the decimal point.</param>
		// `~204$[[FCN_USDOLLAR]],USDollar,USDOLLAR,COM.MICROSOFT.USDOLLAR;ML;fgrpText;1;S;N,N;38;?convert:m;;CWXL;"[[PARAM_USDOLLAR]]";"[[FHLP_USDOLLAR]]";"[[AHLP1_USDOLLAR]]";"[[AHLP2_USDOLLAR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.USDollar_DispId, Name = "Func_USDollar")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult USDollar(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @decimals
		);

		/// <summary>
		/// Finds the starting position of one text string within another text string. FINDB is case-sensitive. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="findText">Is the text you want to find.</param>
		/// <param name="withinText">Is the text containing the text you want to find.</param>
		/// <param name="startNum">Specifies the character at which to start the search.</param>
		// `$[[FCN_FINDB]],FindB,FINDB,;ML;fgrpText;2;N;S,S,N;18;?convert:m;;CX;"[[PARAM_FINDB]]";"[[FHLP_FINDB]]";"[[AHLP1_FINDB]]";"[[AHLP2_FINDB]]";"[[AHLP3_FINDB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.FindB_DispId, Name = "Func_FindB")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult FindB(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @findText,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @withinText,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @startNum
		);

		// SKIPPED due to: Function 'SEARCHB' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the number of the character at which a specific character or text string is first found, reading left to right (not case-sensitive). Use with double-byte character sets (DBCS).
		// /// </summary>
		// /// <param name="findText">Is the text you want to find.</param>
		// /// <param name="withinText">Is the text in which you want to search for findText.</param>
		// /// <param name="startNum">Is the character number in withinText, counting from the left, at which you want to start searching.</param>
		// `$[[FCN_SEARCHB]],SearchB,SEARCHB,;ML;fgrpText;2;N;S,S,N;19;?convert:m;;CX;"[[PARAM_SEARCHB]]";"[[FHLP_SEARCHB]]";"[[AHLP1_SEARCHB]]";"[[AHLP2_SEARCHB]]";"[[AHLP3_SEARCHB]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.SearchB_DispId, Name = "Func_SearchB")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult SearchB(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @findText,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @withinText,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @startNum
		// );

		/// <summary>
		/// Replaces part of a text string with a different text string. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="oldText">Is text in which you want to replace some characters.</param>
		/// <param name="startNum">Is the position of the character in oldText that you want to replace with newText.</param>
		/// <param name="numBytes">Is the number of characters in oldText that you want to replace with newText.</param>
		/// <param name="newText">Is the text that will replace characters in oldText.</param>
		// `$[[FCN_REPLACEB]],ReplaceB,REPLACEB,;ML;fgrpText;4;S;S,N,N,S;119;?convert:m;;CX;"[[PARAM_REPLACEB]]";"[[FHLP_REPLACEB]]";"[[AHLP1_REPLACEB]]";"[[AHLP2_REPLACEB]]";"[[AHLP3_REPLACEB]]";"[[AHLP4_REPLACEB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ReplaceB_DispId, Name = "Func_ReplaceB")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult ReplaceB(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @oldText,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numBytes,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @newText
		);

		/// <summary>
		/// Returns the specified number of characters from the start of a text string. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="text">Is the text string containing the characters you want to extract.</param>
		/// <param name="numBytes">Specifies how many characters you want LEFT to return.</param>
		// `$[[FCN_LEFTB]],,LEFTB,;ML;fgrpText;1;S;S,NE;114;?convert:m;;CX;"[[PARAM_LEFTB]]";"[[FHLP_LEFTB]]";"[[AHLP1_LEFTB]]";"[[AHLP2_LEFTB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Leftb_DispId, Name = "Func_Leftb")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Leftb(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @numBytes
		);

		/// <summary>
		/// Returns the specified number of characters from the end of a text string. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="text">Is the text string containing the characters you want to extract.</param>
		/// <param name="numBytes">Specifies how many characters you want to extract.</param>
		// `$[[FCN_RIGHTB]],,RIGHTB,;ML;fgrpText;1;S;S,NE;115;?convert:m;;CX;"[[PARAM_RIGHTB]]";"[[FHLP_RIGHTB]]";"[[AHLP1_RIGHTB]]";"[[AHLP2_RIGHTB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rightb_DispId, Name = "Func_Rightb")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Rightb(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @numBytes
		);

		/// <summary>
		/// Returns characters from the middle of a text string, given a starting position and length. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="text">Is the text string containing the characters you want to extract.</param>
		/// <param name="startNum">Is the position of the first character you want to extract in text.</param>
		/// <param name="numBytes">Specifies how many characters to return from text.</param>
		// `$[[FCN_MIDB]],,MIDB,;ML;fgrpText;3;S;S,N,N;12;?convert:m;;CXWL;"[[PARAM_MIDB]]";"[[FHLP_MIDB]]";"[[AHLP1_MIDB]]";"[[AHLP2_MIDB]]";"[[AHLP3_MIDB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Midb_DispId, Name = "Func_Midb")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Midb(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numBytes
		);

		/// <summary>
		/// Returns the number of characters in a text string. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="text">Is the text whose length you want to find.</param>
		// `$[[FCN_LENB]],,LENB,;ML;fgrpText;1;N;S;13;?convert:m;;CXWL;"[[PARAM_LENB]]";"[[FHLP_LENB]]";"[[AHLP1_LENB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Lenb_DispId, Name = "Func_Lenb")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Lenb(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Rounds a number up, away from zero.
		/// </summary>
		/// <param name="number">Is any real number that you want rounded up.</param>
		/// <param name="numDigits">Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.</param>
		// [[FCN_ROUNDUP]],RoundUp,ROUNDUP,;M;fgrpMathTrig;2;N;N,N;128;?math;fnRoundUp;CWXL;"[[PARAM_ROUNDUP]]";"[[FHLP_ROUNDUP]]";"[[AHLP1_ROUNDUP]]";"[[AHLP2_ROUNDUP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.RoundUp_DispId, Name = "Func_RoundUp")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult RoundUp(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numDigits
		);

		/// <summary>
		/// Rounds a number down, toward zero.
		/// </summary>
		/// <param name="number">Is any real number that you want rounded down.</param>
		/// <param name="numDigits">Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.</param>
		// [[FCN_ROUNDDOWN]],RoundDown,ROUNDDOWN,;M;fgrpMathTrig;2;N;N,N;128;?math;fnTrunc;CWXL;"[[PARAM_ROUNDDOWN]]";"[[FHLP_ROUNDDOWN]]";"[[AHLP1_ROUNDDOWN]]";"[[AHLP2_ROUNDDOWN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.RoundDown_DispId, Name = "Func_RoundDown")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult RoundDown(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numDigits
		);

		/// <summary>
		/// Changes full-width (double-byte) characters to half-width (single-byte) characters. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="text">Is a text, or a reference to a cell containing a text.</param>
		// `$[[FCN_ASC]],Asc,ASC,;ML;fgrpText;1;S;S;120;?convert:m;;CWXL;"[[PARAM_ASC]]";"[[FHLP_ASC]]";"[[AHLP1_ASC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Asc_DispId, Name = "Func_Asc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Asc(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Changes half-width (single-byte) characters within a character string to full-width (double-byte) characters. Use with double-byte character sets (DBCS).
		/// </summary>
		/// <param name="text">Is a text, or a reference to a cell containing a text.</param>
		// `$[[FCN_DBCS]],Dbcs,DBCS,JIS;ML;fgrpText;1;S;S;121;?convert:m;;CWXL;"[[PARAM_DBCS]]";"[[FHLP_DBCS]]";"[[AHLP1_DBCS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Dbcs_DispId, Name = "Func_Dbcs")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Dbcs(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		// SKIPPED due to: Function 'ADDRESS' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Creates a cell reference as text, given specified row and column numbers.
		// /// </summary>
		// /// <param name="rowNum">Is the row number to use in the cell reference: Row_number = 1 for row 1.</param>
		// /// <param name="columnNum">Is the column number to use in the cell reference. For example, Column_number = 4 for column D.</param>
		// /// <param name="absNum">Specifies the reference type: absolute = 1; absolute row/relative column = 2; relative row/absolute column = 3; relative = 4.</param>
		// /// <param name="a1">Is a logical value that specifies the reference style: A1 style = 1 or TRUE; R1C1 style = 0 or FALSE.</param>
		// /// <param name="sheetText">Is text specifying the name of the worksheet to be used as the external reference.</param>
		// ~219[[FCN_ADDRESS]],,ADDRESS,;M;fgrpLookup;2;S;N,NX,NX,BX,SX;10;?fnAddress;;CWX;"[[PARAM_ADDRESS]]";"[[FHLP_ADDRESS]]";"[[AHLP1_ADDRESS]]";"[[AHLP2_ADDRESS]]";"[[AHLP3_ADDRESS]]";"[[AHLP4_ADDRESS]]";"[[AHLP5_ADDRESS]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Address_DispId, Name = "Func_Address")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult Address(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rowNum,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @columnNum,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @absNum,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @a1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @sheetText
		// );

		/// <summary>
		/// Returns the number of days between two dates based on a 360-day year (twelve 30-day months).
		/// </summary>
		/// <param name="startDate">startDate and endDate are the two dates between which you want to know the number of days.</param>
		/// <param name="endDate">startDate and endDate are the two dates between which you want to know the number of days.</param>
		/// <param name="method">Is a logical value specifying the calculation method: U.S. (NASD) = FALSE or omitted; European = TRUE.</param>
		// `[[FCN_DAYS360]],Days360,DAYS360,;M;fgrpDateTime;2;N;N,N,B;1;?math;fnD360;CWXL;"[[PARAM_DAYS360]]";"[[FHLP_DAYS360]]";"[[AHLP1_DAYS360]]";"[[AHLP2_DAYS360]]";"[[AHLP3_DAYS360]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Days360_DispId, Name = "Func_Days360")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Days360(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @method
		);

		/// <summary>
		/// Returns the current date formatted as a date.
		/// </summary>
		// -[[FCN_TODAY]],,TODAY,;M;fgrpDateTime;0;N;;;?math;fnToday;CWX;;"[[FHLP_TODAY]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Today_DispId, Name = "Func_Today")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Today(
		);

		/// <summary>
		/// Returns the depreciation of an asset for any period you specify, including partial periods, using the double-declining balance method or some other method you specify.
		/// </summary>
		/// <param name="cost">Is the initial cost of the asset.</param>
		/// <param name="salvage">Is the salvage value at the end of the life of the asset.</param>
		/// <param name="life">Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</param>
		/// <param name="startPeriod">Is the starting period for which you want to calculate the depreciation, in the same units as Life.</param>
		/// <param name="endPeriod">Is the ending period for which you want to calculate the depreciation, in the same units as Life.</param>
		/// <param name="factor">Is the rate at which the balance declines, 2 (double-declining balance) if omitted.</param>
		/// <param name="noSwitch">Switch to straight-line depreciation when depreciation is greater than the declining balance = FALSE or omitted; do not switch = TRUE.</param>
		// [[FCN_VDB]],Vdb,VDB,;M;fgrpFinancial;5;N;N,N,N,N,N,N,B;;?math;fnVDB;CWXL;"[[PARAM_VDB]]";"[[FHLP_VDB]]";"[[AHLP1_VDB]]";"[[AHLP2_VDB]]";"[[AHLP3_VDB]]";"[[AHLP4_VDB]]";"[[AHLP5_VDB]]";"[[AHLP6_VDB]]";"[[AHLP7_VDB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Vdb_DispId, Name = "Func_Vdb")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Vdb(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cost,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @salvage,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @life,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @factor,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @noSwitch
		);

		/// <summary>
		/// Returns the median, or the number in the middle of the set of given numbers.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the median.</param>
		// &[[FCN_MEDIAN]],Median,MEDIAN,;M3;fgrpStatistical;1;N;NRM,...;PfnFinStat,InitStat;?rangef;22;CWXL;"[[PARAM_MEDIAN]]";"[[FHLP_MEDIAN]]";"[[AHLP1_MEDIAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Median_DispId, Name = "Func_Median")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Median(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		// SKIPPED due to: Function 'SUMPRODUCT' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the sum of the products of corresponding ranges or arrays.
		// /// </summary>
		// /// <param name="values">List of parameters, whose elements are 2 to 255 arrays for which you want to multiply and then add components. All arrays must have the same dimensions.</param>
		// [[FCN_SUMPRODUCT]],SumProduct,SUMPRODUCT,;M;fgrpMathTrig;1;N;M,...;4;?fnMatrix;;CWX;"[[PARAM_SUMPRODUCT]]";"[[FHLP_SUMPRODUCT]]";"[[AHLP1_SUMPRODUCT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.SumProduct_DispId, Name = "Func_SumProduct")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult SumProduct(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );

		/// <summary>
		/// Returns the hyperbolic sine of a number.
		/// </summary>
		/// <param name="number">Is any real number.</param>
		// [[FCN_SINH]],Sinh,SINH,;M;fgrpMathTrig;1;N;N;;?math;Sinh;CWXL;"[[PARAM_SINH]]";"[[FHLP_SINH]]";"[[AHLP1_SINH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sinh_DispId, Name = "Func_Sinh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sinh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the hyperbolic cosine of a number.
		/// </summary>
		/// <param name="number">Is any real number.</param>
		// [[FCN_COSH]],Cosh,COSH,;M;fgrpMathTrig;1;N;N;;?math;Cosh;CWXL;"[[PARAM_COSH]]";"[[FHLP_COSH]]";"[[AHLP1_COSH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Cosh_DispId, Name = "Func_Cosh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Cosh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the hyperbolic tangent of a number.
		/// </summary>
		/// <param name="number">Is any real number.</param>
		// [[FCN_TANH]],Tanh,TANH,;M;fgrpMathTrig;1;N;N;;?math;Tanh;CWXL;"[[PARAM_TANH]]";"[[FHLP_TANH]]";"[[AHLP1_TANH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Tanh_DispId, Name = "Func_Tanh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Tanh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the inverse hyperbolic sine of a number.
		/// </summary>
		/// <param name="number">Is any real number equal to or greater than 1.</param>
		// [[FCN_ASINH]],Asinh,ASINH,;M;fgrpMathTrig;1;N;N;;?math;Asinh;CWXL;"[[PARAM_ASINH]]";"[[FHLP_ASINH]]";"[[AHLP1_ASINH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Asinh_DispId, Name = "Func_Asinh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Asinh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the inverse hyperbolic cosine of a number.
		/// </summary>
		/// <param name="number">Is any real number equal to or greater than 1.</param>
		// [[FCN_ACOSH]],Acosh,ACOSH,;M;fgrpMathTrig;1;N;N;;?math;Acosh;CWXL;"[[PARAM_ACOSH]]";"[[FHLP_ACOSH]]";"[[AHLP1_ACOSH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Acosh_DispId, Name = "Func_Acosh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Acosh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the inverse hyperbolic tangent of a number.
		/// </summary>
		/// <param name="number">Is any real number between -1 and 1 excluding -1 and 1.</param>
		// [[FCN_ATANH]],Atanh,ATANH,;M;fgrpMathTrig;1;N;N;;?math;Atanh;CWXL;"[[PARAM_ATANH]]";"[[FHLP_ATANH]]";"[[AHLP1_ATANH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Atanh_DispId, Name = "Func_Atanh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Atanh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Extracts from a database a single record that matches the conditions you specify.
		/// </summary>
		/// <param name="database">Is the range of cells that makes up the list or database. A database is a list of related data.</param>
		/// <param name="field">Is either the label of the column in double quotation marks or a number that represents the column's position in the list.</param>
		/// <param name="criteria">Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.</param>
		// [[FCN_DGET]],DGet,DGET,;M;fgrpDatabase;3;NBS;R,NSR,SR;Pgetfin;?rrangef;16;CWX;"[[PARAM_DGET]]";"[[FHLP_DGET]]";"[[AHLP1_DGET]]";"[[AHLP2_DGET]]";"[[AHLP3_DGET]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DGet_DispId, Name = "Func_DGet")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|boolean|string>")]
		FunctionResult DGet(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @database,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @field,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		// SKIPPED due to: Function 'INFO' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns information about the current operating environment.
		// /// </summary>
		// /// <param name="typeText">Is text specifying what type of information you want returned.</param>
		// -[[FCN_INFO]],,INFO,;M;fgrpInfo;1;NS;S;6;fnCellInfo;;CX;"[[PARAM_INFO]]";"[[FHLP_INFO]]";"[[AHLP1_INFO]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Info_DispId, Name = "Func_Info")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string>")]
		// FunctionResult Info(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @typeText
		// );

		/// <summary>
		/// Returns the depreciation of an asset for a specified period using the fixed-declining balance method.
		/// </summary>
		/// <param name="cost">Is the initial cost of the asset.</param>
		/// <param name="salvage">Is the salvage value at the end of the life of the asset.</param>
		/// <param name="life">Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</param>
		/// <param name="period">Is the period for which you want to calculate the depreciation. Period must use the same units as Life.</param>
		/// <param name="month">Is the number of months in the first year. If month is omitted, it is assumed to be 12.</param>
		// [[FCN_DB]],Db,DB,;M;fgrpFinancial;4;N;N,N,N,N,N;1;?math;fnDB;CWX;"[[PARAM_DB]]";"[[FHLP_DB]]";"[[AHLP1_DB]]";"[[AHLP2_DB]]";"[[AHLP3_DB]]";"[[AHLP4_DB]]";"[[AHLP5_DB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Db_DispId, Name = "Func_Db")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Db(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cost,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @salvage,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @life,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @period,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @month
		);

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Calculates how often values occur within a range of values and then returns a vertical array of numbers having one more element than Bins_array.
		// /// </summary>
		// /// <param name="dataArray">Is an array of or reference to a set of values for which you want to count frequencies (blanks and text are ignored).</param>
		// /// <param name="binsArray">Is an array of or reference to intervals into which you want to group the values in dataArray.</param>
		// [[FCN_FREQUENCY]],Frequency,FREQUENCY,;M3;fgrpStatistical;2;M;RM,RM;;?fnFreq;;CWX;"[[PARAM_FREQUENCY]]";"[[FHLP_FREQUENCY]]";"[[AHLP1_FREQUENCY]]";"[[AHLP2_FREQUENCY]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Frequency_DispId, Name = "Func_Frequency")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Frequency(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @dataArray,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @binsArray
		// );

		/// <summary>
		/// Returns a number matching an error value.
		/// </summary>
		/// <param name="errorVal">Is the error value for which you want the identifying number, and can be an actual error value or a reference to a cell containing an error value.</param>
		// [[FCN_ERROR.TYPE]],,ERROR.TYPE,;M;fgrpInfo;1;N;SNBE;11;fnErrorType;;CWX;"[[PARAM_ERROR.TYPE]]";"[[FHLP_ERROR.TYPE]]";"[[AHLP1_ERROR.TYPE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Error_Type_DispId, Name = "Func_Error_Type")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Error_Type(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|number|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @errorVal
		);

		/// <summary>
		/// Returns the average of the absolute deviations of data points from their mean. Arguments can be numbers or names, arrays, or references that contain numbers.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 arguments for which you want the average of the absolute deviations.</param>
		// &[[FCN_AVEDEV]],AveDev,AVEDEV,;M3;fgrpStatistical;1;N;NRM,...;;?fnAveDevSqZ;36;CWXL;"[[PARAM_AVEDEV]]";"[[FHLP_AVEDEV]]";"[[AHLP1_AVEDEV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AveDev_DispId, Name = "Func_AveDev")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AveDev(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the natural logarithm of the gamma function.
		/// </summary>
		/// <param name="x">Is the value for which you want to calculate GAMMALN, a positive number.</param>
		// [[FCN_GAMMALN]],GammaLn,GAMMALN,>GAMMALN;M;fgrpStatistical;1;N;N;;?math;fnGammaLn;CWXL;"[[PARAM_GAMMALN]]";"[[FHLP_GAMMALN]]";"[[AHLP1_GAMMALN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.GammaLn_DispId, Name = "Func_GammaLn")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult GammaLn(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x
		);

		/// <summary>
		/// Returns the number of combinations for a given number of items.
		/// </summary>
		/// <param name="number">Is the total number of items.</param>
		/// <param name="numberChosen">Is the number of items in each combination.</param>
		// [[FCN_COMBIN]],Combin,COMBIN,;M;fgrpMathTrig;2;N;N,N;128;?math;fnCombin;CWX;"[[PARAM_COMBIN]]";"[[FHLP_COMBIN]]";"[[AHLP1_COMBIN]]";"[[AHLP2_COMBIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Combin_DispId, Name = "Func_Combin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Combin(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberChosen
		);

		/// <summary>
		/// Rounds a positive number up and negative number down to the nearest even integer.
		/// </summary>
		/// <param name="number">Is the value to round.</param>
		// [[FCN_EVEN]],Even,EVEN,;M;fgrpMathTrig;1;N;N;;?math;fnEven;CWXL;"[[PARAM_EVEN]]";"[[FHLP_EVEN]]";"[[AHLP1_EVEN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Even_DispId, Name = "Func_Even")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Even(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the Fisher transformation.
		/// </summary>
		/// <param name="x">Is the value for which you want the transformation, a number between -1 and 1, excluding -1 and 1.</param>
		// [[FCN_FISHER]],Fisher,FISHER,;M;fgrpStatistical;1;N;N;;?math;fnFish;CWXL;"[[PARAM_FISHER]]";"[[FHLP_FISHER]]";"[[AHLP1_FISHER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Fisher_DispId, Name = "Func_Fisher")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Fisher(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x
		);

		/// <summary>
		/// Returns the inverse of the Fisher transformation: if y = FISHER(x), then FISHERINV(y) = x.
		/// </summary>
		/// <param name="y">Is the value for which you want to perform the inverse of the transformation.</param>
		// [[FCN_FISHERINV]],FisherInv,FISHERINV,;M;fgrpStatistical;1;N;N;;?math;fnFishInv;CWXL;"[[PARAM_FISHERINV]]";"[[FHLP_FISHERINV]]";"[[AHLP1_FISHERINV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.FisherInv_DispId, Name = "Func_FisherInv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult FisherInv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @y
		);

		/// <summary>
		/// Returns a normalized value from a distribution characterized by a mean and standard deviation.
		/// </summary>
		/// <param name="x">Is the value you want to normalize.</param>
		/// <param name="mean">Is the arithmetic mean of the distribution.</param>
		/// <param name="standardDev">Is the standard deviation of the distribution, a positive number.</param>
		// [[FCN_STANDARDIZE]],Standardize,STANDARDIZE,;M;fgrpStatistical;3;N;N,N,N;1;?math;fnNrmlize;CWXL;"[[PARAM_STANDARDIZE]]";"[[FHLP_STANDARDIZE]]";"[[AHLP1_STANDARDIZE]]";"[[AHLP2_STANDARDIZE]]";"[[AHLP3_STANDARDIZE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Standardize_DispId, Name = "Func_Standardize")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Standardize(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @mean,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @standardDev
		);

		/// <summary>
		/// Rounds a positive number up and negative number down to the nearest odd integer.
		/// </summary>
		/// <param name="number">Is the value to round.</param>
		// [[FCN_ODD]],Odd,ODD,;M;fgrpMathTrig;1;N;N;;?math;fnOdd;CWXL;"[[PARAM_ODD]]";"[[FHLP_ODD]]";"[[AHLP1_ODD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Odd_DispId, Name = "Func_Odd")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Odd(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the number of permutations for a given number of objects that can be selected from the total objects.
		/// </summary>
		/// <param name="number">Is the total number of objects.</param>
		/// <param name="numberChosen">Is the number of objects in each permutation.</param>
		// [[FCN_PERMUT]],Permut,PERMUT,;M;fgrpStatistical;2;N;N,N;128;?math;fnPermut;CWX;"[[PARAM_PERMUT]]";"[[FHLP_PERMUT]]";"[[AHLP1_PERMUT]]";"[[AHLP2_PERMUT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Permut_DispId, Name = "Func_Permut")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Permut(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberChosen
		);

		// SKIPPED due to: Function 'SUMXMY2' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Sums the squares of the differences in two corresponding ranges or arrays.
		// /// </summary>
		// /// <param name="arrayX">Is the first range or array of values and can be a number or name, array, or reference that contains numbers.</param>
		// /// <param name="arrayY">Is the second range or array of values and can be a number or name, array, or reference that contains numbers.</param>
		// [[FCN_SUMXMY2]],SumXMY2,SUMXMY2,;M;fgrpMathTrig;2;N;M,M;2;?Range2:m;;CWX;"[[PARAM_SUMXMY2]]";"[[FHLP_SUMXMY2]]";"[[AHLP1_SUMXMY2]]";"[[AHLP2_SUMXMY2]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.SumXMY2_DispId, Name = "Func_SumXMY2")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult SumXMY2(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @arrayX,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @arrayY
		// );

		// SKIPPED due to: Function 'SUMX2MY2' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Sums the differences between the squares of two corresponding ranges or arrays.
		// /// </summary>
		// /// <param name="arrayX">Is the first range or array of numbers and can be a number or name, array, or reference that contains numbers.</param>
		// /// <param name="arrayY">Is the second range or array of numbers and can be a number or name, array, or reference that contains numbers.</param>
		// [[FCN_SUMX2MY2]],SumX2MY2,SUMX2MY2,;M;fgrpMathTrig;2;N;M,M;3;?Range2:m;;CWX;"[[PARAM_SUMX2MY2]]";"[[FHLP_SUMX2MY2]]";"[[AHLP1_SUMX2MY2]]";"[[AHLP2_SUMX2MY2]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.SumX2MY2_DispId, Name = "Func_SumX2MY2")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult SumX2MY2(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @arrayX,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @arrayY
		// );

		// SKIPPED due to: Function 'SUMX2PY2' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the sum total of the sums of squares of numbers in two corresponding ranges or arrays.
		// /// </summary>
		// /// <param name="arrayX">Is the first range or array of numbers and can be a number or name, array, or reference that contains numbers.</param>
		// /// <param name="arrayY">Is the second range or array of numbers and can be a number or name, array, or reference that contains numbers.</param>
		// [[FCN_SUMX2PY2]],SumX2PY2,SUMX2PY2,;M;fgrpMathTrig;2;N;M,M;4;?Range2:m;;CWX;"[[PARAM_SUMX2PY2]]";"[[FHLP_SUMX2PY2]]";"[[AHLP1_SUMX2PY2]]";"[[AHLP2_SUMX2PY2]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.SumX2PY2_DispId, Name = "Func_SumX2PY2")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult SumX2PY2(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @arrayX,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @arrayY
		// );

		// SKIPPED due to: Function 'CORREL' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the correlation coefficient between two data sets.
		// /// </summary>
		// /// <param name="array1">Is a cell range of values. The values should be numbers, names, arrays, or references that contain numbers.</param>
		// /// <param name="array2">Is a second cell range of values. The values should be numbers, names, arrays, or references that contain numbers.</param>
		// [[FCN_CORREL]],Correl,CORREL,;M;fgrpStatistical;2;N;M,M;70;?Range2:m;;CWX;"[[PARAM_CORREL]]";"[[FHLP_CORREL]]";"[[AHLP1_CORREL]]";"[[AHLP2_CORREL]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Correl_DispId, Name = "Func_Correl")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Correl(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array2
		// );

		// SKIPPED due to: Function 'INTERCEPT' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Calculates the point at which a line will intersect the y-axis by using a best-fit regression line plotted through the known x-values and y-values.
		// /// </summary>
		// /// <param name="knownYs">Is the dependent set of observations or data and can be numbers or names, arrays, or references that contain numbers.</param>
		// /// <param name="knownXs">Is the independent set of observations or data and can be numbers or names, arrays, or references that contain numbers.</param>
		// [[FCN_INTERCEPT]],Intercept,INTERCEPT,;M;fgrpStatistical;2;N;M,M;74;?Range2:m;;CWX;"[[PARAM_INTERCEPT]]";"[[FHLP_INTERCEPT]]";"[[AHLP1_INTERCEPT]]";"[[AHLP2_INTERCEPT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Intercept_DispId, Name = "Func_Intercept")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Intercept(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownXs
		// );

		// SKIPPED due to: Function 'PEARSON' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the Pearson product moment correlation coefficient, r.
		// /// </summary>
		// /// <param name="array1">Is a set of independent values.</param>
		// /// <param name="array2">Is a set of dependent values.</param>
		// [[FCN_PEARSON]],Pearson,PEARSON,;M;fgrpStatistical;2;N;M,M;70;?Range2:m;;CWX;"[[PARAM_PEARSON]]";"[[FHLP_PEARSON]]";"[[AHLP1_PEARSON]]";"[[AHLP2_PEARSON]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Pearson_DispId, Name = "Func_Pearson")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Pearson(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array2
		// );

		// SKIPPED due to: Function 'RSQ' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the square of the Pearson product moment correlation coefficient through the given data points.
		// /// </summary>
		// /// <param name="knownYs">Is an array or range of data points and can be numbers or names, arrays, or references that contain numbers.</param>
		// /// <param name="knownXs">Is an array or range of data points and can be numbers or names, arrays, or references that contain numbers.</param>
		// [[FCN_RSQ]],RSq,RSQ,;M;fgrpStatistical;2;N;M,M;76;?Range2:m;;CWX;"[[PARAM_RSQ]]";"[[FHLP_RSQ]]";"[[AHLP1_RSQ]]";"[[AHLP2_RSQ]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.RSq_DispId, Name = "Func_RSq")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult RSq(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownXs
		// );

		// SKIPPED due to: Function 'STEYX' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the standard error of the predicted y-value for each x in a regression.
		// /// </summary>
		// /// <param name="knownYs">Is an array or range of dependent data points and can be numbers or names, arrays, or references that contain numbers.</param>
		// /// <param name="knownXs">Is an array or range of independent data points and can be numbers or names, arrays, or references that contain numbers.</param>
		// [[FCN_STEYX]],StEyx,STEYX,;M;fgrpStatistical;2;N;M,M;77;?Range2:m;;CWX;"[[PARAM_STEYX]]";"[[FHLP_STEYX]]";"[[AHLP1_STEYX]]";"[[AHLP2_STEYX]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.StEyx_DispId, Name = "Func_StEyx")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult StEyx(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownXs
		// );

		// SKIPPED due to: Function 'SLOPE' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the slope of the linear regression line through the given data points.
		// /// </summary>
		// /// <param name="knownYs">Is an array or cell range of numeric dependent data points and can be numbers or names, arrays, or references that contain numbers.</param>
		// /// <param name="knownXs">Is the set of independent data points and can be numbers or names, arrays, or references that contain numbers.</param>
		// [[FCN_SLOPE]],Slope,SLOPE,;M;fgrpStatistical;2;N;M,M;206;?Range2:m;;CWX;"[[PARAM_SLOPE]]";"[[FHLP_SLOPE]]";"[[AHLP1_SLOPE]]";"[[AHLP2_SLOPE]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Slope_DispId, Name = "Func_Slope")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Slope(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownXs
		// );

		// SKIPPED due to: Function 'PROB' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the probability that values in a range are between two limits or equal to a lower limit.
		// /// </summary>
		// /// <param name="xRange">Is the range of numeric values of x with which there are associated probabilities.</param>
		// /// <param name="probRange">Is the set of probabilities associated with values in xRange, values between 0 and 1 and excluding 0.</param>
		// /// <param name="lowerLimit">Is the lower bound on the value for which you want a probability.</param>
		// /// <param name="upperLimit">Is the optional upper bound on the value. If omitted, PROB returns the probability that xRange values are equal to lowerLimit.</param>
		// [[FCN_PROB]],Prob,PROB,;M;fgrpStatistical;3;N;M,M,N,NX;16;?Range2:m;;CWX;"[[PARAM_PROB]]";"[[FHLP_PROB]]";"[[AHLP1_PROB]]";"[[AHLP2_PROB]]";"[[AHLP3_PROB]]";"[[AHLP4_PROB]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Prob_DispId, Name = "Func_Prob")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Prob(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @xRange,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probRange,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lowerLimit,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @upperLimit
		// );

		/// <summary>
		/// Returns the sum of squares of deviations of data points from their sample mean.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 arguments, or an array or array reference, on which you want DEVSQ to calculate.</param>
		// &[[FCN_DEVSQ]],DevSq,DEVSQ,;M3;fgrpStatistical;1;N;NRM,...;;?fnAveDevSqZ;42;CWXL;"[[PARAM_DEVSQ]]";"[[FHLP_DEVSQ]]";"[[AHLP1_DEVSQ]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DevSq_DispId, Name = "Func_DevSq")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DevSq(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the geometric mean of an array or range of positive numeric data.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the mean.</param>
		// &[[FCN_GEOMEAN]],GeoMean,GEOMEAN,;M3;fgrpStatistical;1;N;NRM,...;;?fnGeomean;48;CWXL;"[[PARAM_GEOMEAN]]";"[[FHLP_GEOMEAN]]";"[[AHLP1_GEOMEAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.GeoMean_DispId, Name = "Func_GeoMean")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult GeoMean(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the harmonic mean of a data set of positive numbers: the reciprocal of the arithmetic mean of reciprocals.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the harmonic mean.</param>
		// &[[FCN_HARMEAN]],HarMean,HARMEAN,;M3;fgrpStatistical;1;N;NRM,...;PfnFinStat,InitCVal;?rangef;56;CWXL;"[[PARAM_HARMEAN]]";"[[FHLP_HARMEAN]]";"[[AHLP1_HARMEAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.HarMean_DispId, Name = "Func_HarMean")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult HarMean(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the sum of the squares of the arguments. The arguments can be numbers, arrays, names, or references to cells that contain numbers.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers, arrays, names, or references to arrays for which you want the sum of the squares.</param>
		// &[[FCN_SUMSQ]],SumSq,SUMSQ,;M3;fgrpMathTrig;1;N;NRM,...;;?fnSumSq;52;CWXL;"[[PARAM_SUMSQ]]";"[[FHLP_SUMSQ]]";"[[AHLP1_SUMSQ]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.SumSq_DispId, Name = "Func_SumSq")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult SumSq(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the kurtosis of a data set.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the kurtosis.</param>
		// &[[FCN_KURT]],Kurt,KURT,;M3;fgrpStatistical;1;N;NRM,...;PfnFinStat,InitCVal;?rangef;58;CWXL;"[[PARAM_KURT]]";"[[FHLP_KURT]]";"[[AHLP1_KURT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Kurt_DispId, Name = "Func_Kurt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Kurt(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the skewness of a distribution: a characterization of the degree of asymmetry of a distribution around its mean.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the skewness.</param>
		// &[[FCN_SKEW]],Skew,SKEW,;M3;fgrpStatistical;1;N;NRM,...;PfnFinStat,InitCVal;?rangef;66;CWXL;"[[PARAM_SKEW]]";"[[FHLP_SKEW]]";"[[AHLP1_SKEW]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Skew_DispId, Name = "Func_Skew")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Skew(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the k-th largest value in a data set. For example, the fifth largest number.
		/// </summary>
		/// <param name="array">Is the array or range of data for which you want to determine the k-th largest value.</param>
		/// <param name="k">Is the position (from the largest) in the array or cell range of the value to return.</param>
		// &[[FCN_LARGE]],Large,LARGE,;M3;fgrpStatistical;2;N;NRM,N;PfnFinStat,InitStat;?rangef;80;CWX;"[[PARAM_LARGE]]";"[[FHLP_LARGE]]";"[[AHLP1_LARGE]]";"[[AHLP2_LARGE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Large_DispId, Name = "Func_Large")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Large(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @k
		);

		/// <summary>
		/// Returns the k-th smallest value in a data set. For example, the fifth smallest number.
		/// </summary>
		/// <param name="array">Is an array or range of numerical data for which you want to determine the k-th smallest value.</param>
		/// <param name="k">Is the position (from the smallest) in the array or range of the value to return.</param>
		// &[[FCN_SMALL]],Small,SMALL,;M3;fgrpStatistical;2;N;NRM,N;PfnFinStat,InitStat;?rangef;86;CWX;"[[PARAM_SMALL]]";"[[FHLP_SMALL]]";"[[AHLP1_SMALL]]";"[[AHLP2_SMALL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Small_DispId, Name = "Func_Small")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Small(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @k
		);

		/// <summary>
		/// Returns the mean of the interior portion of a set of data values.
		/// </summary>
		/// <param name="array">Is the range or array of values to trim and average.</param>
		/// <param name="percent">Is the fractional number of data points to exclude from the top and bottom of the data set.</param>
		// &[[FCN_TRIMMEAN]],TrimMean,TRIMMEAN,;M3;fgrpStatistical;2;N;NRM,N;PfnFinStat,InitStat;?rangef;110;CWX;"[[PARAM_TRIMMEAN]]";"[[FHLP_TRIMMEAN]]";"[[AHLP1_TRIMMEAN]]";"[[AHLP2_TRIMMEAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.TrimMean_DispId, Name = "Func_TrimMean")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult TrimMean(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @percent
		);

		/// <summary>
		/// Joins several text strings into one text string.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 text strings to be joined into a single text string and can be text strings, numbers, or single-cell references.</param>
		// `[[FCN_CONCATENATE]],,CONCATENATE,;ML;fgrpText;1;S;S,...;123;?convert:m;;CWXL;"[[PARAM_CONCATENATE]]";"[[FHLP_CONCATENATE]]";"[[AHLP1_CONCATENATE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Concatenate_DispId, Name = "Func_Concatenate")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Concatenate(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the result of a number raised to a power.
		/// </summary>
		/// <param name="number">Is the base number, any real number.</param>
		/// <param name="power">Is the exponent, to which the base number is raised.</param>
		// [[FCN_POWER]],Power,POWER,;M;fgrpMathTrig;2;N;N,N;1;?fnPower:m;;CWXL;"[[PARAM_POWER]]";"[[FHLP_POWER]]";"[[AHLP1_POWER]]";"[[AHLP2_POWER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Power_DispId, Name = "Func_Power")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Power(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @power
		);

		/// <summary>
		/// Converts degrees to radians.
		/// </summary>
		/// <param name="angle">Is an angle in degrees that you want to convert.</param>
		// [[FCN_RADIANS]],Radians,RADIANS,;M;fgrpMathTrig;1;N;N;;?math;radians;CWXL;"[[PARAM_RADIANS]]";"[[FHLP_RADIANS]]";"[[AHLP1_RADIANS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Radians_DispId, Name = "Func_Radians")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Radians(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @angle
		);

		/// <summary>
		/// Converts radians to degrees.
		/// </summary>
		/// <param name="angle">Is the angle in radians that you want to convert.</param>
		// [[FCN_DEGREES]],Degrees,DEGREES,;M;fgrpMathTrig;1;N;N;;?math;degrees;CWXL;"[[PARAM_DEGREES]]";"[[FHLP_DEGREES]]";"[[AHLP1_DEGREES]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Degrees_DispId, Name = "Func_Degrees")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Degrees(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @angle
		);

		/// <summary>
		/// Returns a subtotal in a list or database.
		/// </summary>
		/// <param name="functionNum">Is the number 1 to 11 that specifies the summary function for the subtotal.</param>
		/// <param name="values">List of parameters, whose elements are 1 to 254 ranges or references for which you want the subtotal.</param>
		// [[FCN_SUBTOTAL]],Subtotal,SUBTOTAL,;M;fgrpMathTrig;2;N;N,R,...;;?RangefSubTotal;124;CWX;"[[PARAM_SUBTOTAL]]";"[[FHLP_SUBTOTAL]]";"[[AHLP1_SUBTOTAL]]";"[[AHLP2_SUBTOTAL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Subtotal_DispId, Name = "Func_Subtotal")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Subtotal(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @functionNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Adds the cells specified by a given condition or criteria.
		/// </summary>
		/// <param name="range">Is the range of cells you want evaluated.</param>
		/// <param name="criteria">Is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.</param>
		/// <param name="sumRange">Are the actual cells to sum. If omitted, the cells in range are used.</param>
		// [[FCN_SUMIF]],SumIf,SUMIF,;ML;fgrpMathTrig;2;N;R,NSBE,R;;?IfRangef;2;CWX;"[[PARAM_SUMIF]]";"[[FHLP_SUMIF]]";"[[AHLP1_SUMIF]]";"[[AHLP2_SUMIF]]";"[[AHLP3_SUMIF]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.SumIf_DispId, Name = "Func_SumIf")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult SumIf(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @range,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @sumRange
		);

		/// <summary>
		/// Counts the number of cells within a range that meet the given condition.
		/// </summary>
		/// <param name="range">Is the range of cells from which you want to count nonblank cells.</param>
		/// <param name="criteria">Is the condition in the form of a number, expression, or text that defines which cells will be counted.</param>
		// [[FCN_COUNTIF]],CountIf,COUNTIF,;ML;fgrpStatistical;2;N;R,NSBE;;?IfRangef;0;CWX;"[[PARAM_COUNTIF]]";"[[FHLP_COUNTIF]]";"[[AHLP1_COUNTIF]]";"[[AHLP2_COUNTIF]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CountIf_DispId, Name = "Func_CountIf")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CountIf(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @range,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria
		);

		/// <summary>
		/// Counts the number of empty cells in a specified range of cells.
		/// </summary>
		/// <param name="range">Is the range from which you want to count the empty cells.</param>
		// [[FCN_COUNTBLANK]],CountBlank,COUNTBLANK,;M;fgrpStatistical;1;N;R;;?fnCountBlank:m;0;CWX;"[[PARAM_COUNTBLANK]]";"[[FHLP_COUNTBLANK]]";"[[AHLP1_COUNTBLANK]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CountBlank_DispId, Name = "Func_CountBlank")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CountBlank(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @range
		);

		/// <summary>
		/// Returns the interest paid during a specific period of an investment.
		/// </summary>
		/// <param name="rate">Interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.</param>
		/// <param name="per">Period for which you want to find the interest.</param>
		/// <param name="nper">Number of payment periods in an investment.</param>
		/// <param name="pv">Lump sum amount that a series of future payments is right now.</param>
		// [[FCN_ISPMT]],Ispmt,ISPMT,;M;fgrpFinancial;4;N;N,N,N,N;1;?math;fnISPMT;CWXL;"[[PARAM_ISPMT]]";"[[FHLP_ISPMT]]";"[[AHLP1_ISPMT]]";"[[AHLP2_ISPMT]]";"[[AHLP3_ISPMT]]";"[[AHLP4_ISPMT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ispmt_DispId, Name = "Func_Ispmt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Ispmt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @per,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv
		);

		// SKIPPED due to: Funcs.tok does not have a description of the parameters; is it intentional?
		// /// <summary>
		// /// Calculates date between start and end.
		// /// </summary>
		// /// <param name=""></param>
		// /// <param name=""></param>
		// /// <param name=""></param>
		// $[[FCN_DATEDIF]],,DATEDIF,;M;fgrpDateTime;3;N;N,N,S;1;?math;fnDateDif;CWXL;;
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Datedif_DispId, Name = "Func_Datedif")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Datedif(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @
		// );

		// SKIPPED due to: Help is missing from funcs.tok, so likely not something allowed in formulas (maybe carry-over of pre-VBA Macros?) | Funcs.tok does not have a description of the parameters; is it intentional?
		// /// <summary>
		// /// 
		// /// </summary>
		// /// <param name=""></param>
		// `$[[FCN_DATESTRING]],,DATESTRING,COM.MICROSOFT.DATESTRING;ML;fgrpDateTime;1;S;N;91;?convert:m;;CWX;;
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Datestring_DispId, Name = "Func_Datestring")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult Datestring(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @
		// );

		// SKIPPED due to: Help is missing from funcs.tok, so likely not something allowed in formulas (maybe carry-over of pre-VBA Macros?) | Funcs.tok does not have a description of the parameters; is it intentional?
		// /// <summary>
		// /// 
		// /// </summary>
		// /// <param name=""></param>
		// /// <param name=""></param>
		// `$[[FCN_NUMBERSTRING]],,NUMBERSTRING,COM.MICROSOFT.NUMBERSTRING;ML;fgrpText;2;S;N,N;92;?convert:m;;CWX;;
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Numberstring_DispId, Name = "Func_Numberstring")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult Numberstring(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @
		// );

		/// <summary>
		/// Converts an Arabic numeral to Roman, as text.
		/// </summary>
		/// <param name="number">Is the Arabic numeral you want to convert.</param>
		/// <param name="form">Is the number specifying the type of Roman numeral you want.</param>
		// [[FCN_ROMAN]],Roman,ROMAN,;M;fgrpMathTrig;1;S;N,BN;1;?fnRoman:m;;CWXL;"[[PARAM_ROMAN]]";"[[FHLP_ROMAN]]";"[[AHLP1_ROMAN]]";"[[AHLP2_ROMAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Roman_DispId, Name = "Func_Roman")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Roman(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @form
		);

		// SKIPPED due to: Function 'GETPIVOTDATA' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Extracts data stored in a PivotTable.
		// /// </summary>
		// /// <param name="dataField">Is the name of the data field to extract data from.</param>
		// /// <param name="pivotTable">Is a reference to a cell or range of cells in the PivotTable that contains the data you want to retrieve.</param>
		// /// <param name="values">List of parameters, where the first element of each pair is the Field to refer to , and the second element is field item to refer to.</param>
		// [[FCN_GETPIVOTDATA]],GetPivotData,GETPIVOTDATA,;;fgrpLookup;2;NSBE;RS,SR,S,NSBEX,...,...;;?fnGetPivotData;;CX;"[[PARAM_GETPIVOTDATA]]";"[[FHLP_GETPIVOTDATA]]";"[[AHLP1_GETPIVOTDATA]]";"[[AHLP2_GETPIVOTDATA]]";"[[AHLP3_GETPIVOTDATA]]";"[[AHLP4_GETPIVOTDATA]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.GetPivotData_DispId, Name = "Func_GetPivotData")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult GetPivotData(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|string|Excel.RangeReference|Excel.FunctionResult<any>")] object @dataField,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pivotTable,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>|number|boolean>")] params object[] @values
		// );

		/// <summary>
		/// Creates a shortcut or jump that opens a document stored on your hard drive, a network server, or on the Internet.
		/// </summary>
		/// <param name="linkLocation">Is the text giving the path and file name to the document to be opened, a hard drive location, UNC address, or URL path.</param>
		/// <param name="friendlyName">Is text or a number that is displayed in the cell. If omitted, the cell displays the linkLocation text.</param>
		// [[FCN_HYPERLINK]],Hyperlink,HYPERLINK,;M;fgrpLookup;1;NMSB;S,NMSB;;fnHyperlink:m;;CWX;"[[PARAM_HYPERLINK]]";"[[FHLP_HYPERLINK]]";"[[AHLP1_HYPERLINK]]";"[[AHLP2_HYPERLINK]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Hyperlink_DispId, Name = "Func_Hyperlink")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number|string|boolean>")]
		FunctionResult Hyperlink(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @linkLocation,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @friendlyName
		);

		// SKIPPED due to: Function 'PHONETIC' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Get phonetic string.
		// /// </summary>
		// /// <param name="reference">Is a reference to a cell containing a phonetic string.</param>
		// `$[[FCN_FURIGANA]],Phonetic,PHONETIC,COM.MICROSOFT.PHONETIC;;fgrpInfo;1;S;R;17;?fnPhonetic;;CX;"[[PARAM_FURIGANA]]";"[[FHLP_FURIGANA]]";"[[AHLP1_FURIGANA]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Phonetic_DispId, Name = "Func_Phonetic")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult Phonetic(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reference
		// );

		/// <summary>
		/// Returns the average (arithmetic mean) of its arguments, evaluating text and FALSE in arguments as 0; TRUE evaluates as 1. Arguments can be numbers, names, arrays, or references.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 arguments for which you want the average.</param>
		// [[FCN_AVERAGEA]],AverageA,AVERAGEA,;M3;fgrpStatistical;1;N;NRM,...;1;?fnAverage;;CWXL;"[[PARAM_AVERAGEA]]";"[[FHLP_AVERAGEA]]";"[[AHLP1_AVERAGEA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AverageA_DispId, Name = "Func_AverageA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AverageA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the largest value in a set of values. Does not ignore logical values and text.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.</param>
		// [[FCN_MAXA]],MaxA,MAXA,;M3;fgrpStatistical;1;N;NRM,...;1;?fnMinMax;2;CWXL;"[[PARAM_MAXA]]";"[[FHLP_MAXA]]";"[[AHLP1_MAXA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.MaxA_DispId, Name = "Func_MaxA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult MaxA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the smallest value in a set of values. Does not ignore logical values and text.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.</param>
		// [[FCN_MINA]],MinA,MINA,;M3;fgrpStatistical;1;N;NRM,...;1;?fnMinMax;1;CWXL;"[[PARAM_MINA]]";"[[FHLP_MINA]]";"[[AHLP1_MINA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.MinA_DispId, Name = "Func_MinA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult MinA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Calculates standard deviation based on an entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 values corresponding to a population and can be values, names, arrays, or references that contain values.</param>
		// [[FCN_STDEVPA]],StDevPA,STDEVPA,;M3;fgrpStatistical;1;N;NRM,...;1;?fnVarianceP;1;CWXL;"[[PARAM_STDEVPA]]";"[[FHLP_STDEVPA]]";"[[AHLP1_STDEVPA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.StDevPA_DispId, Name = "Func_StDevPA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult StDevPA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Calculates variance based on the entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 value arguments corresponding to a population.</param>
		// [[FCN_VARPA]],VarPA,VARPA,;M3;fgrpStatistical;1;N;NRM,...;1;?fnVarianceP;0;CWXL;"[[PARAM_VARPA]]";"[[FHLP_VARPA]]";"[[AHLP1_VARPA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.VarPA_DispId, Name = "Func_VarPA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult VarPA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Estimates standard deviation based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 values corresponding to a sample of a population and can be values or names or references to values.</param>
		// [[FCN_STDEVA]],StDevA,STDEVA,;M3;fgrpStatistical;1;N;NRM,...;1;?fnVariance;1;CWXL;"[[PARAM_STDEVA]]";"[[FHLP_STDEVA]]";"[[AHLP1_STDEVA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.StDevA_DispId, Name = "Func_StDevA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult StDevA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Estimates variance based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 value arguments corresponding to a sample of a population.</param>
		// [[FCN_VARA]],VarA,VARA,;M3;fgrpStatistical;1;N;NRM,...;1;?fnVariance;0;CWXL;"[[PARAM_VARA]]";"[[FHLP_VARA]]";"[[AHLP1_VARA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.VarA_DispId, Name = "Func_VarA")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult VarA(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Converts a number to text (baht).
		/// </summary>
		/// <param name="number">Is a number that you want to convert.</param>
		// `[[FCN_BAHTTEXT]],BahtText,BAHTTEXT,COM.MICROSOFT.BAHTTEXT;ML;fgrpText;1;S;N;200;?convert:m;;CXWL;"[[PARAM_BAHTTEXT]]";"[[FHLP_BAHTTEXT]]";"[[AHLP1_BAHTTEXT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.BahtText_DispId, Name = "Func_BahtText")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult BahtText(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		// SKIPPED due to: Function 'THAIDAYOFWEEK' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the day of week in Thai.
		// /// </summary>
		// /// <param name="number">Is a number specify date which you want to convert.</param>
		// `$[[FCN_THAIDOW]],ThaiDayOfWeek,THAIDAYOFWEEK,COM.MICROSOFT.THAIDAYOFWEEK;ML;fgrpText;1;S;N;201;?convert:m;;CXWL;"[[PARAM_THAIDOW]]";"[[FHLP_THAIDOW]]";"[[AHLP1_THAIDOW]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ThaiDayOfWeek_DispId, Name = "Func_ThaiDayOfWeek")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult ThaiDayOfWeek(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'THAIDIGIT' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Converts a number to Thai digit text.
		// /// </summary>
		// /// <param name="number">Is a number that you want to convert.</param>
		// `$[[FCN_THAIDIGIT]],ThaiDigit,THAIDIGIT,COM.MICROSOFT.THAIDIGIT;ML;fgrpText;1;S;NS;202;?convert:m;;CXWL;"[[PARAM_THAIDIGIT]]";"[[FHLP_THAIDIGIT]]";"[[AHLP1_THAIDIGIT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ThaiDigit_DispId, Name = "Func_ThaiDigit")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult ThaiDigit(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'THAIMONTHOFYEAR' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the month of year in Thai.
		// /// </summary>
		// /// <param name="number">Is a number specifying the month.</param>
		// `$[[FCN_THAIMOY]],ThaiMonthOfYear,THAIMONTHOFYEAR,COM.MICROSOFT.THAIMONTHOFYEAR;ML;fgrpText;1;S;N;203;?convert:m;;CXWL;"[[PARAM_THAIMOY]]";"[[FHLP_THAIMOY]]";"[[AHLP1_THAIMOY]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ThaiMonthOfYear_DispId, Name = "Func_ThaiMonthOfYear")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult ThaiMonthOfYear(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'THAINUMSOUND' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Converts a number to text.
		// /// </summary>
		// /// <param name="number">Is a number that you want to convert.</param>
		// `$[[FCN_THAINUMSOUND]],ThaiNumSound,THAINUMSOUND,COM.MICROSOFT.THAINUMSOUND;ML;fgrpText;1;S;N;207;?convert:m;;CXWL;"[[PARAM_THAINUMSOUND]]";"[[FHLP_THAINUMSOUND]]";"[[AHLP1_THAINUMSOUND]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ThaiNumSound_DispId, Name = "Func_ThaiNumSound")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult ThaiNumSound(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'THAINUMSTRING' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Converts a number to text.
		// /// </summary>
		// /// <param name="number">Is a number that you want to convert.</param>
		// `$[[FCN_THAINUMSTRING]],ThaiNumString,THAINUMSTRING,COM.MICROSOFT.THAINUMSTRING;ML;fgrpText;1;S;N;204;?convert:m;;CXWL;"[[PARAM_THAINUMSTRING]]";"[[FHLP_THAINUMSTRING]]";"[[AHLP1_THAINUMSTRING]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ThaiNumString_DispId, Name = "Func_ThaiNumString")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult ThaiNumString(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'THAISTRINGLENGTH' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the number of Thai characters.
		// /// </summary>
		// /// <param name="text">Is text that you want to count.</param>
		// `$[[FCN_THAISTRINGLENGTH]],ThaiStringLength,THAISTRINGLENGTH,COM.MICROSOFT.THAISTRINGLENGTH;ML;fgrpText;1;N;S;208;?convert:m;;CXWL;"[[PARAM_THAISTRINGLENGTH]]";"[[FHLP_THAISTRINGLENGTH]]";"[[AHLP1_THAISTRINGLENGTH]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ThaiStringLength_DispId, Name = "Func_ThaiStringLength")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult ThaiStringLength(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		// );

		// SKIPPED due to: Function 'ISTHAIDIGIT' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns TRUE if all characters are Thai digits.
		// /// </summary>
		// /// <param name="text">Is text that you want to check.</param>
		// `$[[FCN_ISTHAIDIGIT]],IsThaiDigit,ISTHAIDIGIT,COM.MICROSOFT.ISTHAIDIGIT;ML;fgrpText;1;B;S;209;?convert:m;;CXWL;"[[PARAM_ISTHAIDIGIT]]";"[[FHLP_ISTHAIDIGIT]]";"[[AHLP1_ISTHAIDIGIT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsThaiDigit_DispId, Name = "Func_IsThaiDigit")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<boolean>")]
		// FunctionResult IsThaiDigit(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		// );

		// SKIPPED due to: Function 'ROUNDBAHTDOWN' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the floor of value (in Thai currency unit).
		// /// </summary>
		// /// <param name="number">Is a number that you want to convert.</param>
		// `$[[FCN_ROUNDBAHTDOWN]],RoundBahtDown,ROUNDBAHTDOWN,COM.MICROSOFT.ROUNDBAHTDOWN;ML;fgrpText;1;N;N;210;?convert:m;;CXWL;"[[PARAM_ROUNDBAHTDOWN]]";"[[FHLP_ROUNDBAHTDOWN]]";"[[AHLP1_ROUNDBAHTDOWN]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.RoundBahtDown_DispId, Name = "Func_RoundBahtDown")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult RoundBahtDown(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'ROUNDBAHTUP' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the ceiling of value (in Thai currency unit).
		// /// </summary>
		// /// <param name="number">Is a number that you want to convert.</param>
		// `$[[FCN_ROUNDBAHTUP]],RoundBahtUp,ROUNDBAHTUP,COM.MICROSOFT.ROUNDBAHTUP;ML;fgrpText;1;N;N;211;?convert:m;;CXWL;"[[PARAM_ROUNDBAHTUP]]";"[[FHLP_ROUNDBAHTUP]]";"[[AHLP1_ROUNDBAHTUP]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.RoundBahtUp_DispId, Name = "Func_RoundBahtUp")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult RoundBahtUp(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'THAIYEAR' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the Thai year.
		// /// </summary>
		// /// <param name="number">Is a number.</param>
		// `$[[FCN_THAIYEAR]],ThaiYear,THAIYEAR,COM.MICROSOFT.THAIYEAR;ML;fgrpText;1;N;N;212;?convert:m;;CXWL;"[[PARAM_THAIYEAR]]";"[[FHLP_THAIYEAR]]";"[[AHLP1_THAIYEAR]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ThaiYear_DispId, Name = "Func_ThaiYear")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult ThaiYear(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		// );

		// SKIPPED due to: Function 'CUBEVALUE' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns an aggregated value from the cube.
		// /// </summary>
		// /// <param name="connection">Is the name of a connection to an OLAP cube.</param>
		// /// <param name="values">Is a slicer that determines the portion of the OLAP cube for which the aggregated value is to be retrieved.</param>
		// |+[[FCN_CUBEVALUE]],CubeValue,CUBEVALUE,COM.MICROSOFT.CUBEVALUE;;fgrpCube;1;NSBE;S,MRS,...;;?fnCubeValue;;CWX;"[[PARAM_CUBEVALUE]]";"[[FHLP_CUBEVALUE]]";"[[AHLP1_CUBEVALUE]]";"[[AHLP2_CUBEVALUE]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.CubeValue_DispId, Name = "Func_CubeValue")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult CubeValue(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @connection,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|string|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );

		// SKIPPED due to: Function 'CUBEMEMBER' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns a member or tuple from the cube.
		// /// </summary>
		// /// <param name="connection">Is the name of a connection to an OLAP cube.</param>
		// /// <param name="memberExpression">Is the expression representing the name of a member or tuple in the OLAP cube.</param>
		// /// <param name="caption">Is the caption to be displayed in the cell.</param>
		// |+[[FCN_CUBEMEMBER]],CubeMember,CUBEMEMBER,COM.MICROSOFT.CUBEMEMBER;;fgrpCube;2;SE;S,MRS,S;;?fnCubeMember;;CWX;"[[PARAM_CUBEMEMBER]]";"[[FHLP_CUBEMEMBER]]";"[[AHLP1_CUBEMEMBER]]";"[[AHLP2_CUBEMEMBER]]";"[[AHLP3_CUBEMEMBER]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.CubeMember_DispId, Name = "Func_CubeMember")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult CubeMember(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @connection,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|string|Excel.RangeReference|Excel.FunctionResult<any>")] object @memberExpression,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @caption
		// );

		// SKIPPED due to: Function 'CUBEMEMBERPROPERTY' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the value of a member property from the cube.
		// /// </summary>
		// /// <param name="connection">Is the name of a connection to an OLAP cube.</param>
		// /// <param name="memberExpression">Is the expression representing the name of a member in the OLAP cube.</param>
		// /// <param name="property">Is the property name.</param>
		// |+[[FCN_CUBEMEMBERPROPERTY]],CubeMemberProperty,CUBEMEMBERPROPERTY,COM.MICROSOFT.CUBEMEMBERPROPERTY;;fgrpCube;3;NSBE;S,S,S;;?fnCubeMemberProperty;;CWX;"[[PARAM_CUBEMEMBERPROPERTY]]";"[[FHLP_CUBEMEMBERPROPERTY]]";"[[AHLP1_CUBEMEMBERPROPERTY]]";"[[AHLP2_CUBEMEMBERPROPERTY]]";"[[AHLP3_CUBEMEMBERPROPERTY]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.CubeMemberProperty_DispId, Name = "Func_CubeMemberProperty")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult CubeMemberProperty(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @connection,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @memberExpression,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @property
		// );

		// SKIPPED due to: Function 'CUBERANKEDMEMBER' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the nth, or ranked, member in a set.
		// /// </summary>
		// /// <param name="connection">Is the name of a connection to an OLAP cube.</param>
		// /// <param name="setExpression">Is the set from which the element is to be retrieved.</param>
		// /// <param name="rank">Is the rank of the element to be retrieved.</param>
		// /// <param name="caption">Is the caption to be displayed in the cell.</param>
		// |+[[FCN_CUBERANKEDMEMBER]],CubeRankedMember,CUBERANKEDMEMBER,COM.MICROSOFT.CUBERANKEDMEMBER;;fgrpCube;3;SE;S,S,N,S;;?fnCubeRankedMember;;CWX;"[[PARAM_CUBERANKEDMEMBER]]";"[[FHLP_CUBERANKEDMEMBER]]";"[[AHLP1_CUBERANKEDMEMBER]]";"[[AHLP2_CUBERANKEDMEMBER]]";"[[AHLP3_CUBERANKEDMEMBER]]";"[[AHLP4_CUBERANKEDMEMBER]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.CubeRankedMember_DispId, Name = "Func_CubeRankedMember")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult CubeRankedMember(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @connection,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @setExpression,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rank,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @caption
		// );

		/// <summary>
		/// Converts a Hexadecimal number to binary.
		/// </summary>
		/// <param name="number">Is the hexadecimal number you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_HEX2BIN]],Hex2Bin,HEX2BIN,;M;fgrpEngineering;1;NE;NXSEBR,NSXEBR;16;?fnChangeBase;2;CWX;"[[PARAM_HEX2BIN]]";"[[FHLP_HEX2BIN]]";"[[AHLP1_HEX2BIN]]";"[[AHLP2_HEX2BIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Hex2Bin_DispId, Name = "Func_Hex2Bin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Hex2Bin(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts a hexadecimal number to decimal.
		/// </summary>
		/// <param name="number">Is the hexadecimal number you want to convert.</param>
		// [[FCN_HEX2DEC]],Hex2Dec,HEX2DEC,;M;fgrpEngineering;1;NE;NXSEBR;16;?fnChangeBase;10;CWX;"[[PARAM_HEX2DEC]]";"[[FHLP_HEX2DEC]]";"[[AHLP1_HEX2DEC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Hex2Dec_DispId, Name = "Func_Hex2Dec")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Hex2Dec(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Converts a hexadecimal number to octal.
		/// </summary>
		/// <param name="number">Is the hexadecimal number you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_HEX2OCT]],Hex2Oct,HEX2OCT,;M;fgrpEngineering;1;NE;NXSEBR,NSXEBR;16;?fnChangeBase;8;CWX;"[[PARAM_HEX2OCT]]";"[[FHLP_HEX2OCT]]";"[[AHLP1_HEX2OCT]]";"[[AHLP2_HEX2OCT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Hex2Oct_DispId, Name = "Func_Hex2Oct")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Hex2Oct(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts a decimal number to binary.
		/// </summary>
		/// <param name="number">Is the decimal integer you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_DEC2BIN]],Dec2Bin,DEC2BIN,;M;fgrpEngineering;1;NE;NXSEBR,NSXEBR;10;?fnChangeBase;2;CWX;"[[PARAM_DEC2BIN]]";"[[FHLP_DEC2BIN]]";"[[AHLP1_DEC2BIN]]";"[[AHLP2_DEC2BIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Dec2Bin_DispId, Name = "Func_Dec2Bin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Dec2Bin(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts a decimal number to hexadecimal.
		/// </summary>
		/// <param name="number">Is the decimal integer you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_DEC2HEX]],Dec2Hex,DEC2HEX,;M;fgrpEngineering;1;NE;NXSEBR,NXSEBR;10;?fnChangeBase;16;CWX;"[[PARAM_DEC2HEX]]";"[[FHLP_DEC2HEX]]";"[[AHLP1_DEC2HEX]]";"[[AHLP2_DEC2HEX]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Dec2Hex_DispId, Name = "Func_Dec2Hex")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Dec2Hex(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts a decimal number to octal.
		/// </summary>
		/// <param name="number">Is the decimal integer you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_DEC2OCT]],Dec2Oct,DEC2OCT,;M;fgrpEngineering;1;NE;NXSEBR,NSXEBR;10;?fnChangeBase;8;CWX;"[[PARAM_DEC2OCT]]";"[[FHLP_DEC2OCT]]";"[[AHLP1_DEC2OCT]]";"[[AHLP2_DEC2OCT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Dec2Oct_DispId, Name = "Func_Dec2Oct")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Dec2Oct(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts an octal number to binary.
		/// </summary>
		/// <param name="number">Is the octal number you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_OCT2BIN]],Oct2Bin,OCT2BIN,;M;fgrpEngineering;1;NE;NXSEBR,NSXEBR;8;?fnChangeBase;2;CWX;"[[PARAM_OCT2BIN]]";"[[FHLP_OCT2BIN]]";"[[AHLP1_OCT2BIN]]";"[[AHLP2_OCT2BIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Oct2Bin_DispId, Name = "Func_Oct2Bin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Oct2Bin(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts an octal number to hexadecimal.
		/// </summary>
		/// <param name="number">Is the octal number you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_OCT2HEX]],Oct2Hex,OCT2HEX,;M;fgrpEngineering;1;NE;NXSEBR,NXSEBR;8;?fnChangeBase;16;CWX;"[[PARAM_OCT2HEX]]";"[[FHLP_OCT2HEX]]";"[[AHLP1_OCT2HEX]]";"[[AHLP2_OCT2HEX]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Oct2Hex_DispId, Name = "Func_Oct2Hex")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Oct2Hex(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts an octal number to decimal.
		/// </summary>
		/// <param name="number">Is the octal number you want to convert.</param>
		// [[FCN_OCT2DEC]],Oct2Dec,OCT2DEC,;M;fgrpEngineering;1;NE;NXSEBR;8;?fnChangeBase;10;CWX;"[[PARAM_OCT2DEC]]";"[[FHLP_OCT2DEC]]";"[[AHLP1_OCT2DEC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Oct2Dec_DispId, Name = "Func_Oct2Dec")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Oct2Dec(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Converts a binary number to decimal.
		/// </summary>
		/// <param name="number">Is the binary number you want to convert.</param>
		// [[FCN_BIN2DEC]],Bin2Dec,BIN2DEC,;M;fgrpEngineering;1;NE;NXSEBR;2;?fnChangeBase;10;CWX;"[[PARAM_BIN2DEC]]";"[[FHLP_BIN2DEC]]";"[[AHLP1_BIN2DEC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bin2Dec_DispId, Name = "Func_Bin2Dec")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bin2Dec(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Converts a binary number to octal.
		/// </summary>
		/// <param name="number">Is the binary number you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_BIN2OCT]],Bin2Oct,BIN2OCT,;M;fgrpEngineering;1;NE;NXSEBR,NXSEBR;2;?fnChangeBase;8;CWX;"[[PARAM_BIN2OCT]]";"[[FHLP_BIN2OCT]]";"[[AHLP1_BIN2OCT]]";"[[AHLP2_BIN2OCT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bin2Oct_DispId, Name = "Func_Bin2Oct")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bin2Oct(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Converts a binary number to hexadecimal.
		/// </summary>
		/// <param name="number">Is the binary number you want to convert.</param>
		/// <param name="places">Is the number of characters to use.</param>
		// [[FCN_BIN2HEX]],Bin2Hex,BIN2HEX,;M;fgrpEngineering;1;NE;NXSEBR,NXSEBR;2;?fnChangeBase;16;CWX;"[[PARAM_BIN2HEX]]";"[[FHLP_BIN2HEX]]";"[[AHLP1_BIN2HEX]]";"[[AHLP2_BIN2HEX]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bin2Hex_DispId, Name = "Func_Bin2Hex")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bin2Hex(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @places
		);

		/// <summary>
		/// Returns the difference of two complex numbers.
		/// </summary>
		/// <param name="inumber1">Is the complex number from which to subtract inumber2.</param>
		/// <param name="inumber2">Is the complex number to subtract from inumber1.</param>
		// [[FCN_IMSUB]],ImSub,IMSUB,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR;;?fnCmplxSub;;CWX;"[[PARAM_IMSUB]]";"[[FHLP_IMSUB]]";"[[AHLP1_IMSUB]]";"[[AHLP2_IMSUB]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImSub_DispId, Name = "Func_ImSub")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImSub(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber2
		);

		/// <summary>
		/// Returns the quotient of two complex numbers.
		/// </summary>
		/// <param name="inumber1">Is the complex numerator or dividend.</param>
		/// <param name="inumber2">Is the complex denominator or divisor.</param>
		// [[FCN_IMDIV]],ImDiv,IMDIV,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR;;?fnCmplxDiv;;CWX;"[[PARAM_IMDIV]]";"[[FHLP_IMDIV]]";"[[AHLP1_IMDIV]]";"[[AHLP2_IMDIV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImDiv_DispId, Name = "Func_ImDiv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImDiv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber2
		);

		/// <summary>
		/// Returns a complex number raised to an integer power.
		/// </summary>
		/// <param name="inumber">Is a complex number you want to raise to a power.</param>
		/// <param name="number">Is the power to which you want to raise the complex number.</param>
		// [[FCN_IMPOWER]],ImPower,IMPOWER,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR;;?fnCmplxPower;;CWX;"[[PARAM_IMPOWER]]";"[[FHLP_IMPOWER]]";"[[AHLP1_IMPOWER]]";"[[AHLP2_IMPOWER]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImPower_DispId, Name = "Func_ImPower")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImPower(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the absolute value (modulus) of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the absolute value.</param>
		// [[FCN_IMABS]],ImAbs,IMABS,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxAbs;;CWX;"[[PARAM_IMABS]]";"[[FHLP_IMABS]]";"[[AHLP1_IMABS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImAbs_DispId, Name = "Func_ImAbs")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImAbs(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the square root of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the square root.</param>
		// [[FCN_IMSQRT]],ImSqrt,IMSQRT,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxSqrt;;CWX;"[[PARAM_IMSQRT]]";"[[FHLP_IMSQRT]]";"[[AHLP1_IMSQRT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImSqrt_DispId, Name = "Func_ImSqrt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImSqrt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the natural logarithm of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the natural logarithm.</param>
		// [[FCN_IMLN]],ImLn,IMLN,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxLnMp;;CWX;"[[PARAM_IMLN]]";"[[FHLP_IMLN]]";"[[AHLP1_IMLN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImLn_DispId, Name = "Func_ImLn")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImLn(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the base-2 logarithm of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the base-2 logarithm.</param>
		// [[FCN_IMLOG2]],ImLog2,IMLOG2,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxLog2;;CWX;"[[PARAM_IMLOG2]]";"[[FHLP_IMLOG2]]";"[[AHLP1_IMLOG2]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImLog2_DispId, Name = "Func_ImLog2")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImLog2(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the base-10 logarithm of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the common logarithm.</param>
		// [[FCN_IMLOG10]],ImLog10,IMLOG10,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxLog10;;CWX;"[[PARAM_IMLOG10]]";"[[FHLP_IMLOG10]]";"[[AHLP1_IMLOG10]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImLog10_DispId, Name = "Func_ImLog10")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImLog10(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the sine of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the sine.</param>
		// [[FCN_IMSIN]],ImSin,IMSIN,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxSin;;CWX;"[[PARAM_IMSIN]]";"[[FHLP_IMSIN]]";"[[AHLP1_IMSIN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImSin_DispId, Name = "Func_ImSin")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImSin(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the cosine of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the cosine.</param>
		// [[FCN_IMCOS]],ImCos,IMCOS,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxCos;;CWX;"[[PARAM_IMCOS]]";"[[FHLP_IMCOS]]";"[[AHLP1_IMCOS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImCos_DispId, Name = "Func_ImCos")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImCos(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the exponential of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the exponential.</param>
		// [[FCN_IMEXP]],ImExp,IMEXP,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxExp;;CWX;"[[PARAM_IMEXP]]";"[[FHLP_IMEXP]]";"[[AHLP1_IMEXP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImExp_DispId, Name = "Func_ImExp")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImExp(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the argument q, an angle expressed in radians.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the argument.</param>
		// [[FCN_IMARGUMENT]],ImArgument,IMARGUMENT,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxArg;;CWX;"[[PARAM_IMARGUMENT]]";"[[FHLP_IMARGUMENT]]";"[[AHLP1_IMARGUMENT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImArgument_DispId, Name = "Func_ImArgument")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImArgument(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the complex conjugate of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the conjugate.</param>
		// [[FCN_IMCONJUGATE]],ImConjugate,IMCONJUGATE,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxConj;;CWX;"[[PARAM_IMCONJUGATE]]";"[[FHLP_IMCONJUGATE]]";"[[AHLP1_IMCONJUGATE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImConjugate_DispId, Name = "Func_ImConjugate")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImConjugate(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the imaginary coefficient of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the imaginary coefficient.</param>
		// [[FCN_IMAGINARY]],Imaginary,IMAGINARY,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxImg;;CWX;"[[PARAM_IMAGINARY]]";"[[FHLP_IMAGINARY]]";"[[AHLP1_IMAGINARY]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Imaginary_DispId, Name = "Func_Imaginary")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Imaginary(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the real coefficient of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the real coefficient.</param>
		// [[FCN_IMREAL]],ImReal,IMREAL,;M;fgrpEngineering;1;NE;NXSEBR;;?fnCmplxReal;;CWX;"[[PARAM_IMREAL]]";"[[FHLP_IMREAL]]";"[[AHLP1_IMREAL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImReal_DispId, Name = "Func_ImReal")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImReal(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Converts real and imaginary coefficients into a complex number.
		/// </summary>
		/// <param name="realNum">Is the real coefficient of the complex number.</param>
		/// <param name="iNum">Is the imaginary coefficient of the complex number.</param>
		/// <param name="suffix">Is the suffix for the imaginary component of the complex number.</param>
		// [[FCN_COMPLEX]],Complex,COMPLEX,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR,NXSEBR;;?fnCmplxNum;;CWX;"[[PARAM_COMPLEX]]";"[[FHLP_COMPLEX]]";"[[AHLP1_COMPLEX]]";"[[AHLP2_COMPLEX]]";"[[AHLP3_COMPLEX]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Complex_DispId, Name = "Func_Complex")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Complex(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @realNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @iNum,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @suffix
		);

		/// <summary>
		/// Returns the sum of complex numbers.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are from 1 to 255 complex numbers to add.</param>
		// [[FCN_IMSUM]],ImSum,IMSUM,;M;fgrpEngineering;1;NE;MXRNSEB,...;;?fnCmplxSumM;;CWX;"[[PARAM_IMSUM]]";"[[FHLP_IMSUM]]";"[[AHLP1_IMSUM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImSum_DispId, Name = "Func_ImSum")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImSum(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the product of 1 to 255 complex numbers.
		/// </summary>
		/// <param name="values">Inumber1, Inumber2,... are from 1 to 255 complex numbers to multiply.</param>
		// [[FCN_IMPRODUCT]],ImProduct,IMPRODUCT,;M;fgrpEngineering;1;NE;MXRNSEB,...;;?fnCmplxProdM;;CWX;"[[PARAM_IMPRODUCT]]";"[[FHLP_IMPRODUCT]]";"[[AHLP1_IMPRODUCT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImProduct_DispId, Name = "Func_ImProduct")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImProduct(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the sum of a power series based on the formula.
		/// </summary>
		/// <param name="x">Is the input value to the power series.</param>
		/// <param name="n">Is the initial power to which you want to raise x.</param>
		/// <param name="m">Is the step by which to increase n for each term in the series.</param>
		/// <param name="coefficients">Is a set of coefficients by which each successive power of x is multiplied.</param>
		// [[FCN_SERIESSUM]],SeriesSum,SERIESSUM,;M;fgrpMathTrig;4;NE;NXSEBR,NXSEBR,NXSEBR,MRSXNEB;;?fnSeriesSum;;CWX;"[[PARAM_SERIESSUM]]";"[[FHLP_SERIESSUM]]";"[[AHLP1_SERIESSUM]]";"[[AHLP2_SERIESSUM]]";"[[AHLP3_SERIESSUM]]";"[[AHLP4_SERIESSUM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.SeriesSum_DispId, Name = "Func_SeriesSum")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult SeriesSum(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @n,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @m,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|string|number|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @coefficients
		);

		/// <summary>
		/// Returns the double factorial of a number.
		/// </summary>
		/// <param name="number">Is the value for which to return the double factorial.</param>
		// [[FCN_FACTDOUBLE]],FactDouble,FACTDOUBLE,;M;fgrpMathTrig;1;NE;NXSEBR;;?fnFactDouble;;CWX;"[[PARAM_FACTDOUBLE]]";"[[FHLP_FACTDOUBLE]]";"[[AHLP1_FACTDOUBLE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.FactDouble_DispId, Name = "Func_FactDouble")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult FactDouble(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the square root of (number * Pi).
		/// </summary>
		/// <param name="number">Is the number by which p is multiplied.</param>
		// [[FCN_SQRTPI]],SqrtPi,SQRTPI,;M;fgrpMathTrig;1;NE;NXSEBR;;?fnSqrtPi;;CWX;"[[PARAM_SQRTPI]]";"[[FHLP_SQRTPI]]";"[[AHLP1_SQRTPI]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.SqrtPi_DispId, Name = "Func_SqrtPi")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult SqrtPi(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the integer portion of a division.
		/// </summary>
		/// <param name="numerator">Is the dividend.</param>
		/// <param name="denominator">Is the divisor.</param>
		// [[FCN_QUOTIENT]],Quotient,QUOTIENT,;M;fgrpMathTrig;2;NE;NXSEBR,NXSEBR;;?fnQuotient;;CWX;"[[PARAM_QUOTIENT]]";"[[FHLP_QUOTIENT]]";"[[AHLP1_QUOTIENT]]";"[[AHLP2_QUOTIENT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Quotient_DispId, Name = "Func_Quotient")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Quotient(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numerator,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @denominator
		);

		/// <summary>
		/// Tests whether two numbers are equal.
		/// </summary>
		/// <param name="number1">Is the first number.</param>
		/// <param name="number2">Is the second number.</param>
		// [[FCN_DELTA]],Delta,DELTA,;M;fgrpEngineering;1;NE;NXSEBR,NXSEBR;34;?fnDeltaGeStep;;CWX;"[[PARAM_DELTA]]";"[[FHLP_DELTA]]";"[[AHLP1_DELTA]]";"[[AHLP2_DELTA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Delta_DispId, Name = "Func_Delta")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Delta(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @number2
		);

		/// <summary>
		/// Tests whether a number is greater than a threshold value.
		/// </summary>
		/// <param name="number">Is the value to test against step.</param>
		/// <param name="step">Is the threshold value.</param>
		// [[FCN_GESTEP]],GeStep,GESTEP,;M;fgrpEngineering;1;NE;NXSEBR,NXSEBR;35;?fnDeltaGeStep;;CWX;"[[PARAM_GESTEP]]";"[[FHLP_GESTEP]]";"[[AHLP1_GESTEP]]";"[[AHLP2_GESTEP]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.GeStep_DispId, Name = "Func_GeStep")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult GeStep(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @step
		);

		/// <summary>
		/// Returns TRUE if the number is even.
		/// </summary>
		/// <param name="number">Is the value to test.</param>
		// [[FCN_ISEVEN]],IsEven,ISEVEN,;M;fgrpInfo;1;NE;NXSEBR;38;?fnEvenOdd;;CWX;"[[PARAM_ISEVEN]]";"[[FHLP_ISEVEN]]";"[[AHLP1_ISEVEN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsEven_DispId, Name = "Func_IsEven")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult IsEven(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns TRUE if the number is odd.
		/// </summary>
		/// <param name="number">Is the value to test.</param>
		// [[FCN_ISODD]],IsOdd,ISODD,;M;fgrpInfo;1;NE;NXSEBR;39;?fnEvenOdd;;CWX;"[[PARAM_ISODD]]";"[[FHLP_ISODD]]";"[[AHLP1_ISODD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsOdd_DispId, Name = "Func_IsOdd")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult IsOdd(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns a number rounded to the desired multiple.
		/// </summary>
		/// <param name="number">Is the value to round.</param>
		/// <param name="multiple">Is the multiple to which you want to round number.</param>
		// [[FCN_MROUND]],MRound,MROUND,;M;fgrpMathTrig;2;NE;NXSEBR,NXSEBR;;?fnMRound;;CWX;"[[PARAM_MROUND]]";"[[FHLP_MROUND]]";"[[AHLP1_MROUND]]";"[[AHLP2_MROUND]]" 
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.MRound_DispId, Name = "Func_MRound")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult MRound(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @multiple
		);

		/// <summary>
		/// Returns the error function.
		/// </summary>
		/// <param name="lowerLimit">Is the lower bound for integrating ERF.</param>
		/// <param name="upperLimit">Is the upper bound for integrating ERF.</param>
		// [[FCN_ERF]],Erf,ERF,;M;fgrpEngineering;1;NE;NXSEBR,NXSEBR;;?fnErf;;CWX;"[[PARAM_ERF]]";"[[FHLP_ERF]]";"[[AHLP1_ERF]]";"[[AHLP2_ERF]]" 
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Erf_DispId, Name = "Func_Erf")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Erf(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lowerLimit,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @upperLimit
		);

		/// <summary>
		/// Returns the complementary error function.
		/// </summary>
		/// <param name="x">Is the lower bound for integrating ERF.</param>
		// [[FCN_ERFC]],ErfC,ERFC,>ERFC;M;fgrpEngineering;1;NE;NXSEBR;;?fnErfC;;CWX;"[[PARAM_ERFC]]";"[[FHLP_ERFC]]";"[[AHLP1_ERFC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ErfC_DispId, Name = "Func_ErfC")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ErfC(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x
		);

		/// <summary>
		/// Returns the Bessel function Jn(x).
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function.</param>
		/// <param name="n">Is the order of the Bessel function.</param>
		// [[FCN_BESSELJ]],BesselJ,BESSELJ,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR;1;?fnBessel;;CWX;"[[PARAM_BESSELJ]]";"[[FHLP_BESSELJ]]";"[[AHLP1_BESSELJ]]";"[[AHLP2_BESSELJ]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.BesselJ_DispId, Name = "Func_BesselJ")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult BesselJ(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @n
		);

		/// <summary>
		/// Returns the modified Bessel function Kn(x).
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function.</param>
		/// <param name="n">Is the order of the function.</param>
		// [[FCN_BESSELK]],BesselK,BESSELK,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR;2;?fnBessel;;CWX;"[[PARAM_BESSELK]]";"[[FHLP_BESSELK]]";"[[AHLP1_BESSELK]]";"[[AHLP2_BESSELK]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.BesselK_DispId, Name = "Func_BesselK")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult BesselK(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @n
		);

		/// <summary>
		/// Returns the Bessel function Yn(x).
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function.</param>
		/// <param name="n">Is the order of the function.</param>
		// [[FCN_BESSELY]],BesselY,BESSELY,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR;3;?fnBessel;;CWX;"[[PARAM_BESSELY]]";"[[FHLP_BESSELY]]";"[[AHLP1_BESSELY]]";"[[AHLP2_BESSELY]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.BesselY_DispId, Name = "Func_BesselY")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult BesselY(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @n
		);

		/// <summary>
		/// Returns the modified Bessel function In(x).
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function.</param>
		/// <param name="n">Is the order of the Bessel function.</param>
		// [[FCN_BESSELI]],BesselI,BESSELI,;M;fgrpEngineering;2;NE;NXSEBR,NXSEBR;0;?fnBessel;;CWX;"[[PARAM_BESSELI]]";"[[FHLP_BESSELI]]";"[[AHLP1_BESSELI]]";"[[AHLP2_BESSELI]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.BesselI_DispId, Name = "Func_BesselI")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult BesselI(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @n
		);

		/// <summary>
		/// Returns the internal rate of return for a schedule of cash flows.
		/// </summary>
		/// <param name="values">Is a series of cash flows that correspond to a schedule of payments in dates.</param>
		/// <param name="dates">Is a schedule of payment dates that corresponds to the cash flow payments.</param>
		/// <param name="guess">Is a number that you guess is close to the result of XIRR.</param>
		// [[FCN_XIRR]],Xirr,XIRR,;M;fgrpFinancial;2;NE;NSERMXB,NSERMXB,NXSEBR;2;?fnXirr;;CWX;"[[PARAM_XIRR]]";"[[FHLP_XIRR]]";"[[AHLP1_XIRR]]";"[[AHLP2_XIRR]]";"[[AHLP3_XIRR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Xirr_DispId, Name = "Func_Xirr")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Xirr(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @dates,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @guess
		);

		/// <summary>
		/// Returns the net present value for a schedule of cash flows.
		/// </summary>
		/// <param name="rate">Is the discount rate to apply to the cash flows.</param>
		/// <param name="values">Is a series of cash flows that correspond to a schedule of payments in dates.</param>
		/// <param name="dates">Is a schedule of payment dates that corresponds to the cash flow payments.</param>
		// [[FCN_XNPV]],Xnpv,XNPV,;M;fgrpFinancial;3;NE;NXSEBR,NSERMXB,NSERMXB;;?fnXnpv;;CWX;"[[PARAM_XNPV]]";"[[FHLP_XNPV]]";"[[AHLP1_XNPV]]";"[[AHLP2_XNPV]]";"[[AHLP3_XNPV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Xnpv_DispId, Name = "Func_Xnpv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Xnpv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @dates
		);

		/// <summary>
		/// Returns the price per $100 face value of a security that pays interest at maturity.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="issue">Is the security's issue date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's interest rate at date of issue.</param>
		/// <param name="yld">Is the security's annual yield.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_PRICEMAT]],PriceMat,PRICEMAT,;M;fgrpFinancial;5;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;18;?fnPYMat;;CWX;"[[PARAM_PRICEMAT]]";"[[FHLP_PRICEMAT]]";"[[AHLP1_PRICEMAT]]";"[[AHLP2_PRICEMAT]]";"[[AHLP3_PRICEMAT]]";"[[AHLP4_PRICEMAT]]";"[[AHLP5_PRICEMAT]]";"[[AHLP6_PRICEMAT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.PriceMat_DispId, Name = "Func_PriceMat")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult PriceMat(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @issue,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @yld,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the annual yield of a security that pays interest at maturity.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="issue">Is the security's issue date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's interest rate at date of issue.</param>
		/// <param name="pr">Is the security's price per $100 face value.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_YIELDMAT]],YieldMat,YIELDMAT,;M;fgrpFinancial;5;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;19;?fnPYMat;;CWX;"[[PARAM_YIELDMAT]]";"[[FHLP_YIELDMAT]]";"[[AHLP1_YIELDMAT]]";"[[AHLP2_YIELDMAT]]";"[[AHLP3_YIELDMAT]]";"[[AHLP4_YIELDMAT]]";"[[AHLP5_YIELDMAT]]";"[[AHLP6_YIELDMAT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.YieldMat_DispId, Name = "Func_YieldMat")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult YieldMat(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @issue,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pr,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the interest rate for a fully invested security.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="investment">Is the amount invested in the security.</param>
		/// <param name="redemption">Is the amount to be received at maturity.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_INTRATE]],IntRate,INTRATE,;M;fgrpFinancial;4;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;26;?fnSecurities;;CWX;"[[PARAM_INTRATE]]";"[[FHLP_INTRATE]]";"[[AHLP1_INTRATE]]";"[[AHLP2_INTRATE]]";"[[AHLP3_INTRATE]]";"[[AHLP4_INTRATE]]";"[[AHLP5_INTRATE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IntRate_DispId, Name = "Func_IntRate")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult IntRate(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @investment,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the amount received at maturity for a fully invested security.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="investment">Is the amount invested in the security.</param>
		/// <param name="discount">Is the security's discount rate.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_RECEIVED]],Received,RECEIVED,;M;fgrpFinancial;4;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;27;?fnSecurities;;CWX;"[[PARAM_RECEIVED]]";"[[FHLP_RECEIVED]]";"[[AHLP1_RECEIVED]]";"[[AHLP2_RECEIVED]]";"[[AHLP3_RECEIVED]]";"[[AHLP4_RECEIVED]]";"[[AHLP5_RECEIVED]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Received_DispId, Name = "Func_Received")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Received(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @investment,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @discount,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the discount rate for a security.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="pr">Is the security's price per $100 face value.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_DISC]],Disc,DISC,;M;fgrpFinancial;4;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;14;?fnSecurities;;CWX;"[[PARAM_DISC]]";"[[FHLP_DISC]]";"[[AHLP1_DISC]]";"[[AHLP2_DISC]]";"[[AHLP3_DISC]]";"[[AHLP4_DISC]]";"[[AHLP5_DISC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Disc_DispId, Name = "Func_Disc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Disc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pr,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the price per $100 face value of a discounted security.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="discount">Is the security's discount rate.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_PRICEDISC]],PriceDisc,PRICEDISC,;M;fgrpFinancial;4;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;16;?fnSecurities;;CWX;"[[PARAM_PRICEDISC]]";"[[FHLP_PRICEDISC]]";"[[AHLP1_PRICEDISC]]";"[[AHLP2_PRICEDISC]]";"[[AHLP3_PRICEDISC]]";"[[AHLP4_PRICEDISC]]";"[[AHLP5_PRICEDISC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.PriceDisc_DispId, Name = "Func_PriceDisc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult PriceDisc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @discount,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the annual yield for a discounted security. For example, a treasury bill.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="pr">Is the security's price per $100 face value.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_YIELDDISC]],YieldDisc,YIELDDISC,;M;fgrpFinancial;4;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;17;?fnSecurities;;CWX;"[[PARAM_YIELDDISC]]";"[[FHLP_YIELDDISC]]";"[[AHLP1_YIELDDISC]]";"[[AHLP2_YIELDDISC]]";"[[AHLP3_YIELDDISC]]";"[[AHLP4_YIELDDISC]]";"[[AHLP5_YIELDDISC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.YieldDisc_DispId, Name = "Func_YieldDisc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult YieldDisc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pr,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the bond-equivalent yield for a treasury bill.
		/// </summary>
		/// <param name="settlement">Is the Treasury bill's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the Treasury bill's maturity date, expressed as a serial date number.</param>
		/// <param name="discount">Is the Treasury bill's discount rate.</param>
		// [[FCN_TBILLEQ]],TBillEq,TBILLEQ,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR;12;?fnTBill;;CWX;"[[PARAM_TBILLEQ]]";"[[FHLP_TBILLEQ]]";"[[AHLP1_TBILLEQ]]";"[[AHLP2_TBILLEQ]]";"[[AHLP3_TBILLEQ]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.TBillEq_DispId, Name = "Func_TBillEq")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult TBillEq(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @discount
		);

		/// <summary>
		/// Returns the price per $100 face value for a treasury bill.
		/// </summary>
		/// <param name="settlement">Is the Treasury bill's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the Treasury bill's maturity date, expressed as a serial date number.</param>
		/// <param name="discount">Is the Treasury bill's discount rate.</param>
		// [[FCN_TBILLPRICE]],TBillPrice,TBILLPRICE,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR;10;?fnTBill;;CWX;"[[PARAM_TBILLPRICE]]";"[[FHLP_TBILLPRICE]]";"[[AHLP1_TBILLPRICE]]";"[[AHLP2_TBILLPRICE]]";"[[AHLP3_TBILLPRICE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.TBillPrice_DispId, Name = "Func_TBillPrice")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult TBillPrice(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @discount
		);

		/// <summary>
		/// Returns the yield for a treasury bill.
		/// </summary>
		/// <param name="settlement">Is the Treasury bill's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the Treasury bill's maturity date, expressed as a serial date number.</param>
		/// <param name="pr">Is the Treasury Bill's price per $100 face value.</param>
		// [[FCN_TBILLYIELD]],TBillYield,TBILLYIELD,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR;11;?fnTBill;;CWX;"[[PARAM_TBILLYIELD]]";"[[FHLP_TBILLYIELD]]";"[[AHLP1_TBILLYIELD]]";"[[AHLP2_TBILLYIELD]]";"[[AHLP3_TBILLYIELD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.TBillYield_DispId, Name = "Func_TBillYield")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult TBillYield(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pr
		);

		/// <summary>
		/// Returns the price per $100 face value of a security that pays periodic interest.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's annual coupon rate.</param>
		/// <param name="yld">Is the security's annual yield.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_PRICE]],Price,PRICE,;M;fgrpFinancial;6;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;13;?fnPriceYield;;CWX;"[[PARAM_PRICE]]";"[[FHLP_PRICE]]";"[[AHLP1_PRICE]]";"[[AHLP2_PRICE]]";"[[AHLP3_PRICE]]";"[[AHLP4_PRICE]]";"[[AHLP5_PRICE]]";"[[AHLP6_PRICE]]";"[[AHLP7_PRICE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Price_DispId, Name = "Func_Price")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Price(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @yld,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the yield on a security that pays periodic interest.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's annual coupon rate.</param>
		/// <param name="pr">Is the security's price per $100 face value.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_YIELD]],Yield,YIELD,;M;fgrpFinancial;6;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;15;?fnPriceYield;;CWX;"[[PARAM_YIELD]]";"[[FHLP_YIELD]]";"[[AHLP1_YIELD]]";"[[AHLP2_YIELD]]";"[[AHLP3_YIELD]]";"[[AHLP4_YIELD]]";"[[AHLP5_YIELD]]";"[[AHLP6_YIELD]]";"[[AHLP7_YIELD]]" 
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Yield_DispId, Name = "Func_Yield")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Yield(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pr,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number.
		/// </summary>
		/// <param name="fractionalDollar">Is a number expressed as a fraction.</param>
		/// <param name="fraction">Is the integer to use in the denominator of the fraction.</param>
		// [[FCN_DOLLARDE]],DollarDe,DOLLARDE,;M;fgrpFinancial;2;NE;NXSEBR,NXSEBR;28;?fnDollar;;CWX;"[[PARAM_DOLLARDE]]";"[[FHLP_DOLLARDE]]";"[[AHLP1_DOLLARDE]]";"[[AHLP2_DOLLARDE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DollarDe_DispId, Name = "Func_DollarDe")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DollarDe(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @fractionalDollar,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @fraction
		);

		/// <summary>
		/// Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction.
		/// </summary>
		/// <param name="decimalDollar">Is a decimal number.</param>
		/// <param name="fraction">Is the integer to use in the denominator of a fraction.</param>
		// [[FCN_DOLLARFR]],DollarFr,DOLLARFR,;M;fgrpFinancial;2;NE;NXSEBR,NXSEBR;29;?fnDollar;;CWX;"[[PARAM_DOLLARFR]]";"[[FHLP_DOLLARFR]]";"[[AHLP1_DOLLARFR]]";"[[AHLP2_DOLLARFR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.DollarFr_DispId, Name = "Func_DollarFr")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult DollarFr(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @decimalDollar,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @fraction
		);

		/// <summary>
		/// Returns the annual nominal interest rate.
		/// </summary>
		/// <param name="effectRate">Is the effective interest rate.</param>
		/// <param name="npery">Is the number of compounding periods per year.</param>
		// [[FCN_NOMINAL]],Nominal,NOMINAL,;M;fgrpFinancial;2;NE;NXSEBR,NXSEBR;40;?fnNomEff;;CWX;"[[PARAM_NOMINAL]]";"[[FHLP_NOMINAL]]";"[[AHLP1_NOMINAL]]";"[[AHLP2_NOMINAL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Nominal_DispId, Name = "Func_Nominal")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Nominal(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @effectRate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @npery
		);

		/// <summary>
		/// Returns the effective annual interest rate.
		/// </summary>
		/// <param name="nominalRate">Is the nominal interest rate.</param>
		/// <param name="npery">Is the number of compounding periods per year.</param>
		// [[FCN_EFFECT]],Effect,EFFECT,;M;fgrpFinancial;2;NE;NXSEBR,NXSEBR;41;?fnNomEff;;CWX;"[[PARAM_EFFECT]]";"[[FHLP_EFFECT]]";"[[AHLP1_EFFECT]]";"[[AHLP2_EFFECT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Effect_DispId, Name = "Func_Effect")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Effect(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nominalRate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @npery
		);

		/// <summary>
		/// Returns the cumulative principal paid on a loan between two periods.
		/// </summary>
		/// <param name="rate">Is the interest rate.</param>
		/// <param name="nper">Is the total number of payment periods.</param>
		/// <param name="pv">Is the present value.</param>
		/// <param name="startPeriod">Is the first period in the calculation.</param>
		/// <param name="endPeriod">Is the last period in the calculation.</param>
		/// <param name="type">Is the timing of the payment.</param>
		// [[FCN_CUMPRINC]],CumPrinc,CUMPRINC,;M;fgrpFinancial;6;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;42;?fnCumPrinIPmt;;CWX;"[[PARAM_CUMPRINC]]";"[[FHLP_CUMPRINC]]";"[[AHLP1_CUMPRINC]]";"[[AHLP2_CUMPRINC]]";"[[AHLP3_CUMPRINC]]";"[[AHLP4_CUMPRINC]]";"[[AHLP5_CUMPRINC]]";"[[AHLP6_CUMPRINC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CumPrinc_DispId, Name = "Func_CumPrinc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CumPrinc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @type
		);

		/// <summary>
		/// Returns the cumulative interest paid between two periods.
		/// </summary>
		/// <param name="rate">Is the interest rate.</param>
		/// <param name="nper">Is the total number of payment periods.</param>
		/// <param name="pv">Is the present value.</param>
		/// <param name="startPeriod">Is the first period in the calculation.</param>
		/// <param name="endPeriod">Is the last period in the calculation.</param>
		/// <param name="type">Is the timing of the payment.</param>
		// [[FCN_CUMIPMT]],CumIPmt,CUMIPMT,;M;fgrpFinancial;6;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;43;?fnCumPrinIPmt;;CWX;"[[PARAM_CUMIPMT]]";"[[FHLP_CUMIPMT]]";"[[AHLP1_CUMIPMT]]";"[[AHLP2_CUMIPMT]]";"[[AHLP3_CUMIPMT]]";"[[AHLP4_CUMIPMT]]";"[[AHLP5_CUMIPMT]]";"[[AHLP6_CUMIPMT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CumIPmt_DispId, Name = "Func_CumIPmt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CumIPmt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @type
		);

		/// <summary>
		/// Returns the serial number of the date that is the indicated number of months before or after the start date.
		/// </summary>
		/// <param name="startDate">Is a serial date number that represents the start date.</param>
		/// <param name="months">Is the number of months before or after startDate.</param>
		// [[FCN_EDATE]],EDate,EDATE,;M;fgrpDateTime;2;NE;NXSEBR,NXSEBR;30;?fnEDateMonth;;CWX;"[[PARAM_EDATE]]";"[[FHLP_EDATE]]";"[[AHLP1_EDATE]]";"[[AHLP2_EDATE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.EDate_DispId, Name = "Func_EDate")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult EDate(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @months
		);

		/// <summary>
		/// Returns the serial number of the last day of the month before or after a specified number of months.
		/// </summary>
		/// <param name="startDate">Is a serial date number that represents the start date.</param>
		/// <param name="months">Is the number of months before or after the startDate.</param>
		// [[FCN_EOMONTH]],EoMonth,EOMONTH,;M;fgrpDateTime;2;NE;NXSEBR,NXSEBR;31;?fnEDateMonth;;CWX;"[[PARAM_EOMONTH]]";"[[FHLP_EOMONTH]]";"[[AHLP1_EOMONTH]]";"[[AHLP2_EOMONTH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.EoMonth_DispId, Name = "Func_EoMonth")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult EoMonth(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @months
		);

		/// <summary>
		/// Returns the year fraction representing the number of whole days between start_date and end_date.
		/// </summary>
		/// <param name="startDate">Is a serial date number that represents the start date.</param>
		/// <param name="endDate">Is a serial date number that represents the end date.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_YEARFRAC]],YearFrac,YEARFRAC,;M;fgrpDateTime;2;NE;NXSEBR,NXSEBR,NXSEBR;;?fnYearFrac;;CWX;"[[PARAM_YEARFRAC]]";"[[FHLP_YEARFRAC]]";"[[AHLP1_YEARFRAC]]";"[[AHLP2_YEARFRAC]]";"[[AHLP3_YEARFRAC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.YearFrac_DispId, Name = "Func_YearFrac")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult YearFrac(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the number of days from the beginning of the coupon period to the settlement date.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_COUPDAYBS]],CoupDayBs,COUPDAYBS,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR;7;?fnCoup;;CWX;"[[PARAM_COUPDAYBS]]";"[[FHLP_COUPDAYBS]]";"[[AHLP1_COUPDAYBS]]";"[[AHLP2_COUPDAYBS]]";"[[AHLP3_COUPDAYBS]]";"[[AHLP4_COUPDAYBS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CoupDayBs_DispId, Name = "Func_CoupDayBs")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CoupDayBs(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the number of days in the coupon period that contains the settlement date.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_COUPDAYS]],CoupDays,COUPDAYS,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR;5;?fnCoup;;CWX;"[[PARAM_COUPDAYS]]";"[[FHLP_COUPDAYS]]";"[[AHLP1_COUPDAYS]]";"[[AHLP2_COUPDAYS]]";"[[AHLP3_COUPDAYS]]";"[[AHLP4_COUPDAYS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CoupDays_DispId, Name = "Func_CoupDays")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CoupDays(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the number of days from the settlement date to the next coupon date.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_COUPDAYSNC]],CoupDaysNc,COUPDAYSNC,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR;6;?fnCoup;;CWX;"[[PARAM_COUPDAYSNC]]";"[[FHLP_COUPDAYSNC]]";"[[AHLP1_COUPDAYSNC]]";"[[AHLP2_COUPDAYSNC]]";"[[AHLP3_COUPDAYSNC]]";"[[AHLP4_COUPDAYSNC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CoupDaysNc_DispId, Name = "Func_CoupDaysNc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CoupDaysNc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the next coupon date after the settlement date.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_COUPNCD]],CoupNcd,COUPNCD,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR;9;?fnCoup;;CWX;"[[PARAM_COUPNCD]]";"[[FHLP_COUPNCD]]";"[[AHLP1_COUPNCD]]";"[[AHLP2_COUPNCD]]";"[[AHLP3_COUPNCD]]";"[[AHLP4_COUPNCD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CoupNcd_DispId, Name = "Func_CoupNcd")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CoupNcd(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the number of coupons payable between the settlement date and maturity date.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_COUPNUM]],CoupNum,COUPNUM,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR;4;?fnCoup;;CWX;"[[PARAM_COUPNUM]]";"[[FHLP_COUPNUM]]";"[[AHLP1_COUPNUM]]";"[[AHLP2_COUPNUM]]";"[[AHLP3_COUPNUM]]";"[[AHLP4_COUPNUM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CoupNum_DispId, Name = "Func_CoupNum")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CoupNum(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the previous coupon date before the settlement date.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_COUPPCD]],CoupPcd,COUPPCD,;M;fgrpFinancial;3;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR;8;?fnCoup;;CWX;"[[PARAM_COUPPCD]]";"[[FHLP_COUPPCD]]";"[[AHLP1_COUPPCD]]";"[[AHLP2_COUPPCD]]";"[[AHLP3_COUPPCD]]";"[[AHLP4_COUPPCD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CoupPcd_DispId, Name = "Func_CoupPcd")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CoupPcd(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the annual duration of a security with periodic interest payments.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="coupon">Is the security's annual coupon rate.</param>
		/// <param name="yld">Is the security's annual yield.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_DURATION]],Duration,DURATION,;M;fgrpFinancial;5;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;32;?fnDuration;;CWX;"[[PARAM_DURATION]]";"[[FHLP_DURATION]]";"[[AHLP1_DURATION]]";"[[AHLP2_DURATION]]";"[[AHLP3_DURATION]]";"[[AHLP4_DURATION]]";"[[AHLP5_DURATION]]";"[[AHLP6_DURATION]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Duration_DispId, Name = "Func_Duration")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Duration(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @coupon,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @yld,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the Macauley modified duration for a security with an assumed par value of $100.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="coupon">Is the security's annual coupon rate.</param>
		/// <param name="yld">Is the security's annual yield.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_MDURATION]],MDuration,MDURATION,;M;fgrpFinancial;5;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;33;?fnDuration;;CWX;"[[PARAM_MDURATION]]";"[[FHLP_MDURATION]]";"[[AHLP1_MDURATION]]";"[[AHLP2_MDURATION]]";"[[AHLP3_MDURATION]]";"[[AHLP4_MDURATION]]";"[[AHLP5_MDURATION]]";"[[AHLP6_MDURATION]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.MDuration_DispId, Name = "Func_MDuration")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult MDuration(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @coupon,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @yld,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the price per $100 face value of a security with an odd last period.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="lastInterest">Is the security's last coupon date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's interest rate.</param>
		/// <param name="yld">Is the security's annual yield.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_ODDLPRICE]],OddLPrice,ODDLPRICE,;M;fgrpFinancial;7;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;22;?fnOddLPrYield;;CWX;"[[PARAM_ODDLPRICE]]";"[[FHLP_ODDLPRICE]]";"[[AHLP1_ODDLPRICE]]";"[[AHLP2_ODDLPRICE]]";"[[AHLP3_ODDLPRICE]]";"[[AHLP4_ODDLPRICE]]";"[[AHLP5_ODDLPRICE]]";"[[AHLP6_ODDLPRICE]]";"[[AHLP7_ODDLPRICE]]";"[[AHLP8_ODDLPRICE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.OddLPrice_DispId, Name = "Func_OddLPrice")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult OddLPrice(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lastInterest,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @yld,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the yield of a security with an odd last period.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="lastInterest">Is the security's last coupon date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's interest rate.</param>
		/// <param name="pr">Is the security's price.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_ODDLYIELD]],OddLYield,ODDLYIELD,;M;fgrpFinancial;7;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;23;?fnOddLPrYield;;CWX;"[[PARAM_ODDLYIELD]]";"[[FHLP_ODDLYIELD]]";"[[AHLP1_ODDLYIELD]]";"[[AHLP2_ODDLYIELD]]";"[[AHLP3_ODDLYIELD]]";"[[AHLP4_ODDLYIELD]]";"[[AHLP5_ODDLYIELD]]";"[[AHLP6_ODDLYIELD]]";"[[AHLP7_ODDLYIELD]]";"[[AHLP8_ODDLYIELD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.OddLYield_DispId, Name = "Func_OddLYield")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult OddLYield(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lastInterest,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pr,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the price per $100 face value of a security with an odd first period.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="issue">Is the security's issue date, expressed as a serial date number.</param>
		/// <param name="firstCoupon">Is the security's first coupon date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's interest rate.</param>
		/// <param name="yld">Is the security's annual yield.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_ODDFPRICE]],OddFPrice,ODDFPRICE,;M;fgrpFinancial;8;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;20;?fnOddFPrYield;;CWX;"[[PARAM_ODDFPRICE]]";"[[FHLP_ODDFPRICE]]";"[[AHLP1_ODDFPRICE]]";"[[AHLP2_ODDFPRICE]]";"[[AHLP3_ODDFPRICE]]";"[[AHLP4_ODDFPRICE]]";"[[AHLP5_ODDFPRICE]]";"[[AHLP6_ODDFPRICE]]";"[[AHLP7_ODDFPRICE]]";"[[AHLP8_ODDFPRICE]]";"[[AHLP9_ODDFPRICE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.OddFPrice_DispId, Name = "Func_OddFPrice")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult OddFPrice(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @issue,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @firstCoupon,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @yld,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the yield of a security with an odd first period.
		/// </summary>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="maturity">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="issue">Is the security's issue date, expressed as a serial date number.</param>
		/// <param name="firstCoupon">Is the security's first coupon date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's interest rate.</param>
		/// <param name="pr">Is the security's price.</param>
		/// <param name="redemption">Is the security's redemption value per $100 face value.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_ODDFYIELD]],OddFYield,ODDFYIELD,;M;fgrpFinancial;8;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;21;?fnOddFPrYield;;CWX;"[[PARAM_ODDFYIELD]]";"[[FHLP_ODDFYIELD]]";"[[AHLP1_ODDFYIELD]]";"[[AHLP2_ODDFYIELD]]";"[[AHLP3_ODDFYIELD]]";"[[AHLP4_ODDFYIELD]]";"[[AHLP5_ODDFYIELD]]";"[[AHLP6_ODDFYIELD]]";"[[AHLP7_ODDFYIELD]]";"[[AHLP8_ODDFYIELD]]";"[[AHLP9_ODDFYIELD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.OddFYield_DispId, Name = "Func_OddFYield")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult OddFYield(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maturity,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @issue,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @firstCoupon,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pr,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @redemption,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns a random number between the numbers you specify.
		/// </summary>
		/// <param name="bottom">Is the smallest integer RANDBETWEEN will return.</param>
		/// <param name="top">Is the largest integer RANDBETWEEN will return.</param>
		// -[[FCN_RANDBETWEEN]],RandBetween,RANDBETWEEN,;M;fgrpMathTrig;2;NE;NXSEBR,NXSEBR;;?fnRandBetween;;CWX;"[[PARAM_RANDBETWEEN]]";"[[FHLP_RANDBETWEEN]]";"[[AHLP1_RANDBETWEEN]]";"[[AHLP2_RANDBETWEEN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.RandBetween_DispId, Name = "Func_RandBetween")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult RandBetween(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @bottom,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @top
		);

		/// <summary>
		/// Returns the week number in the year.
		/// </summary>
		/// <param name="serialNumber">Is the date-time code used by Microsoft Excel for date and time calculation.</param>
		/// <param name="returnType">Is a number (1 or 2) that determines the type of the return value.</param>
		// [[FCN_WEEKNUM]],WeekNum,WEEKNUM,;M;fgrpDateTime;1;NE;NXSEBR,NXSEBR;1;?fnWeekNum;;CWX;"[[PARAM_WEEKNUM]]";"[[FHLP_WEEKNUM]]";"[[AHLP1_WEEKNUM]]";"[[AHLP2_WEEKNUM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.WeekNum_DispId, Name = "Func_WeekNum")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult WeekNum(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @serialNumber,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @returnType
		);

		/// <summary>
		/// Returns the prorated linear depreciation of an asset for each accounting period.
		/// </summary>
		/// <param name="cost">Is the cost of the asset.</param>
		/// <param name="datePurchased">Is the date the asset is purchased.</param>
		/// <param name="firstPeriod">Is the date of the end of the first period.</param>
		/// <param name="salvage">Is the salvage value at the end of life of the asset.</param>
		/// <param name="period">Is the period.</param>
		/// <param name="rate">Is the rate of depreciation.</param>
		/// <param name="basis">Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.</param>
		// [[FCN_AMORDEGRC]],AmorDegrc,AMORDEGRC,;M;fgrpFinancial;6;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;37;?fnAmor;;CWX;"[[PARAM_AMORDEGRC]]";"[[FHLP_AMORDEGRC]]";"[[AHLP1_AMORDEGRC]]";"[[AHLP2_AMORDEGRC]]";"[[AHLP3_AMORDEGRC]]";"[[AHLP4_AMORDEGRC]]";"[[AHLP5_AMORDEGRC]]";"[[AHLP6_AMORDEGRC]]";"[[AHLP7_AMORDEGRC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AmorDegrc_DispId, Name = "Func_AmorDegrc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AmorDegrc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cost,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @datePurchased,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @firstPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @salvage,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @period,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the prorated linear depreciation of an asset for each accounting period.
		/// </summary>
		/// <param name="cost">Is the cost of the asset.</param>
		/// <param name="datePurchased">Is the date the asset is purchased.</param>
		/// <param name="firstPeriod">Is the date of the end of the first period.</param>
		/// <param name="salvage">Is the salvage value at the end of life of the asset.</param>
		/// <param name="period">Is the period.</param>
		/// <param name="rate">Is the rate of depreciation.</param>
		/// <param name="basis">Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.</param>
		// [[FCN_AMORLINC]],AmorLinc,AMORLINC,;M;fgrpFinancial;6;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;36;?fnAmor;;CWX;"[[PARAM_AMORLINC]]";"[[FHLP_AMORLINC]]";"[[AHLP1_AMORLINC]]";"[[AHLP2_AMORLINC]]";"[[AHLP3_AMORLINC]]";"[[AHLP4_AMORLINC]]";"[[AHLP5_AMORLINC]]";"[[AHLP6_AMORLINC]]";"[[AHLP7_AMORLINC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AmorLinc_DispId, Name = "Func_AmorLinc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AmorLinc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cost,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @datePurchased,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @firstPeriod,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @salvage,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @period,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Converts a number from one measurement system to another.
		/// </summary>
		/// <param name="number">Is the value in from_units to convert.</param>
		/// <param name="fromUnit">Is the units for number.</param>
		/// <param name="toUnit">Is the units for the result.</param>
		// [[FCN_CONVERT]],Convert,CONVERT,;M;fgrpEngineering;3;NE;NXSEBR,NSXEBR,NSXEBR;;?fnConvert;;CWX;"[[PARAM_CONVERT]]";"[[FHLP_CONVERT]]";"[[AHLP1_CONVERT]]";"[[AHLP2_CONVERT]]";"[[AHLP3_CONVERT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Convert_DispId, Name = "Func_Convert")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Convert(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @fromUnit,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @toUnit
		);

		/// <summary>
		/// Returns the accrued interest for a security that pays periodic interest.
		/// </summary>
		/// <param name="issue">Is the security's issue date, expressed as a serial date number.</param>
		/// <param name="firstInterest">Is the security's first interest date, expressed as a serial date number.</param>
		/// <param name="settlement">Is the security's settlement date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's annual coupon rate.</param>
		/// <param name="par">Is the security's par value.</param>
		/// <param name="frequency">Is the number of coupon payments per year.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		/// <param name="calcMethod">Is a logical value: to accrued interest from issue date = TRUE or omitted; to calculate from last coupon payment date = FALSE.</param>
		// [[FCN_ACCRINT]],AccrInt,ACCRINT,;M;fgrpFinancial;6;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;;?fnAccrint;;CWX;"[[PARAM_ACCRINT]]";"[[FHLP_ACCRINT]]";"[[AHLP1_ACCRINT]]";"[[AHLP2_ACCRINT]]";"[[AHLP3_ACCRINT]]";"[[AHLP4_ACCRINT]]";"[[AHLP5_ACCRINT]]";"[[AHLP6_ACCRINT]]";"[[AHLP7_ACCRINT]]";"[[AHLP8_ACCRINT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AccrInt_DispId, Name = "Func_AccrInt")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AccrInt(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @issue,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @firstInterest,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @par,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @frequency,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @calcMethod
		);

		/// <summary>
		/// Returns the accrued interest for a security that pays interest at maturity.
		/// </summary>
		/// <param name="issue">Is the security's issue date, expressed as a serial date number.</param>
		/// <param name="settlement">Is the security's maturity date, expressed as a serial date number.</param>
		/// <param name="rate">Is the security's annual coupon rate.</param>
		/// <param name="par">Is the security's par value.</param>
		/// <param name="basis">Is the type of day count basis to use.</param>
		// [[FCN_ACCRINTM]],AccrIntM,ACCRINTM,;M;fgrpFinancial;4;NE;NXSEBR,NXSEBR,NXSEBR,NXSEBR,NXSEBR;;?fnAccrintm;;CWX;"[[PARAM_ACCRINTM]]";"[[FHLP_ACCRINTM]]";"[[AHLP1_ACCRINTM]]";"[[AHLP2_ACCRINTM]]";"[[AHLP3_ACCRINTM]]";"[[AHLP4_ACCRINTM]]";"[[AHLP5_ACCRINTM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AccrIntM_DispId, Name = "Func_AccrIntM")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AccrIntM(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @issue,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @settlement,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @par,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @basis
		);

		/// <summary>
		/// Returns the serial number of the date before or after a specified number of workdays.
		/// </summary>
		/// <param name="startDate">Is a serial date number that represents the start date.</param>
		/// <param name="days">Is the number of nonweekend and non-holiday days before or after startDate.</param>
		/// <param name="holidays">Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.</param>
		// [[FCN_WORKDAY]],WorkDay,WORKDAY,WORKDAY;M;fgrpDateTime;2;NE;NXSEBR,NXSEBR,NSREMXB;;?fnWorkday;;CWX;"[[PARAM_WORKDAY]]";"[[FHLP_WORKDAY]]";"[[AHLP1_WORKDAY]]";"[[AHLP2_WORKDAY]]";"[[AHLP3_WORKDAY]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.WorkDay_DispId, Name = "Func_WorkDay")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult WorkDay(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @days,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @holidays
		);

		/// <summary>
		/// Returns the number of whole workdays between two dates.
		/// </summary>
		/// <param name="startDate">Is a serial date number that represents the start date.</param>
		/// <param name="endDate">Is a serial date number that represents the end date.</param>
		/// <param name="holidays">Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.</param>
		// [[FCN_NETWORKDAYS]],NetworkDays,NETWORKDAYS,NETWORKDAYS;M;fgrpDateTime;2;NE;NXSEBR,NXSEBR,NSREMXB;;?fnNetworkDays;;CWX;"[[PARAM_NETWORKDAYS]]";"[[FHLP_NETWORKDAYS]]";"[[AHLP1_NETWORKDAYS]]";"[[AHLP2_NETWORKDAYS]]";"[[AHLP3_NETWORKDAYS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.NetworkDays_DispId, Name = "Func_NetworkDays")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult NetworkDays(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @holidays
		);

		/// <summary>
		/// Returns the greatest common divisor.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 values.</param>
		// [[FCN_GCD]],Gcd,GCD,;M;fgrpMathTrig;1;NE;NSEMXRB,...;44;?fnGcdLcmMulti;;CWX;"[[PARAM_GCD]]";"[[FHLP_GCD]]";"[[AHLP1_GCD]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Gcd_DispId, Name = "Func_Gcd")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Gcd(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the multinomial of a set of numbers.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 values for which you want the multinomial.</param>
		// [[FCN_MULTINOMIAL]],MultiNomial,MULTINOMIAL,;M;fgrpMathTrig;1;NE;NSEMXRB,...;46;?fnGcdLcmMulti;;CWX;"[[PARAM_MULTINOMIAL]]";"[[FHLP_MULTINOMIAL]]";"[[AHLP1_MULTINOMIAL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.MultiNomial_DispId, Name = "Func_MultiNomial")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult MultiNomial(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the least common multiple.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 values for which you want the least common multiple.</param>
		// [[FCN_LCM]],Lcm,LCM,;M;fgrpMathTrig;1;NE;NSEMXRB,...;45;?fnGcdLcmMulti;;CWX;"[[PARAM_LCM]]";"[[FHLP_LCM]]";"[[AHLP1_LCM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Lcm_DispId, Name = "Func_Lcm")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Lcm(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the future value of an initial principal after applying a series of compound interest rates.
		/// </summary>
		/// <param name="principal">Is the present value.</param>
		/// <param name="schedule">Is an array of interest rates to apply.</param>
		// [[FCN_FVSCHEDULE]],FVSchedule,FVSCHEDULE,;M;fgrpFinancial;2;NE;NXSEBR,NSERMXB;;?fnFVSchedule;;CWX;"[[PARAM_FVSCHEDULE]]";"[[FHLP_FVSCHEDULE]]";"[[AHLP1_FVSCHEDULE]]";"[[AHLP2_FVSCHEDULE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.FVSchedule_DispId, Name = "Func_FVSchedule")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult FVSchedule(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @principal,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @schedule
		);

		// SKIPPED due to: Function 'CUBEKPIMEMBER' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns a key performance indicator (KPI) property and displays the KPI name in the cell.
		// /// </summary>
		// /// <param name="connection">Is the name of a connection to an OLAP cube.</param>
		// /// <param name="kpiName">Is the KPI name.</param>
		// /// <param name="kpiProperty">Is the KPI property.</param>
		// /// <param name="caption">Is the caption to be displayed in the cell.</param>
		// |+[[FCN_CUBEKPIMEMBER]],CubeKPIMember,CUBEKPIMEMBER,COM.MICROSOFT.CUBEKPIMEMBER;;fgrpCube;3;SE;S,S,N,S;;?fnCubeKPIMember;;CWX;"[[PARAM_CUBEKPIMEMBER]]";"[[FHLP_CUBEKPIMEMBER]]";"[[AHLP1_CUBEKPIMEMBER]]";"[[AHLP2_CUBEKPIMEMBER]]";"[[AHLP3_CUBEKPIMEMBER]]";"[[AHLP4_CUBEKPIMEMBER]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.CubeKPIMember_DispId, Name = "Func_CubeKPIMember")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult CubeKPIMember(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @connection,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @kpiName,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @kpiProperty,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @caption
		// );

		// SKIPPED due to: Function 'CUBESET' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Defines a calculated set of members or tuples by sending a set expression to the cube on the server, which creates the set, and then returns that set to Microsoft Excel.
		// /// </summary>
		// /// <param name="connection">Is the name of a connection to an OLAP cube.</param>
		// /// <param name="setExpression">Is the expression for the set.</param>
		// /// <param name="caption">Is the caption to be displayed in the cell.</param>
		// /// <param name="sortOrder">Is the sort order.</param>
		// /// <param name="sortBy">Is the sort by.</param>
		// |+[[FCN_CUBESET]],CubeSet,CUBESET,COM.MICROSOFT.CUBESET;L;fgrpCube;2;SE;S,MRS,S,N,S;;?fnCubeSet;;CWX;"[[PARAM_CUBESET]]";"[[FHLP_CUBESET]]";"[[AHLP1_CUBESET]]";"[[AHLP2_CUBESET]]";"[[AHLP3_CUBESET]]";"[[AHLP4_CUBESET]]";"[[AHLP5_CUBESET]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.CubeSet_DispId, Name = "Func_CubeSet")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult CubeSet(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @connection,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|string|Excel.RangeReference|Excel.FunctionResult<any>")] object @setExpression,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @caption,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @sortOrder,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @sortBy
		// );

		// SKIPPED due to: Function 'CUBESETCOUNT' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the number of items in a set.
		// /// </summary>
		// /// <param name="set">Is the set whose elements are to be counted.</param>
		// |+[[FCN_CUBESETCOUNT]],CubeSetCount,CUBESETCOUNT,COM.MICROSOFT.CUBESETCOUNT;;fgrpCube;1;NE;S;;?fnCubeSetCount;;CWX;"[[PARAM_CUBESETCOUNT]]";"[[FHLP_CUBESETCOUNT]]";"[[AHLP1_CUBESETCOUNT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.CubeSetCount_DispId, Name = "Func_CubeSetCount")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult CubeSetCount(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @set
		// );

		// SKIPPED due to: Function 'IFERROR' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns value_if_error if expression is an error and the value of the expression itself otherwise.
		// /// </summary>
		// /// <param name="value">Is any value or expression or reference.</param>
		// /// <param name="valueIfError">Is any value or expression or reference.</param>
		// [[FCN_IFERROR]],IfError,IFERROR,;M;fgrpLogical;2;MNSBE;MNSBE,MRNSBGE;0;fnIfError;1;CWXL;"[[PARAM1_IFERROR]]";"[[FHLP_IFERROR]]";"[[AHLP1_IFERROR]]";"[[AHLP2_IFERROR]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.IfError_DispId, Name = "Func_IfError")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult IfError(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @valueIfError
		// );

		/// <summary>
		/// Counts the number of cells specified by a given set of conditions or criteria.
		/// </summary>
		/// <param name="values">List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition in the form of a number, expression, or text that defines which cells will be counted.</param>
		// [[FCN_COUNTIFS]],CountIfs,COUNTIFS,;ML;fgrpStatistical;2;N;R,NSBE,...,...;;?IfRangefs;0;CWX;"[[PARAM_COUNTIFS]]";"[[FHLP_COUNTIFS]]";"[[AHLP1_COUNTIFS]]";"[[AHLP2_COUNTIFS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.CountIfs_DispId, Name = "Func_CountIfs")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult CountIfs(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>|number|string|boolean>")] params object[] @values
		);

		/// <summary>
		/// Adds the cells specified by a given set of conditions or criteria.
		/// </summary>
		/// <param name="sumRange">Are the actual cells to sum.</param>
		/// <param name="values">List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.</param>
		// [[FCN_SUMIFS]],SumIfs,SUMIFS,;ML;fgrpMathTrig;3;N;R,R,NSBE,...,...;;?IfRangefs;2;CWX;"[[PARAM_SUMIFS]]";"[[FHLP_SUMIFS]]";"[[AHLP1_SUMIFS]]";"[[AHLP2_SUMIFS]]";"[[AHLP3_SUMIFS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.SumIfs_DispId, Name = "Func_SumIfs")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult SumIfs(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @sumRange,

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>|number|string|boolean>")] params object[] @values
		);

		/// <summary>
		/// Finds average(arithmetic mean) for the cells specified by a given condition or criteria.
		/// </summary>
		/// <param name="range">Is the range of cells you want evaluated.</param>
		/// <param name="criteria">Is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.</param>
		/// <param name="averageRange">Are the actual cells to be used to find the average. If omitted, the cells in range are used.</param>
		// [[FCN_AVERAGEIF]],AverageIf,AVERAGEIF,;ML;fgrpStatistical;2;N;R,NSBE,R;;?IfRangef;1;CWX;"[[PARAM_AVERAGEIF]]";"[[FHLP_AVERAGEIF]]";"[[AHLP1_AVERAGEIF]]";"[[AHLP2_AVERAGEIF]]";"[[AHLP3_AVERAGEIF]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AverageIf_DispId, Name = "Func_AverageIf")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AverageIf(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @range,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @criteria,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @averageRange
		);

		/// <summary>
		/// Finds average(arithmetic mean) for the cells specified by a given set of conditions or criteria.
		/// </summary>
		/// <param name="averageRange">Are the actual cells to be used to find the average.</param>
		/// <param name="values">List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.</param>
		// [[FCN_AVERAGEIFS]],AverageIfs,AVERAGEIFS,;ML;fgrpStatistical;3;N;R,R,NSBE,...,...;;?IfRangefs;1;CWX;"[[PARAM_AVERAGEIFS]]";"[[FHLP_AVERAGEIFS]]";"[[AHLP1_AVERAGEIFS]]";"[[AHLP2_AVERAGEIFS]]";"[[AHLP3_AVERAGEIFS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.AverageIfs_DispId, Name = "Func_AverageIfs")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult AverageIfs(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @averageRange,

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>|number|string|boolean>")] params object[] @values
		);

		// SKIPPED due to: Function has overload with one or both of the overloaded params accepting '...'. At time of codegen creation,  there is only one function that does this (Aggregate), and it's unclear how to expose it. So just will ignore this pattern for now.
		// /// <summary>
		// /// Returns an aggregate in a list or database.
		// /// </summary>
		// /// <param name=""></param>
		// /// <param name=""></param>
		// /// <param name=""></param>
		// /// <param name=""></param>
		// /// <param name="values"></param>
		// [[FCN_AGGREGATE]],Aggregate,AGGREGATE,COM.MICROSOFT.AGGREGATE;M;fgrpMathTrig;3;N;N,N,RM,RN,R,...;;?RangefAggregate;224;CWX;"[[PARAM1_AGGREGATE]]![[PARAM2_AGGREGATE]]";"[[FHLP_AGGREGATE]]";"[[AHLP1_AGGREGATE]]";"[[AHLP2_AGGREGATE]]";"[[AHLP3_AGGREGATE]]";"[[AHLP4_AGGREGATE]]";"[[AHLP5_AGGREGATE]]";"[[AHLP6_AGGREGATE]]";"[[AHLP7_AGGREGATE]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Aggregate_DispId, Name = "Func_Aggregate")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Aggregate(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );

		/// <summary>
		/// Returns the individual term binomial distribution probability.
		/// </summary>
		/// <param name="numberS">Is the number of successes in trials.</param>
		/// <param name="trials">Is the number of independent trials.</param>
		/// <param name="probabilityS">Is the probability of success on each trial.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.</param>
		// [[FCN_BINOM.DIST]],Binom_Dist,BINOM.DIST,BINOMDIST;M;fgrpStatistical;4;N;N,N,N,B;1;?math;fnBinomDist14;CWXL;"[[PARAM_BINOM.DIST]]";"[[FHLP_BINOM.DIST]]";"[[AHLP1_BINOM.DIST]]";"[[AHLP2_BINOM.DIST]]";"[[AHLP3_BINOM.DIST]]";"[[AHLP4_BINOM.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Binom_Dist_DispId, Name = "Func_Binom_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Binom_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberS,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @trials,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probabilityS,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.
		/// </summary>
		/// <param name="trials">Is the number of Bernoulli trials.</param>
		/// <param name="probabilityS">Is the probability of success on each trial, a number between 0 and 1 inclusive.</param>
		/// <param name="alpha">Is the criterion value, a number between 0 and 1 inclusive.</param>
		// [[FCN_BINOM.INV]],Binom_Inv,BINOM.INV,CRITBINOM;M;fgrpStatistical;3;N;N,N,N;1;?math;fnCrbin14;CWXL;"[[PARAM_BINOM.INV]]";"[[FHLP_BINOM.INV]]";"[[AHLP1_BINOM.INV]]";"[[AHLP2_BINOM.INV]]";"[[AHLP3_BINOM.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Binom_Inv_DispId, Name = "Func_Binom_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Binom_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @trials,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probabilityS,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha
		);

		/// <summary>
		/// Returns the confidence interval for a population mean, using a normal distribution.
		/// </summary>
		/// <param name="alpha">Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.</param>
		/// <param name="standardDev">Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.</param>
		/// <param name="size">Is the sample size.</param>
		// [[FCN_CONFIDENCE.NORM]],Confidence_Norm,CONFIDENCE.NORM,CONFIDENCE;M;fgrpStatistical;3;N;N,N,N;1;?math;fnConfid14;CWXL;"[[PARAM_CONFIDENCE.NORM]]";"[[FHLP_CONFIDENCE.NORM]]";"[[AHLP1_CONFIDENCE.NORM]]";"[[AHLP2_CONFIDENCE.NORM]]";"[[AHLP3_CONFIDENCE.NORM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Confidence_Norm_DispId, Name = "Func_Confidence_Norm")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Confidence_Norm(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @standardDev,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @size
		);

		/// <summary>
		/// Returns the confidence interval for a population mean, using a Student's T distribution.
		/// </summary>
		/// <param name="alpha">Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.</param>
		/// <param name="standardDev">Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.</param>
		/// <param name="size">Is the sample size.</param>
		// [[FCN_CONFIDENCE.T]],Confidence_T,CONFIDENCE.T,COM.MICROSOFT.CONFIDENCE.T;M;fgrpStatistical;3;N;N,N,N;1;?math;fnConfidT;CWXL;"[[PARAM_CONFIDENCE.T]]";"[[FHLP_CONFIDENCE.T]]";"[[AHLP1_CONFIDENCE.T]]";"[[AHLP2_CONFIDENCE.T]]";"[[AHLP3_CONFIDENCE.T]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Confidence_T_DispId, Name = "Func_Confidence_T")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Confidence_T(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @standardDev,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @size
		);

		// SKIPPED due to: Function 'CHISQ_TEST' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the test for independence: the value from the chi-squared distribution for the statistic and the appropriate degrees of freedom.
		// /// </summary>
		// /// <param name="actualRange">Is the range of data that contains observations to test against expected values.</param>
		// /// <param name="expectedRange">Is the range of data that contains the ratio of the product of row totals and column totals to the grand total.</param>
		// [[FCN_CHISQ.TEST]],ChiSq_Test,CHISQ.TEST,LEGACY.CHITEST;M;fgrpStatistical;2;N;M,M;19;?Range2:m;;CWX;"[[PARAM_CHISQ.TEST]]";"[[FHLP_CHISQ.TEST]]";"[[AHLP1_CHISQ.TEST]]";"[[AHLP2_CHISQ.TEST]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.ChiSq_Test_DispId, Name = "Func_ChiSq_Test")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult ChiSq_Test(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @actualRange,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @expectedRange
		// );

		// SKIPPED due to: Function 'F_TEST' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the result of an F-test, the two-tailed probability that the variances in Array1 and Array2 are not significantly different.
		// /// </summary>
		// /// <param name="array1">Is the first array or range of data and can be numbers or names, arrays, or references that contain numbers (blanks are ignored).</param>
		// /// <param name="array2">Is the second array or range of data and can be numbers or names, arrays, or references that contain numbers (blanks are ignored).</param>
		// [[FCN_F.TEST]],F_Test,F.TEST,COM.MICROSOFT.F.TEST;M;fgrpStatistical;2;N;M,M;84;?Range2:m;;CWX;"[[PARAM_F.TEST]]";"[[FHLP_F.TEST]]";"[[AHLP1_F.TEST]]";"[[AHLP2_F.TEST]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.F_Test_DispId, Name = "Func_F_Test")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult F_Test(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array2
		// );

		// SKIPPED due to: Function 'COVARIANCE_P' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns population covariance, the average of the products of deviations for each data point pair in two data sets.
		// /// </summary>
		// /// <param name="array1">Is the first cell range of integers and must be numbers, arrays, or references that contain numbers.</param>
		// /// <param name="array2">Is the second cell range of integers and must be numbers, arrays, or references that contain numbers.</param>
		// [[FCN_COVARIANCE.P]],Covariance_P,COVARIANCE.P,COVAR;M;fgrpStatistical;2;N;M,M;71;?Range2:m;;CWX;"[[PARAM_COVARIANCE.P]]";"[[FHLP_COVARIANCE.P]]";"[[AHLP1_COVARIANCE.P]]";"[[AHLP2_COVARIANCE.P]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Covariance_P_DispId, Name = "Func_Covariance_P")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Covariance_P(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array2
		// );

		// SKIPPED due to: Function 'COVARIANCE_S' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns sample covariance, the average of the products of deviations for each data point pair in two data sets.
		// /// </summary>
		// /// <param name="array1">Is the first cell range of integers and must be numbers, arrays, or references that contain numbers.</param>
		// /// <param name="array2">Is the second cell range of integers and must be numbers, arrays, or references that contain numbers.</param>
		// [[FCN_COVARIANCE.S]],Covariance_S,COVARIANCE.S,COM.MICROSOFT.COVARIANCE.S;M;fgrpStatistical;2;N;M,M;82;?Range2:m;;CWX;"[[PARAM_COVARIANCE.S]]";"[[FHLP_COVARIANCE.S]]";"[[AHLP1_COVARIANCE.S]]";"[[AHLP2_COVARIANCE.S]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Covariance_S_DispId, Name = "Func_Covariance_S")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Covariance_S(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array2
		// );

		/// <summary>
		/// Returns the exponential distribution.
		/// </summary>
		/// <param name="x">Is the value of the function, a nonnegative number.</param>
		/// <param name="lambda">Is the parameter value, a positive number.</param>
		/// <param name="cumulative">Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.</param>
		// [[FCN_EXPON.DIST]],Expon_Dist,EXPON.DIST,EXPONDIST;M;fgrpStatistical;3;N;N,N,B;1;?math;fnExpon14;CWXL;"[[PARAM_EXPON.DIST]]";"[[FHLP_EXPON.DIST]]";"[[AHLP1_EXPON.DIST]]";"[[AHLP2_EXPON.DIST]]";"[[AHLP3_EXPON.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Expon_Dist_DispId, Name = "Func_Expon_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Expon_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @lambda,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the gamma distribution.
		/// </summary>
		/// <param name="x">Is the value at which you want to evaluate the distribution, a nonnegative number.</param>
		/// <param name="alpha">Is a parameter to the distribution, a positive number.</param>
		/// <param name="beta">Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.DIST returns the standard gamma distribution.</param>
		/// <param name="cumulative">Is a logical value: return the cumulative distribution function = TRUE; return the probability mass function = FALSE or omitted.</param>
		// [[FCN_GAMMA.DIST]],Gamma_Dist,GAMMA.DIST,GAMMADIST;M;fgrpStatistical;4;N;N,N,N,B;1;?math;fnGamma14;CWXL;"[[PARAM_GAMMA.DIST]]";"[[FHLP_GAMMA.DIST]]";"[[AHLP1_GAMMA.DIST]]";"[[AHLP2_GAMMA.DIST]]";"[[AHLP3_GAMMA.DIST]]";"[[AHLP4_GAMMA.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Gamma_Dist_DispId, Name = "Func_Gamma_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Gamma_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @beta,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the inverse of the gamma cumulative distribution: if p = GAMMA.DIST(x,...), then GAMMA.INV(p,...) = x.
		/// </summary>
		/// <param name="probability">Is the probability associated with the gamma distribution, a number between 0 and 1, inclusive.</param>
		/// <param name="alpha">Is a parameter to the distribution, a positive number.</param>
		/// <param name="beta">Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.INV returns the inverse of the standard gamma distribution.</param>
		// [[FCN_GAMMA.INV]],Gamma_Inv,GAMMA.INV,GAMMAINV;M;fgrpStatistical;3;N;N,N,N;1;?math;fnGammaInv14;CWXL;"[[PARAM_GAMMA.INV]]";"[[FHLP_GAMMA.INV]]";"[[AHLP1_GAMMA.INV]]";"[[AHLP2_GAMMA.INV]]";"[[AHLP3_GAMMA.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Gamma_Inv_DispId, Name = "Func_Gamma_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Gamma_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @beta
		);

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Returns a vertical array of the most frequently occurring, or repetitive, values in an array or range of data.  For a horizontal array, use =TRANSPOSE(MODE.MULT(number1,number2,...)).
		// /// </summary>
		// /// <param name="values">List of parameters, whose elements are 1 to 255 numbers, or names, arrays, or references that contain numbers for which you want the mode.</param>
		// &[[FCN_MODE.MULT]],Mode_Mult,MODE.MULT,COM.MICROSOFT.MODE.MULT;M3;fgrpStatistical;1;M;M,...;PfnFinStat,InitStat;?rangef;144;CWXL;"[[PARAM_MODE.MULT]]";"[[FHLP_MODE.MULT]]";"[[AHLP1_MODE.MULT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Mode_Mult_DispId, Name = "Func_Mode_Mult")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Mode_Mult(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );

		// SKIPPED due to: Function 'MODE_SNGL' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the most frequently occurring, or repetitive, value in an array or range of data.
		// /// </summary>
		// /// <param name="values">List of parameters, whose elements are 1 to 255 numbers, or names, arrays, or references that contain numbers for which you want the mode.</param>
		// &[[FCN_MODE.SNGL]],Mode_Sngl,MODE.SNGL,MODE;M3;fgrpStatistical;1;N;M,...;PfnFinStat,InitStat;?rangef;108;CWXL;"[[PARAM_MODE.SNGL]]";"[[FHLP_MODE.SNGL]]";"[[AHLP1_MODE.SNGL]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Mode_Sngl_DispId, Name = "Func_Mode_Sngl")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Mode_Sngl(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );

		/// <summary>
		/// Returns the normal distribution for the specified mean and standard deviation.
		/// </summary>
		/// <param name="x">Is the value for which you want the distribution.</param>
		/// <param name="mean">Is the arithmetic mean of the distribution.</param>
		/// <param name="standardDev">Is the standard deviation of the distribution, a positive number.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.</param>
		// [[FCN_NORM.DIST]],Norm_Dist,NORM.DIST,NORMDIST;M;fgrpStatistical;4;N;N,N,N,B;1;?math;fnNormal14;CWXL;"[[PARAM_NORM.DIST]]";"[[FHLP_NORM.DIST]]";"[[AHLP1_NORM.DIST]]";"[[AHLP2_NORM.DIST]]";"[[AHLP3_NORM.DIST]]";"[[AHLP4_NORM.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Norm_Dist_DispId, Name = "Func_Norm_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Norm_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @mean,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @standardDev,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.
		/// </summary>
		/// <param name="probability">Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.</param>
		/// <param name="mean">Is the arithmetic mean of the distribution.</param>
		/// <param name="standardDev">Is the standard deviation of the distribution, a positive number.</param>
		// [[FCN_NORM.INV]],Norm_Inv,NORM.INV,NORMINV;M;fgrpStatistical;3;N;N,N,N;1;?math;fnNrmInv14;CWXL;"[[PARAM_NORM.INV]]";"[[FHLP_NORM.INV]]";"[[AHLP1_NORM.INV]]";"[[AHLP2_NORM.INV]]";"[[AHLP3_NORM.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Norm_Inv_DispId, Name = "Func_Norm_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Norm_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @mean,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @standardDev
		);

		/// <summary>
		/// Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.
		/// </summary>
		/// <param name="array">Is the array or range of data that defines relative standing.</param>
		/// <param name="k">Is the percentile value that is between 0 through 1, inclusive.</param>
		// &[[FCN_PERCENTILE.EXC]],Percentile_Exc,PERCENTILE.EXC,COM.MICROSOFT.PERCENTILE.EXC;M3;fgrpStatistical;2;N;NRM,N;PfnFinStat,InitStat;?rangef;136;CWX;"[[PARAM_PERCENTILE.EXC]]";"[[FHLP_PERCENTILE.EXC]]";"[[AHLP1_PERCENTILE.EXC]]";"[[AHLP2_PERCENTILE.EXC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Percentile_Exc_DispId, Name = "Func_Percentile_Exc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Percentile_Exc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @k
		);

		/// <summary>
		/// Returns the k-th percentile of values in a range, where k is in the range 0..1, inclusive.
		/// </summary>
		/// <param name="array">Is the array or range of data that defines relative standing.</param>
		/// <param name="k">Is the percentile value that is between 0 through 1, inclusive.</param>
		// &[[FCN_PERCENTILE.INC]],Percentile_Inc,PERCENTILE.INC,PERCENTILE;M3;fgrpStatistical;2;N;NRM,N;PfnFinStat,InitStat;?rangef;100;CWX;"[[PARAM_PERCENTILE.INC]]";"[[FHLP_PERCENTILE.INC]]";"[[AHLP1_PERCENTILE.INC]]";"[[AHLP2_PERCENTILE.INC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Percentile_Inc_DispId, Name = "Func_Percentile_Inc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Percentile_Inc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @k
		);

		/// <summary>
		/// Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, exclusive) of the data set.
		/// </summary>
		/// <param name="array">Is the array or range of data with numeric values that defines relative standing.</param>
		/// <param name="x">Is the value for which you want to know the rank.</param>
		/// <param name="significance">Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).</param>
		// [[FCN_PERCENTRANK.EXC]],PercentRank_Exc,PERCENTRANK.EXC,COM.MICROSOFT.PERCENTRANK.EXC;M3;fgrpStatistical;2;N;NRM,N,NX;Prankfin,rankini;?rangef;138;CWX;"[[PARAM_PERCENTRANK.EXC]]";"[[FHLP_PERCENTRANK.EXC]]";"[[AHLP1_PERCENTRANK.EXC]]";"[[AHLP2_PERCENTRANK.EXC]]";"[[AHLP3_PERCENTRANK.EXC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.PercentRank_Exc_DispId, Name = "Func_PercentRank_Exc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult PercentRank_Exc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @significance
		);

		/// <summary>
		/// Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, inclusive) of the data set.
		/// </summary>
		/// <param name="array">Is the array or range of data with numeric values that defines relative standing.</param>
		/// <param name="x">Is the value for which you want to know the rank.</param>
		/// <param name="significance">Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).</param>
		// [[FCN_PERCENTRANK.INC]],PercentRank_Inc,PERCENTRANK.INC,PERCENTRANK;M3;fgrpStatistical;2;N;NRM,N,NX;Prankfin,rankini;?rangef;106;CWX;"[[PARAM_PERCENTRANK.INC]]";"[[FHLP_PERCENTRANK.INC]]";"[[AHLP1_PERCENTRANK.INC]]";"[[AHLP2_PERCENTRANK.INC]]";"[[AHLP3_PERCENTRANK.INC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.PercentRank_Inc_DispId, Name = "Func_PercentRank_Inc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult PercentRank_Inc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @significance
		);

		/// <summary>
		/// Returns the Poisson distribution.
		/// </summary>
		/// <param name="x">Is the number of events.</param>
		/// <param name="mean">Is the expected numeric value, a positive number.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative Poisson probability, use TRUE; for the Poisson probability mass function, use FALSE.</param>
		// [[FCN_POISSON.DIST]],Poisson_Dist,POISSON.DIST,POISSON;M;fgrpStatistical;3;N;N,N,B;1;?math;fnPoiss14;CWXL;"[[PARAM_POISSON.DIST]]";"[[FHLP_POISSON.DIST]]";"[[AHLP1_POISSON.DIST]]";"[[AHLP2_POISSON.DIST]]";"[[AHLP3_POISSON.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Poisson_Dist_DispId, Name = "Func_Poisson_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Poisson_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @mean,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the quartile of a data set, based on percentile values from 0..1, exclusive.
		/// </summary>
		/// <param name="array">Is the array or cell range of numeric values for which you want the quartile value.</param>
		/// <param name="quart">Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.</param>
		// &[[FCN_QUARTILE.EXC]],Quartile_Exc,QUARTILE.EXC,COM.MICROSOFT.QUARTILE.EXC;M3;fgrpStatistical;2;N;NRM,N;PfnFinStat,InitStat;?rangef;140;CWX;"[[PARAM_QUARTILE.EXC]]";"[[FHLP_QUARTILE.EXC]]";"[[AHLP1_QUARTILE.EXC]]";"[[AHLP2_QUARTILE.EXC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Quartile_Exc_DispId, Name = "Func_Quartile_Exc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Quartile_Exc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @quart
		);

		/// <summary>
		/// Returns the quartile of a data set, based on percentile values from 0..1, inclusive.
		/// </summary>
		/// <param name="array">Is the array or cell range of numeric values for which you want the quartile value.</param>
		/// <param name="quart">Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.</param>
		// &[[FCN_QUARTILE.INC]],Quartile_Inc,QUARTILE.INC,QUARTILE;M3;fgrpStatistical;2;N;NRM,N;PfnFinStat,InitStat;?rangef;92;CWX;"[[PARAM_QUARTILE.INC]]";"[[FHLP_QUARTILE.INC]]";"[[AHLP1_QUARTILE.INC]]";"[[AHLP2_QUARTILE.INC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Quartile_Inc_DispId, Name = "Func_Quartile_Inc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Quartile_Inc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @quart
		);

		/// <summary>
		/// Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the average rank is returned.
		/// </summary>
		/// <param name="number">Is the number for which you want to find the rank.</param>
		/// <param name="ref">Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.</param>
		/// <param name="order">Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.</param>
		// [[FCN_RANK.AVG]],Rank_Avg,RANK.AVG,COM.MICROSOFT.RANK.AVG;M3;fgrpStatistical;2;N;N,R,B;Prankfin,rankini;?rangef;142;CWX;"[[PARAM_RANK.AVG]]";"[[FHLP_RANK.AVG]]";"[[AHLP1_RANK.AVG]]";"[[AHLP2_RANK.AVG]]";"[[AHLP3_RANK.AVG]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rank_Avg_DispId, Name = "Func_Rank_Avg")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Rank_Avg(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @ref,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @order
		);

		/// <summary>
		/// Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the top rank of that set of values is returned.
		/// </summary>
		/// <param name="number">Is the number for which you want to find the rank.</param>
		/// <param name="ref">Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.</param>
		/// <param name="order">Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.</param>
		// [[FCN_RANK.EQ]],Rank_Eq,RANK.EQ,RANK;M3;fgrpStatistical;2;N;N,R,B;Prankfin,rankini;?rangef;30;CWX;"[[PARAM_RANK.EQ]]";"[[FHLP_RANK.EQ]]";"[[AHLP1_RANK.EQ]]";"[[AHLP2_RANK.EQ]]";"[[AHLP3_RANK.EQ]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rank_Eq_DispId, Name = "Func_Rank_Eq")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Rank_Eq(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @ref,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @order
		);

		/// <summary>
		/// Estimates standard deviation based on a sample (ignores logical values and text in the sample).
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers corresponding to a sample of a population and can be numbers or references that contain numbers.</param>
		// [[FCN_STDEV.S]],StDev_S,STDEV.S,STDEV;M3;fgrpStatistical;1;N;NRM,...;0;?fnVariance14;1;CWXL;"[[PARAM_STDEV.S]]";"[[FHLP_STDEV.S]]";"[[AHLP1_STDEV.S]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.StDev_S_DispId, Name = "Func_StDev_S")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult StDev_S(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numbers corresponding to a population and can be numbers or references that contain numbers.</param>
		// [[FCN_STDEV.P]],StDev_P,STDEV.P,STDEVP;M3;fgrpStatistical;1;N;NRM,...;0;?fnVarianceP;1;CWXL;"[[PARAM_STDEV.P]]";"[[FHLP_STDEV.P]]";"[[AHLP1_STDEV.P]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.StDev_P_DispId, Name = "Func_StDev_P")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult StDev_P(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the left-tailed Student's t-distribution.
		/// </summary>
		/// <param name="x">Is the numeric value at which to evaluate the distribution.</param>
		/// <param name="degFreedom">Is an integer indicating the number of degrees of freedom that characterize the distribution.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.</param>
		// [[FCN_T.DIST]],T_Dist,T.DIST,COM.MICROSOFT.T.DIST;M;fgrpStatistical;3;N;N,N,B;1;?math;fnTDisLT;CWXL;"[[PARAM_T.DIST]]";"[[FHLP_T.DIST]]";"[[AHLP1_T.DIST]]";"[[AHLP2_T.DIST]]";"[[AHLP3_T.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.T_Dist_DispId, Name = "Func_T_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult T_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the two-tailed Student's t-distribution.
		/// </summary>
		/// <param name="x">Is the numeric value at which to evaluate the distribution.</param>
		/// <param name="degFreedom">Is an integer indicating the number of degrees of freedom that characterize the distribution.</param>
		// [[FCN_T.DIST.2T]],T_Dist_2T,T.DIST.2T,COM.MICROSOFT.T.DIST.2T;M;fgrpStatistical;2;N;N,N;1;?math;fnTDis2T;CWXL;"[[PARAM_T.DIST.2T]]";"[[FHLP_T.DIST.2T]]";"[[AHLP1_T.DIST.2T]]";"[[AHLP2_T.DIST.2T]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.T_Dist_2T_DispId, Name = "Func_T_Dist_2T")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult T_Dist_2T(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom
		);

		/// <summary>
		/// Returns the right-tailed Student's t-distribution.
		/// </summary>
		/// <param name="x">Is the numeric value at which to evaluate the distribution.</param>
		/// <param name="degFreedom">Is an integer indicating the number of degrees of freedom that characterize the distribution.</param>
		// [[FCN_T.DIST.RT]],T_Dist_RT,T.DIST.RT,COM.MICROSOFT.T.DIST.RT;M;fgrpStatistical;2;N;N,N;1;?math;fnTDisRT;CWXL;"[[PARAM_T.DIST.RT]]";"[[FHLP_T.DIST.RT]]";"[[AHLP1_T.DIST.RT]]";"[[AHLP2_T.DIST.RT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.T_Dist_RT_DispId, Name = "Func_T_Dist_RT")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult T_Dist_RT(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom
		);

		/// <summary>
		/// Returns the left-tailed inverse of the Student's t-distribution.
		/// </summary>
		/// <param name="probability">Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.</param>
		/// <param name="degFreedom">Is a positive integer indicating the number of degrees of freedom to characterize the distribution.</param>
		// [[FCN_T.INV]],T_Inv,T.INV,COM.MICROSOFT.T.INV;M;fgrpStatistical;2;N;N,N;128;?math;fnTInvLT;CWXL;"[[PARAM_T.INV]]";"[[FHLP_T.INV]]";"[[AHLP1_T.INV]]";"[[AHLP2_T.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.T_Inv_DispId, Name = "Func_T_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult T_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom
		);

		/// <summary>
		/// Returns the two-tailed inverse of the Student's t-distribution.
		/// </summary>
		/// <param name="probability">Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.</param>
		/// <param name="degFreedom">Is a positive integer indicating the number of degrees of freedom to characterize the distribution.</param>
		// [[FCN_T.INV.2T]],T_Inv_2T,T.INV.2T,TINV;M;fgrpStatistical;2;N;N,N;128;?math;fnTInv14;CWXL;"[[PARAM_T.INV.2T]]";"[[FHLP_T.INV.2T]]";"[[AHLP1_T.INV.2T]]";"[[AHLP2_T.INV.2T]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.T_Inv_2T_DispId, Name = "Func_T_Inv_2T")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult T_Inv_2T(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom
		);

		/// <summary>
		/// Estimates variance based on a sample (ignores logical values and text in the sample).
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a sample of a population.</param>
		// [[FCN_VAR.S]],Var_S,VAR.S,VAR;M3;fgrpStatistical;1;N;NRM,...;0;?fnVariance14;0;CWXL;"[[PARAM_VAR.S]]";"[[FHLP_VAR.S]]";"[[AHLP1_VAR.S]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Var_S_DispId, Name = "Func_Var_S")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Var_S(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Calculates variance based on the entire population (ignores logical values and text in the population).
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a population.</param>
		// [[FCN_VAR.P]],Var_P,VAR.P,VARP;M3;fgrpStatistical;1;N;NRM,...;0;?fnVarianceP;0;CWXL;"[[PARAM_VAR.P]]";"[[FHLP_VAR.P]]";"[[AHLP1_VAR.P]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Var_P_DispId, Name = "Func_Var_P")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Var_P(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the Weibull distribution.
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function, a nonnegative number.</param>
		/// <param name="alpha">Is a parameter to the distribution, a positive number.</param>
		/// <param name="beta">Is a parameter to the distribution, a positive number.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.</param>
		// [[FCN_WEIBULL.DIST]],Weibull_Dist,WEIBULL.DIST,WEIBULL;M;fgrpStatistical;4;N;N,N,N,B;1;?math;fnWeibull14;CWXL;"[[PARAM_WEIBULL.DIST]]";"[[FHLP_WEIBULL.DIST]]";"[[AHLP1_WEIBULL.DIST]]";"[[AHLP2_WEIBULL.DIST]]";"[[AHLP3_WEIBULL.DIST]]";"[[AHLP4_WEIBULL.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Weibull_Dist_DispId, Name = "Func_Weibull_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Weibull_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @beta,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the number of whole workdays between two dates with custom weekend parameters.
		/// </summary>
		/// <param name="startDate">Is a serial date number that represents the start date.</param>
		/// <param name="endDate">Is a serial date number that represents the end date.</param>
		/// <param name="weekend">Is a number or string specifying when weekends occur.</param>
		/// <param name="holidays">Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.</param>
		// [[FCN_NETWORKDAYS.INTL]],NetworkDays_Intl,NETWORKDAYS.INTL,COM.MICROSOFT.NETWORKDAYS.INTL;MX;fgrpDateTime;2;NE;NXSEBR,NXSEBR,NXSE,NSREMXB;;?fnNetworkDays_Intl;;CWX;"[[PARAM_NETWORKDAYS.INTL]]";"[[FHLP_NETWORKDAYS.INTL]]";"[[AHLP1_NETWORKDAYS.INTL]]";"[[AHLP2_NETWORKDAYS.INTL]]";"[[AHLP3_NETWORKDAYS.INTL]]";"[[AHLP4_NETWORKDAYS.INTL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.NetworkDays_Intl_DispId, Name = "Func_NetworkDays_Intl")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult NetworkDays_Intl(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @weekend,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @holidays
		);

		/// <summary>
		/// Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters.
		/// </summary>
		/// <param name="startDate">Is a serial date number that represents the start date.</param>
		/// <param name="days">Is the number of nonweekend and non-holiday days before or after startDate.</param>
		/// <param name="weekend">Is a number or string specifying when weekends occur.</param>
		/// <param name="holidays">Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.</param>
		// [[FCN_WORKDAY.INTL]],WorkDay_Intl,WORKDAY.INTL,COM.MICROSOFT.WORKDAY.INTL;MX;fgrpDateTime;2;NE;NXSEBR,NXSEBR,NXSE,NSREMXB;;?fnWorkday_Intl;;CWX;"[[PARAM_WORKDAY.INTL]]";"[[FHLP_WORKDAY.INTL]]";"[[AHLP1_WORKDAY.INTL]]";"[[AHLP2_WORKDAY.INTL]]";"[[AHLP3_WORKDAY.INTL]]";"[[AHLP4_WORKDAY.INTL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.WorkDay_Intl_DispId, Name = "Func_WorkDay_Intl")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult WorkDay_Intl(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @days,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @weekend,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|Excel.Range|boolean|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @holidays
		);

		/// <summary>
		/// Rounds a number up, to the nearest integer or to the nearest multiple of significance.
		/// </summary>
		/// <param name="number">Is the value you want to round.</param>
		/// <param name="significance">Is the multiple to which you want to round.</param>
		// $[[FCN_ECMA.CEILING]],ECMA_Ceiling,ECMA.CEILING,COM.MICROSOFT.ECMA.CEILING;MX;fgrpMathTrig;2;N;N,N;128;?math;fnEcmaCeiling;CWXL;"[[PARAM_CEILING]]";"[[FHLP_CEILING]]";"[[AHLP1_CEILING]]";"[[AHLP2_CEILING]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ECMA_Ceiling_DispId, Name = "Func_ECMA_Ceiling")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ECMA_Ceiling(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @significance
		);

		/// <summary>
		/// Rounds a number up, to the nearest integer or to the nearest multiple of significance.
		/// </summary>
		/// <param name="number">Is the value you want to round.</param>
		/// <param name="significance">Is the optional multiple to which you want to round.</param>
		// $[[FCN_ISO.CEILING]],ISO_Ceiling,ISO.CEILING,COM.MICROSOFT.ISO.CEILING;MX;fgrpMathTrig;1;N;N,NX;128;?fnCeiling_Iso;;CWXL;"[[PARAM_ISO.CEILING]]";"[[FHLP_ISO.CEILING]]";"[[AHLP1_ISO.CEILING]]";"[[AHLP2_ISO.CEILING]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ISO_Ceiling_DispId, Name = "Func_ISO_Ceiling")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ISO_Ceiling(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @significance
		);

		/// <summary>
		/// Returns the beta probability distribution function.
		/// </summary>
		/// <param name="x">Is the value between A and B at which to evaluate the function.</param>
		/// <param name="alpha">Is a parameter to the distribution and must be greater than 0.</param>
		/// <param name="beta">Is a parameter to the distribution and must be greater than 0.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.</param>
		/// <param name="A">Is an optional lower bound to the interval of x. If omitted, A = 0.</param>
		/// <param name="B">Is an optional upper bound to the interval of x. If omitted, B = 1.</param>
		// ~525[[FCN_BETA.DIST]],Beta_Dist,BETA.DIST,BETADIST;M;fgrpStatistical;4;N;N,N,N,B,NX,NX;1;?math;fnBetaDisPdfLtCdf;CWXL;"[[PARAM_BETA.DIST]]";"[[FHLP_BETA.DIST]]";"[[AHLP1_BETA.DIST]]";"[[AHLP2_BETA.DIST]]";"[[AHLP3_BETA.DIST]]";"[[AHLP4_BETA.DIST]]";"[[AHLP5_BETA.DIST]]";"[[AHLP6_BETA.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Beta_Dist_DispId, Name = "Func_Beta_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Beta_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @beta,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @A,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @B
		);

		/// <summary>
		/// Returns the inverse of the cumulative beta probability density function (BETA.DIST).
		/// </summary>
		/// <param name="probability">Is a probability associated with the beta distribution.</param>
		/// <param name="alpha">Is a parameter to the distribution and must be greater than 0.</param>
		/// <param name="beta">Is a parameter to the distribution and must be greater than 0.</param>
		/// <param name="A">Is an optional lower bound to the interval of x. If omitted, A = 0.</param>
		/// <param name="B">Is an optional upper bound to the interval of x. If omitted, B = 1.</param>
		// [[FCN_BETA.INV]],Beta_Inv,BETA.INV,BETAINV;M;fgrpStatistical;3;N;N,N,N,NX,NX;1;?math;fnBetaInv14;CWXL;"[[PARAM_BETA.INV]]";"[[FHLP_BETA.INV]]";"[[AHLP1_BETA.INV]]";"[[AHLP2_BETA.INV]]";"[[AHLP3_BETA.INV]]";"[[AHLP4_BETA.INV]]";"[[AHLP5_BETA.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Beta_Inv_DispId, Name = "Func_Beta_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Beta_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @alpha,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @beta,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @A,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @B
		);

		/// <summary>
		/// Returns the left-tailed probability of the chi-squared distribution.
		/// </summary>
		/// <param name="x">Is the value at which you want to evaluate the distribution, a nonnegative number.</param>
		/// <param name="degFreedom">Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		/// <param name="cumulative">Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.</param>
		// [[FCN_CHISQ.DIST]],ChiSq_Dist,CHISQ.DIST,CHISQDIST;M;fgrpStatistical;3;N;N,N,B;1;?math;fnChiDisPdfLtCdf;CWXL;"[[PARAM_CHISQ.DIST]]";"[[FHLP_CHISQ.DIST]]";"[[AHLP1_CHISQ.DIST]]";"[[AHLP2_CHISQ.DIST]]";"[[AHLP3_CHISQ.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ChiSq_Dist_DispId, Name = "Func_ChiSq_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ChiSq_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the right-tailed probability of the chi-squared distribution.
		/// </summary>
		/// <param name="x">Is the value at which you want to evaluate the distribution, a nonnegative number.</param>
		/// <param name="degFreedom">Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		// [[FCN_CHISQ.DIST.RT]],ChiSq_Dist_RT,CHISQ.DIST.RT,LEGACY.CHIDIST;M;fgrpStatistical;2;N;N,N;128;?math;fnChiDis14;CWXL;"[[PARAM_CHISQ.DIST.RT]]";"[[FHLP_CHISQ.DIST.RT]]";"[[AHLP1_CHISQ.DIST.RT]]";"[[AHLP2_CHISQ.DIST.RT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ChiSq_Dist_RT_DispId, Name = "Func_ChiSq_Dist_RT")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ChiSq_Dist_RT(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom
		);

		/// <summary>
		/// Returns the inverse of the left-tailed probability of the chi-squared distribution.
		/// </summary>
		/// <param name="probability">Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.</param>
		/// <param name="degFreedom">Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		// [[FCN_CHISQ.INV]],ChiSq_Inv,CHISQ.INV,CHISQINV;M;fgrpStatistical;2;N;N,N;128;?math;fnChiInvLt;CWXL;"[[PARAM_CHISQ.INV]]";"[[FHLP_CHISQ.INV]]";"[[AHLP1_CHISQ.INV]]";"[[AHLP2_CHISQ.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ChiSq_Inv_DispId, Name = "Func_ChiSq_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ChiSq_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom
		);

		/// <summary>
		/// Returns the inverse of the right-tailed probability of the chi-squared distribution.
		/// </summary>
		/// <param name="probability">Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.</param>
		/// <param name="degFreedom">Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		// [[FCN_CHISQ.INV.RT]],ChiSq_Inv_RT,CHISQ.INV.RT,LEGACY.CHIINV;M;fgrpStatistical;2;N;N,N;128;?math;fnChiInv14;CWXL;"[[PARAM_CHISQ.INV.RT]]";"[[FHLP_CHISQ.INV.RT]]";"[[AHLP1_CHISQ.INV.RT]]";"[[AHLP2_CHISQ.INV.RT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ChiSq_Inv_RT_DispId, Name = "Func_ChiSq_Inv_RT")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ChiSq_Inv_RT(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom
		);

		/// <summary>
		/// Returns the (left-tailed) F probability distribution (degree of diversity) for two data sets.
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function, a nonnegative number.</param>
		/// <param name="degFreedom1">Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		/// <param name="degFreedom2">Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		/// <param name="cumulative">Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.</param>
		// [[FCN_F.DIST]],F_Dist,F.DIST,FDIST;M;fgrpStatistical;4;N;N,N,N,B;1;?math;fnFDistPdfLtCdf;CWXL;"[[PARAM_F.DIST]]";"[[FHLP_F.DIST]]";"[[AHLP1_F.DIST]]";"[[AHLP2_F.DIST]]";"[[AHLP3_F.DIST]]";"[[AHLP4_F.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.F_Dist_DispId, Name = "Func_F_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult F_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom2,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function, a nonnegative number.</param>
		/// <param name="degFreedom1">Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		/// <param name="degFreedom2">Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		// [[FCN_F.DIST.RT]],F_Dist_RT,F.DIST.RT,LEGACY.FDIST;M;fgrpStatistical;3;N;N,N,N;1;?math;fnFDist14;CWXL;"[[PARAM_F.DIST.RT]]";"[[FHLP_F.DIST.RT]]";"[[AHLP1_F.DIST.RT]]";"[[AHLP2_F.DIST.RT]]";"[[AHLP3_F.DIST.RT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.F_Dist_RT_DispId, Name = "Func_F_Dist_RT")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult F_Dist_RT(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom2
		);

		/// <summary>
		/// Returns the inverse of the (left-tailed) F probability distribution: if p = F.DIST(x,...), then F.INV(p,...) = x.
		/// </summary>
		/// <param name="probability">Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.</param>
		/// <param name="degFreedom1">Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		/// <param name="degFreedom2">Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		// [[FCN_F.INV]],F_Inv,F.INV,FINV;M;fgrpStatistical;3;N;N,N,N;1;?math;fnFinvLt;CWXL;"[[PARAM_F.INV]]";"[[FHLP_F.INV]]";"[[AHLP1_F.INV]]";"[[AHLP2_F.INV]]";"[[AHLP3_F.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.F_Inv_DispId, Name = "Func_F_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult F_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom2
		);

		/// <summary>
		/// Returns the inverse of the (right-tailed) F probability distribution: if p = F.DIST.RT(x,...), then F.INV.RT(p,...) = x.
		/// </summary>
		/// <param name="probability">Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.</param>
		/// <param name="degFreedom1">Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		/// <param name="degFreedom2">Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.</param>
		// [[FCN_F.INV.RT]],F_Inv_RT,F.INV.RT,LEGACY.FINV;M;fgrpStatistical;3;N;N,N,N;1;?math;fnFinv14;CWXL;"[[PARAM_F.INV.RT]]";"[[FHLP_F.INV.RT]]";"[[AHLP1_F.INV.RT]]";"[[AHLP2_F.INV.RT]]";"[[AHLP3_F.INV.RT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.F_Inv_RT_DispId, Name = "Func_F_Inv_RT")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult F_Inv_RT(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @degFreedom2
		);

		/// <summary>
		/// Returns the hypergeometric distribution.
		/// </summary>
		/// <param name="sampleS">Is the number of successes in the sample.</param>
		/// <param name="numberSample">Is the size of the sample.</param>
		/// <param name="populationS">Is the number of successes in the population.</param>
		/// <param name="numberPop">Is the population size.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.</param>
		// [[FCN_HYPGEOM.DIST]],HypGeom_Dist,HYPGEOM.DIST,HYPGEOMDIST;M;fgrpStatistical;5;N;N,N,N,N,B;1;?math;fnHypDisPdfLtCdf;CWXL;"[[PARAM_HYPGEOM.DIST]]";"[[FHLP_HYPGEOM.DIST]]";"[[AHLP1_HYPGEOM.DIST]]";"[[AHLP2_HYPGEOM.DIST]]";"[[AHLP3_HYPGEOM.DIST]]";"[[AHLP4_HYPGEOM.DIST]]";"[[AHLP5_HYPGEOM.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.HypGeom_Dist_DispId, Name = "Func_HypGeom_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult HypGeom_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @sampleS,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberSample,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @populationS,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberPop,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the lognormal distribution of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.
		/// </summary>
		/// <param name="x">Is the value at which to evaluate the function, a positive number.</param>
		/// <param name="mean">Is the mean of ln(x).</param>
		/// <param name="standardDev">Is the standard deviation of ln(x), a positive number.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.</param>
		// [[FCN_LOGNORM.DIST]],LogNorm_Dist,LOGNORM.DIST,LOGNORMDIST;M;fgrpStatistical;4;N;N,N,N,B;1;?math;fnLogNormPdfLtCdf;CWXL;"[[PARAM_LOGNORM.DIST]]";"[[FHLP_LOGNORM.DIST]]";"[[AHLP1_LOGNORM.DIST]]";"[[AHLP2_LOGNORM.DIST]]";"[[AHLP3_LOGNORM.DIST]]";"[[AHLP4_LOGNORM.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.LogNorm_Dist_DispId, Name = "Func_LogNorm_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult LogNorm_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @mean,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @standardDev,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.
		/// </summary>
		/// <param name="probability">Is a probability associated with the lognormal distribution, a number between 0 and 1, inclusive.</param>
		/// <param name="mean">Is the mean of ln(x).</param>
		/// <param name="standardDev">Is the standard deviation of ln(x), a positive number.</param>
		// [[FCN_LOGNORM.INV]],LogNorm_Inv,LOGNORM.INV,LOGINV;M;fgrpStatistical;3;N;N,N,N;1;?math;fnLogInv14;CWXL;"[[PARAM_LOGNORM.INV]]";"[[FHLP_LOGNORM.INV]]";"[[AHLP1_LOGNORM.INV]]";"[[AHLP2_LOGNORM.INV]]";"[[AHLP3_LOGNORM.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.LogNorm_Inv_DispId, Name = "Func_LogNorm_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult LogNorm_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @mean,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @standardDev
		);

		/// <summary>
		/// Returns the negative binomial distribution, the probability that there will be Number_f failures before the Number_s-th success, with Probability_s probability of a success.
		/// </summary>
		/// <param name="numberF">Is the number of failures.</param>
		/// <param name="numberS">Is the threshold number of successes.</param>
		/// <param name="probabilityS">Is the probability of a success; a number between 0 and 1.</param>
		/// <param name="cumulative">Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.</param>
		// [[FCN_NEGBINOM.DIST]],NegBinom_Dist,NEGBINOM.DIST,COM.MICROSOFT.NEGBINOM.DIST;M;fgrpStatistical;4;N;N,N,N,B;1;?math;fnNegBinPdfLtCdf;CWXL;"[[PARAM_NEGBINOM.DIST]]";"[[FHLP_NEGBINOM.DIST]]";"[[AHLP1_NEGBINOM.DIST]]";"[[AHLP2_NEGBINOM.DIST]]";"[[AHLP3_NEGBINOM.DIST]]";"[[AHLP4_NEGBINOM.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.NegBinom_Dist_DispId, Name = "Func_NegBinom_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult NegBinom_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberF,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberS,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probabilityS,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the standard normal distribution (has a mean of zero and a standard deviation of one).
		/// </summary>
		/// <param name="z">Is the value for which you want the distribution.</param>
		/// <param name="cumulative">Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.</param>
		// [[FCN_NORM.S.DIST]],Norm_S_Dist,NORM.S.DIST,COM.MICROSOFT.NORM.S.DIST;M;fgrpStatistical;2;N;N,B;;?math;fnNormalsPdfLtCdf;CWXL;"[[PARAM_NORM.S.DIST]]";"[[FHLP_NORM.S.DIST]]";"[[AHLP1_NORM.S.DIST]]";"[[AHLP2_NORM.S.DIST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Norm_S_Dist_DispId, Name = "Func_Norm_S_Dist")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Norm_S_Dist(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @z,

			[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @cumulative
		);

		/// <summary>
		/// Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).
		/// </summary>
		/// <param name="probability">Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.</param>
		// [[FCN_NORM.S.INV]],Norm_S_Inv,NORM.S.INV,LEGACY.NORMSINV;M;fgrpStatistical;1;N;N;;?math;fnNrmSinv14;CWXL;"[[PARAM_NORM.S.INV]]";"[[FHLP_NORM.S.INV]]";"[[AHLP1_NORM.S.INV]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Norm_S_Inv_DispId, Name = "Func_Norm_S_Inv")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Norm_S_Inv(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probability
		);

		// SKIPPED due to: Function 'T_TEST' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the probability associated with a Student's t-Test.
		// /// </summary>
		// /// <param name="array1">Is the first data set.</param>
		// /// <param name="array2">Is the second data set.</param>
		// /// <param name="tails">Specifies the number of distribution tails to return: one-tailed distribution = 1; two-tailed distribution = 2.</param>
		// /// <param name="type">Is the kind of t-test: paired = 1, two-sample equal variance (homoscedastic) = 2, two-sample unequal variance = 3.</param>
		// [[FCN_T.TEST]],T_Test,T.TEST,COM.MICROSOFT.T.TEST;M;fgrpStatistical;4;N;M,M,N,N;85;?Range2:m;;CWX;"[[PARAM_T.TEST]]";"[[FHLP_T.TEST]]";"[[AHLP1_T.TEST]]";"[[AHLP2_T.TEST]]";"[[AHLP3_T.TEST]]";"[[AHLP4_T.TEST]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.T_Test_DispId, Name = "Func_T_Test")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult T_Test(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array1,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array2,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @tails,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @type
		// );

		/// <summary>
		/// Returns the one-tailed P-value of a z-test.
		/// </summary>
		/// <param name="array">Is the array or range of data against which to test X.</param>
		/// <param name="x">Is the value to test.</param>
		/// <param name="sigma">Is the population (known) standard deviation. If omitted, the sample standard deviation is used.</param>
		// &[[FCN_Z.TEST]],Z_Test,Z.TEST,ZTEST;M3;fgrpStatistical;2;N;NRM,N,N;;?fnAveDevSqZ14;74;CWX;"[[PARAM_Z.TEST]]";"[[FHLP_Z.TEST]]";"[[AHLP1_Z.TEST]]";"[[AHLP2_Z.TEST]]";"[[AHLP3_Z.TEST]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Z_Test_DispId, Name = "Func_Z_Test")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Z_Test(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @array,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @sigma
		);

		/// <summary>
		/// Returns the error function.
		/// </summary>
		/// <param name="X">Is the lower bound for integrating ERF.PRECISE.</param>
		// [[FCN_ERF.PRECISE]],Erf_Precise,ERF.PRECISE,COM.MICROSOFT.ERF.PRECISE;M;fgrpEngineering;1;NE;NXSEBR;;?fnErfPrecise;;CWX;"[[PARAM_ERF.PRECISE]]";"[[FHLP_ERF.PRECISE]]";"[[AHLP1_ERF.PRECISE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Erf_Precise_DispId, Name = "Func_Erf_Precise")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Erf_Precise(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @X
		);

		/// <summary>
		/// Returns the complementary error function.
		/// </summary>
		/// <param name="X">Is the lower bound for integrating ERFC.PRECISE.</param>
		// [[FCN_ERFC.PRECISE]],ErfC_Precise,ERFC.PRECISE,ERFC;M;fgrpEngineering;1;NE;NXSEBR;;?fnErfCPrecise;;CWX;"[[PARAM_ERFC.PRECISE]]";"[[FHLP_ERFC.PRECISE]]";"[[AHLP1_ERFC.PRECISE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ErfC_Precise_DispId, Name = "Func_ErfC_Precise")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ErfC_Precise(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @X
		);

		/// <summary>
		/// Returns the natural logarithm of the gamma function.
		/// </summary>
		/// <param name="x">Is the value for which you want to calculate GAMMALN.PRECISE, a positive number.</param>
		// [[FCN_GAMMALN.PRECISE]],GammaLn_Precise,GAMMALN.PRECISE,GAMMALN;M;fgrpStatistical;1;N;N;;?math;fnGammaLnPrecise;CWXL;"[[PARAM_GAMMALN.PRECISE]]";"[[FHLP_GAMMALN.PRECISE]]";"[[AHLP1_GAMMALN.PRECISE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.GammaLn_Precise_DispId, Name = "Func_GammaLn_Precise")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult GammaLn_Precise(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x
		);

		/// <summary>
		/// Rounds a number up, to the nearest integer or to the nearest multiple of significance.
		/// </summary>
		/// <param name="number">Is the value you want to round.</param>
		/// <param name="significance">Is the multiple to which you want to round.</param>
		// $[[FCN_CEILING.PRECISE]],Ceiling_Precise,CEILING.PRECISE,COM.MICROSOFT.CEILING.PRECISE;M;fgrpMathTrig;1;N;N,NX;128;?fnCeiling_Iso;;CWXL;"[[PARAM_CEILING.PRECISE]]";"[[FHLP_CEILING.PRECISE]]";"[[AHLP1_CEILING.PRECISE]]";"[[AHLP2_CEILING.PRECISE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ceiling_Precise_DispId, Name = "Func_Ceiling_Precise")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Ceiling_Precise(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @significance
		);

		/// <summary>
		/// Rounds a number down, to the nearest integer or to the nearest multiple of significance.
		/// </summary>
		/// <param name="number">Is the numeric value you want to round.</param>
		/// <param name="significance">Is the multiple to which you want to round.</param>
		// $[[FCN_FLOOR.PRECISE]],Floor_Precise,FLOOR.PRECISE,COM.MICROSOFT.FLOOR.PRECISE;;fgrpMathTrig;1;N;N,NX;128;?fnFloorPrecise;;CWXL;"[[PARAM_FLOOR.PRECISE]]";"[[FHLP_FLOOR.PRECISE]]";"[[AHLP1_FLOOR.PRECISE]]";"[[AHLP2_FLOOR.PRECISE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Floor_Precise_DispId, Name = "Func_Floor_Precise")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Floor_Precise(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @significance
		);

		/// <summary>
		/// Returns the arccotangent of a number, in radians in the range 0 to Pi.
		/// </summary>
		/// <param name="number">Is the cotangent of the angle you want.</param>
		// [[FCN_ACOT]],Acot,ACOT,;M;fgrpMathTrig;1;N;N;;?math;Acot;CWXL;"[[PARAM_ACOT]]";"[[FHLP_ACOT]]";"[[AHLP1_ACOT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Acot_DispId, Name = "Func_Acot")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Acot(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the inverse hyperbolic cotangent of a number.
		/// </summary>
		/// <param name="number">Is the hyperbolic cotangent of the angle that you want.</param>
		// [[FCN_ACOTH]],Acoth,ACOTH,;M;fgrpMathTrig;1;N;N;;?math;Acoth;CWXL;"[[PARAM_ACOTH]]";"[[FHLP_ACOTH]]";"[[AHLP1_ACOTH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Acoth_DispId, Name = "Func_Acoth")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Acoth(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the cotangent of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the cotangent.</param>
		// [[FCN_COT]],Cot,COT,;M;fgrpMathTrig;1;N;N;1;?fnMultInvTrig:m;;CWXL;"[[PARAM_COT]]";"[[FHLP_COT]]";"[[AHLP1_COT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Cot_DispId, Name = "Func_Cot")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Cot(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the hyperbolic cotangent of a number.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the hyperbolic cotangent.</param>
		// [[FCN_COTH]],Coth,COTH,;M;fgrpMathTrig;1;N;N;2;?fnMultInvTrig:m;;CWXL;"[[PARAM_COTH]]";"[[FHLP_COTH]]";"[[AHLP1_COTH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Coth_DispId, Name = "Func_Coth")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Coth(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the cosecant of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the cosecant.</param>
		// [[FCN_CSC]],Csc,CSC,;M;fgrpMathTrig;1;N;N;3;?fnMultInvTrig:m;;CWXL;"[[PARAM_CSC]]";"[[FHLP_CSC]]";"[[AHLP1_CSC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Csc_DispId, Name = "Func_Csc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Csc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the hyperbolic cosecant of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the hyperbolic cosecant.</param>
		// [[FCN_CSCH]],Csch,CSCH,;M;fgrpMathTrig;1;N;N;4;?fnMultInvTrig:m;;CWXL;"[[PARAM_CSCH]]";"[[FHLP_CSCH]]";"[[AHLP1_CSCH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Csch_DispId, Name = "Func_Csch")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Csch(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the secant of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the secant.</param>
		// [[FCN_SEC]],Sec,SEC,;M;fgrpMathTrig;1;N;N;5;?fnMultInvTrig:m;;CWXL;"[[PARAM_SEC]]";"[[FHLP_SEC]]";"[[AHLP1_SEC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sec_DispId, Name = "Func_Sec")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sec(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the hyperbolic secant of an angle.
		/// </summary>
		/// <param name="number">Is the angle in radians for which you want the hyperbolic secant.</param>
		// [[FCN_SECH]],Sech,SECH,;M;fgrpMathTrig;1;N;N;6;?fnMultInvTrig:m;;CWXL;"[[PARAM_SECH]]";"[[FHLP_SECH]]";"[[AHLP1_SECH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sech_DispId, Name = "Func_Sech")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sech(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the tangent of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the tangent.</param>
		// [[FCN_IMTAN]],ImTan,IMTAN,;M;fgrpEngineering;1;NE;NXSEBR;1;?fnCmplxTanCot;;CWXL;"[[PARAM_IMTAN]]";"[[FHLP_IMTAN]]";"[[AHLP1_IMTAN]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImTan_DispId, Name = "Func_ImTan")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImTan(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the cotangent of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the cotangent.</param>
		// [[FCN_IMCOT]],ImCot,IMCOT,;M;fgrpEngineering;1;NE;NXSEBR;2;?fnCmplxTanCot;;CWXL;"[[PARAM_IMCOT]]";"[[FHLP_IMCOT]]";"[[AHLP1_IMCOT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImCot_DispId, Name = "Func_ImCot")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImCot(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the cosecant of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the cosecant.</param>
		// [[FCN_IMCSC]],ImCsc,IMCSC,;M;fgrpEngineering;1;NE;NXSEBR;2;?fnCmplxSecCsc;;CWXL;"[[PARAM_IMCSC]]";"[[FHLP_IMCSC]]";"[[AHLP1_IMCSC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImCsc_DispId, Name = "Func_ImCsc")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImCsc(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the hyperbolic cosecant of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the hyperbolic cosecant.</param>
		// [[FCN_IMCSCH]],ImCsch,IMCSCH,;M;fgrpEngineering;1;NE;NXSEBR;2;?fnCmplxSechCsch;;CWXL;"[[PARAM_IMCSCH]]";"[[FHLP_IMCSCH]]";"[[AHLP1_IMCSCH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImCsch_DispId, Name = "Func_ImCsch")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImCsch(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the secant of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the secant.</param>
		// [[FCN_IMSEC]],ImSec,IMSEC,;M;fgrpEngineering;1;NE;NXSEBR;1;?fnCmplxSecCsc;;CWXL;"[[PARAM_IMSEC]]";"[[FHLP_IMSEC]]";"[[AHLP1_IMSEC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImSec_DispId, Name = "Func_ImSec")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImSec(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the hyperbolic secant of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the hyperbolic secant.</param>
		// [[FCN_IMSECH]],ImSech,IMSECH,;M;fgrpEngineering;1;NE;NXSEBR;1;?fnCmplxSechCsch;;CWXL;"[[PARAM_IMSECH]]";"[[FHLP_IMSECH]]";"[[AHLP1_IMSECH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImSech_DispId, Name = "Func_ImSech")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImSech(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns a bitwise 'And' of two numbers.
		/// </summary>
		/// <param name="number1">Is the decimal representation of the binary number you want to evaluate.</param>
		/// <param name="number2">Is the decimal representation of the binary number you want to evaluate.</param>
		// [[FCN_BITAND]],Bitand,BITAND,;M;fgrpEngineering;2;N;N,N;1;?fnBitOperation:m;;CWXL;"[[PARAM_BITAND]]";"[[FHLP_BITAND]]";"[[AHLP1_BITAND]]";"[[AHLP2_BITAND]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bitand_DispId, Name = "Func_Bitand")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bitand(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number2
		);

		/// <summary>
		/// Returns a bitwise 'Or' of two numbers.
		/// </summary>
		/// <param name="number1">Is the decimal representation of the binary number you want to evaluate.</param>
		/// <param name="number2">Is the decimal representation of the binary number you want to evaluate.</param>
		// [[FCN_BITOR]],Bitor,BITOR,;M;fgrpEngineering;2;N;N,N;2;?fnBitOperation:m;;CWXL;"[[PARAM_BITOR]]";"[[FHLP_BITOR]]";"[[AHLP1_BITOR]]";"[[AHLP2_BITOR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bitor_DispId, Name = "Func_Bitor")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bitor(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number2
		);

		/// <summary>
		/// Returns a bitwise 'Exclusive Or' of two numbers.
		/// </summary>
		/// <param name="number1">Is the decimal representation of the binary number you want to evaluate.</param>
		/// <param name="number2">Is the decimal representation of the binary number you want to evaluate.</param>
		// [[FCN_BITXOR]],Bitxor,BITXOR,;M;fgrpEngineering;2;N;N,N;3;?fnBitOperation:m;;CWXL;"[[PARAM_BITXOR]]";"[[FHLP_BITXOR]]";"[[AHLP1_BITXOR]]";"[[AHLP2_BITOR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bitxor_DispId, Name = "Func_Bitxor")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bitxor(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number1,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number2
		);

		/// <summary>
		/// Returns a number shifted left by shift_amount bits.
		/// </summary>
		/// <param name="number">Is the decimal representation of the binary number you want to evaluate.</param>
		/// <param name="shiftAmount">Is the number of bits that you want to shift Number left by.</param>
		// [[FCN_BITLSHIFT]],Bitlshift,BITLSHIFT,;M;fgrpEngineering;2;N;N,N;1;?fnBitShift:m;;CWXL;"[[PARAM_BITLSHIFT]]";"[[FHLP_BITLSHIFT]]";"[[AHLP1_BITLSHIFT]]";"[[AHLP2_BITLSHIFT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bitlshift_DispId, Name = "Func_Bitlshift")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bitlshift(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @shiftAmount
		);

		/// <summary>
		/// Returns a number shifted right by shift_amount bits.
		/// </summary>
		/// <param name="number">Is the decimal representation of the binary number you want to evaluate.</param>
		/// <param name="shiftAmount">Is the number of bits that you want to shift Number right by.</param>
		// [[FCN_BITRSHIFT]],Bitrshift,BITRSHIFT,;M;fgrpEngineering;2;N;N,N;2;?fnBitShift:m;;CWXL;"[[PARAM_BITRSHIFT]]";"[[FHLP_BITRSHIFT]]";"[[AHLP1_BITRSHIFT]]";"[[AHLP2_BITRSHIFT]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Bitrshift_DispId, Name = "Func_Bitrshift")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Bitrshift(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @shiftAmount
		);

		/// <summary>
		/// Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.
		/// </summary>
		/// <param name="number">Is the total number of objects.</param>
		/// <param name="numberChosen">Is the number of objects in each permutation.</param>
		// [[FCN_PERMUTATIONA]],Permutationa,PERMUTATIONA,;M;fgrpStatistical;2;N;N,N;128;?math;fnPermutationa;CWX;"[[PARAM_PERMUTATIONA]]";"[[FHLP_PERMUTATIONA]]";"[[AHLP1_PERMUTATIONA]]";"[[AHLP2_PERMUTATIONA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Permutationa_DispId, Name = "Func_Permutationa")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Permutationa(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberChosen
		);

		/// <summary>
		/// Returns the number of combinations with repetitions for a given number of items.
		/// </summary>
		/// <param name="number">Is the total number of items.</param>
		/// <param name="numberChosen">Is the number of items in each combination.</param>
		// [[FCN_COMBINA]],Combina,COMBINA,;M;fgrpMathTrig;2;N;N,N;128;?math;fnCombina;CWX;"[[PARAM_COMBINA]]";"[[FHLP_COMBINA]]";"[[AHLP1_COMBINA]]";"[[AHLP2_COMBINA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Combina_DispId, Name = "Func_Combina")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Combina(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberChosen
		);

		/// <summary>
		/// Returns a logical 'Exclusive Or' of all arguments.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 254 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.</param>
		// [[FCN_XOR]],Xor,XOR,;M3;fgrpLogical;1;B;BRM,...;;?fnXor;;CWXL;"[[PARAM_XOR]]";"[[FHLP_XOR]]";"[[AHLP1_XOR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Xor_DispId, Name = "Func_Xor")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult Xor(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns the number of periods required by an investment to reach a specified value.
		/// </summary>
		/// <param name="rate">Is the interest rate per period.</param>
		/// <param name="pv">Is the present value of the investment.</param>
		/// <param name="fv">Is the desired future value of the investment.</param>
		// [[FCN_PDURATION]],PDuration,PDURATION,;M;fgrpFinancial;3;N;N,N,N;;?math;fnPDuration;CWXL;"[[PARAM_PDURATION]]";"[[FHLP_PDURATION]]";"[[AHLP1_PDURATION]]";"[[AHLP2_PDURATION]]";"[[AHLP3_PDURATION]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.PDuration_DispId, Name = "Func_PDuration")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult PDuration(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @rate,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @fv
		);

		/// <summary>
		/// Converts a number into a text representation with the given radix (base).
		/// </summary>
		/// <param name="number">Is the number that you want to convert.</param>
		/// <param name="radix">Is the base Radix that you want to convert the number into.</param>
		/// <param name="minLength">Is the minimum length of the returned string.  If omitted leading zeros are not added.</param>
		// [[FCN_BASE]],Base,BASE,;M;fgrpMathTrig;2;S;N,N,NX;;?fnBase:m;;CWXL;"[[PARAM_BASE]]";"[[FHLP_BASE]]";"[[AHLP1_BASE]]";"[[AHLP2_BASE]]";"[[AHLP3_BASE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Base_DispId, Name = "Func_Base")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Base(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @radix,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @minLength
		);

		/// <summary>
		/// Converts a text representation of a number in a given base into a decimal number.
		/// </summary>
		/// <param name="number">Is the number that you want to convert.</param>
		/// <param name="radix">Is the base Radix of the number you are converting.</param>
		// [[FCN_DECIMAL]],Decimal,DECIMAL,;M;fgrpMathTrig;2;N;S,N;;?fnDecimal:m;;CWXL;"[[PARAM_DECIMAL]]";"[[FHLP_DECIMAL]]";"[[AHLP1_DECIMAL]]";"[[AHLP2_DECIMAL]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Decimal_DispId, Name = "Func_Decimal")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Decimal(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @radix
		);

		/// <summary>
		/// Returns the number of days between the two dates.
		/// </summary>
		/// <param name="endDate">startDate and endDate are the two dates between which you want to know the number of days.</param>
		/// <param name="startDate">startDate and endDate are the two dates between which you want to know the number of days.</param>
		// `[[FCN_DAYS]],Days,DAYS,;ML;fgrpDateTime;2;N;SN,SN;131;?convert:m;;CWXL;"[[PARAM_DAYS]]";"[[FHLP_DAYS]]";"[[AHLP1_DAYS]]";"[[AHLP2_DAYS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Days_DispId, Name = "Func_Days")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Days(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @endDate,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @startDate
		);

		/// <summary>
		/// Returns the probability of a trial result using a binomial distribution.
		/// </summary>
		/// <param name="trials">Is the number of independent trials.</param>
		/// <param name="probabilityS">Is the probability of success on each trial.</param>
		/// <param name="numberS">Is the number of successes in trials.</param>
		/// <param name="numberS2">If provided this function returns the probability that the number of successful trials shall lie between numberS and numberS2.</param>
		// [[FCN_BINOM.DIST.RANGE]],Binom_Dist_Range,BINOM.DIST.RANGE,;M;fgrpStatistical;3;N;N,N,N,NX;;?math;fnBinomDistRange;CWXL;"[[PARAM_BINOM.DIST.RANGE]]";"[[FHLP_BINOM.DIST.RANGE]]";"[[AHLP1_BINOM.DIST.RANGE]]";"[[AHLP2_BINOM.DIST.RANGE]]";"[[AHLP3_BINOM.DIST.RANGE]]";"[[AHLP4_BINOM.DIST.RANGE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Binom_Dist_Range_DispId, Name = "Func_Binom_Dist_Range")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Binom_Dist_Range(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @trials,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @probabilityS,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @numberS,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @numberS2
		);

		/// <summary>
		/// Returns the Gamma function value.
		/// </summary>
		/// <param name="x">Is the value for which you want to calculate Gamma.</param>
		// [[FCN_GAMMA]],Gamma,GAMMA,;M;fgrpStatistical;1;N;N;;?math;fnGammaFunc;CWXL;"[[PARAM_GAMMA]]";"[[FHLP_GAMMA]]";"[[AHLP1_GAMMA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Gamma_DispId, Name = "Func_Gamma")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Gamma(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x
		);

		/// <summary>
		/// Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.
		/// </summary>
		/// <param name="values">List of parameters, whose elements are 1 to 254 numbers or names, arrays, or references that contain numbers for which you want the population skewness.</param>
		// [[FCN_SKEW.P]],Skew_p,SKEW.P,SKEWP;M3;fgrpStatistical;1;N;NRM,...;PfnFinStat,InitCVal;?rangef;150;CWXL;"[[PARAM_SKEW.P]]";"[[FHLP_SKEW.P]]";"[[AHLP1_SKEW.P]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Skew_p_DispId, Name = "Func_Skew_p")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Skew_p(

			[KnownType(typeof(RangeReference))][TypeScriptType("Array<number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		);

		/// <summary>
		/// Returns 0.5 less than the standard normal cumulative distribution.
		/// </summary>
		/// <param name="x">Is the value for which you want the distribution.</param>
		// [[FCN_GAUSS]],Gauss,GAUSS,;M;fgrpStatistical;1;N;N;;?math;fnGauss;CWXL;"[[PARAM_GAUSS]]";"[[FHLP_GAUSS]]";"[[AHLP1_GAUSS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Gauss_DispId, Name = "Func_Gauss")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Gauss(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x
		);

		/// <summary>
		/// Returns the value of the density function for a standard normal distribution.
		/// </summary>
		/// <param name="x">Is the number for which you want the density of the standard normal distribution.</param>
		// [[FCN_PHI]],Phi,PHI,;M;fgrpStatistical;1;N;N;;?math;fnPhi;CWXL;"[[PARAM_PHI]]";"[[FHLP_PHI]]";"[[AHLP1_PHI]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Phi_DispId, Name = "Func_Phi")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Phi(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x
		);

		/// <summary>
		/// Returns an equivalent interest rate for the growth of an investment.
		/// </summary>
		/// <param name="nper">Is the number of periods for the investment.</param>
		/// <param name="pv">Is the present value of the investment.</param>
		/// <param name="fv">Is the future value of the investment.</param>
		// [[FCN_RRI]],Rri,RRI,;M;fgrpFinancial;3;N;N,N,N;;?math;fnRRI;CWXL;"[[PARAM_RRI]]";"[[FHLP_RRI]]";"[[AHLP1_RRI]]";"[[AHLP2_RRI]]";"[[AHLP3_RRI]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Rri_DispId, Name = "Func_Rri")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Rri(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @nper,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @pv,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @fv
		);

		/// <summary>
		/// Returns the Unicode character referenced by the given numeric value.
		/// </summary>
		/// <param name="number">Is the Unicode number representing a character.</param>
		// [[FCN_UNICHAR]],Unichar,UNICHAR,;M;fgrpText;1;S;N;;?fnUnichar:m;;CWXL;"[[PARAM_UNICHAR]]";"[[FHLP_UNICHAR]]";"[[AHLP1_UNICHAR]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Unichar_DispId, Name = "Func_Unichar")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<string>")]
		FunctionResult Unichar(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number
		);

		/// <summary>
		/// Returns the number (code point) corresponding to the first character of the text.
		/// </summary>
		/// <param name="text">Is the character that you want the Unicode value of.</param>
		// [[FCN_UNICODE]],Unicode,UNICODE,;M;fgrpText;1;N;S;;?fnUnicode:m;;CWXL;"[[PARAM_UNICODE]]";"[[FHLP_UNICODE]]";"[[AHLP1_UNICODE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Unicode_DispId, Name = "Func_Unicode")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Unicode(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		// SKIPPED due to: Return type is exclusively a MULTI type. See TODO OfficeMain: 2604254: [ExcelApi] Functions - add support for arrays of args, if relevant
		// /// <summary>
		// /// Returns the unit matrix for the specified dimension.
		// /// </summary>
		// /// <param name="dimension">Is an integer specifying the dimension of the unit matrix that you want to return.</param>
		// [[FCN_MUNIT]],Munit,MUNIT,;M;fgrpMathTrig;1;M;N;5;?fnMunit;;CWXL;"[[PARAM_MUNIT]]";"[[FHLP_MUNIT]]";"[[AHLP1_MUNIT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Munit_DispId, Name = "Func_Munit")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<>")]
		// FunctionResult Munit(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @dimension
		// );

		/// <summary>
		/// Converts a Roman numeral to Arabic.
		/// </summary>
		/// <param name="text">Is the Roman numeral you want to convert.</param>
		// [[FCN_ARABIC]],Arabic,ARABIC,;M;fgrpMathTrig;1;N;S;;?fnArabic:m;;CWXL;"[[PARAM_ARABIC]]";"[[FHLP_ARABIC]]";"[[AHLP1_ARABIC]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Arabic_DispId, Name = "Func_Arabic")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Arabic(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		);

		/// <summary>
		/// Returns the ISO week number in the year for a given date.
		/// </summary>
		/// <param name="date">Is the date-time code used by Microsoft Excel for date and time calculation.</param>
		// [[FCN_ISOWEEKNUM]],IsoWeekNum,ISOWEEKNUM,;M;fgrpDateTime;1;N;N;2;?fnWeekNum;;CWXL;"[[PARAM_ISOWEEKNUM]]";"[[FHLP_ISOWEEKNUM]]";"[[AHLP1_ISOWEEKNUM]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsoWeekNum_DispId, Name = "Func_IsoWeekNum")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult IsoWeekNum(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @date
		);

		/// <summary>
		/// Converts text to number in a locale-independent manner.
		/// </summary>
		/// <param name="text">Is the string representing the number you want to convert.</param>
		/// <param name="decimalSeparator">Is the character used as the decimal separator in the string.</param>
		/// <param name="groupSeparator">Is the character used as the group separator in the string.</param>
		// [[FCN_NUMBERVALUE]],NumberValue,NUMBERVALUE,;M;fgrpText;1;N;S,SX,SX;;?fnNumberValue:m;;CWXL;"[[PARAM_NUMBERVALUE]]";"[[FHLP_NUMBERVALUE]]";"[[AHLP1_NUMBERVALUE]]";"[[AHLP2_NUMBERVALUE]]";"[[AHLP3_NUMBERVALUE]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.NumberValue_DispId, Name = "Func_NumberValue")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult NumberValue(

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @decimalSeparator,

			[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @groupSeparator
		);

		/// <summary>
		/// Returns the sheet number of the referenced sheet.
		/// </summary>
		/// <param name="value">Is the name of a sheet or a reference that you want the sheet number of.  If omitted the number of the sheet containing the function is returned.</param>
		// -[[FCN_SHEET]],Sheet,SHEET,;3M;fgrpInfo;0;N;RSM;;?fnSheet:m;;CWXL;"[[PARAM_SHEET]]";"[[FHLP_SHEET]]";"[[AHLP1_SHEET]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sheet_DispId, Name = "Func_Sheet")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sheet(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|string|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @value
		);

		/// <summary>
		/// Returns the number of sheets in a reference.
		/// </summary>
		/// <param name="reference">Is a reference for which you want to know the number of sheets it contains.  If omitted the number of sheets in the workbook containing the function is returned.</param>
		// -[[FCN_SHEETS]],Sheets,SHEETS,;3M;fgrpInfo;0;N;RM;;?fnSheets:m;;CWXL;"[[PARAM_SHEETS]]";"[[FHLP_SHEETS]]";"[[AHLP1_SHEETS]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Sheets_DispId, Name = "Func_Sheets")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Sheets(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @reference
		);

		// SKIPPED due to: Function 'FORMULATEXT' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns a formula as a string.
		// /// </summary>
		// /// <param name="reference">Is a reference to a formula.</param>
		// -[[FCN_FORMULATEXT]],,FORMULATEXT,FORMULA;;fgrpLookup;1;S;R;1;?fnFormula;;CWXL;"[[PARAM_FORMULATEXT]]";"[[FHLP_FORMULATEXT]]";"[[AHLP1_FORMULATEXT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Formulatext_DispId, Name = "Func_Formulatext")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult Formulatext(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reference
		// );

		/// <summary>
		/// Checks whether a reference is to a cell containing a formula, and returns TRUE or FALSE.
		/// </summary>
		/// <param name="reference">Is a reference to the cell you want to test.  Reference can be a cell reference, a formula, or name that refers to a cell.</param>
		// [[FCN_ISFORMULA]],IsFormula,ISFORMULA,;M;fgrpInfo;1;B;R;2;?fnFormula;;CWXL;"[[PARAM_ISFORMULA]]";"[[FHLP_ISFORMULA]]";"[[AHLP1_ISFORMULA]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.IsFormula_DispId, Name = "Func_IsFormula")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<boolean>")]
		FunctionResult IsFormula(

			[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @reference
		);

		// SKIPPED due to: Function 'IFNA' excluded.  See reason in FunctionsCommon.tt.
		// /// <summary>
		// /// Returns the value you specify if the expression resolves to #N/A, otherwise returns the result of the expression.
		// /// </summary>
		// /// <param name="value">Is any value or expression or reference.</param>
		// /// <param name="valueIfNa">Is any value or expression or reference.</param>
		// [[FCN_IFNA]],IfNa,IFNA,;M;fgrpLogical;2;MNSBE;MNSBE,MRNSBGE;0;fnIfError;2;CWXL;"[[PARAM_IFNA]]";"[[FHLP_IFNA]]";"[[AHLP1_IFNA]]";"[[AHLP2_IFNA]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.IfNa_DispId, Name = "Func_IfNa")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult IfNa(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @value,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @valueIfNa
		// );

		/// <summary>
		/// Rounds a number up, to the nearest integer or to the nearest multiple of significance.
		/// </summary>
		/// <param name="number">Is the value you want to round.</param>
		/// <param name="significance">Is the multiple to which you want to round.</param>
		/// <param name="mode">When given and nonzero this function will round away from zero.</param>
		// [[FCN_CEILING.MATH]],Ceiling_Math,CEILING.MATH,CEILING;M;fgrpMathTrig;1;N;N,NX,NX;;?fnCeilingMath;;CWXL;"[[PARAM_CEILING.MATH]]";"[[FHLP_CEILING.MATH]]";"[[AHLP1_CEILING.MATH]]";"[[AHLP2_CEILING.MATH]]";"[[AHLP3_CEILING.MATH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ceiling_Math_DispId, Name = "Func_Ceiling_Math")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Ceiling_Math(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @significance,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @mode
		);

		/// <summary>
		/// Rounds a number down, to the nearest integer or to the nearest multiple of significance.
		/// </summary>
		/// <param name="number">Is the value you want to round.</param>
		/// <param name="significance">Is the multiple to which you want to round.</param>
		/// <param name="mode">When given and nonzero this function will round towards zero.</param>
		// [[FCN_FLOOR.MATH]],Floor_Math,FLOOR.MATH,FLOOR;M;fgrpMathTrig;1;N;N,NX,NX;;?fnFloorMath;;CWXL;"[[PARAM_FLOOR.MATH]]";"[[FHLP_FLOOR.MATH]]";"[[AHLP1_FLOOR.MATH]]";"[[AHLP2_FLOOR.MATH]]";"[[AHLP3_FLOOR.MATH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.Floor_Math_DispId, Name = "Func_Floor_Math")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult Floor_Math(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @number,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @significance,

			[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @mode
		);

		/// <summary>
		/// Returns the hyperbolic sine of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the hyperbolic sine.</param>
		// [[FCN_IMSINH]],ImSinh,IMSINH,;M;fgrpEngineering;1;NE;NXSEBR;1;?fnCmplxSinhCosh;;CWXL;"[[PARAM_IMSINH]]";"[[FHLP_IMSINH]]";"[[AHLP1_IMSINH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImSinh_DispId, Name = "Func_ImSinh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImSinh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		/// <summary>
		/// Returns the hyperbolic cosine of a complex number.
		/// </summary>
		/// <param name="inumber">Is a complex number for which you want the hyperbolic cosine.</param>
		// [[FCN_IMCOSH]],ImCosh,IMCOSH,;M;fgrpEngineering;1;NE;NXSEBR;2;?fnCmplxSinhCosh;;CWXL;"[[PARAM_IMCOSH]]";"[[FHLP_IMCOSH]]";"[[AHLP1_IMCOSH]]"
		[ApiSet(Version = 1.2)]
		[ClientCallableComMember(DispatchId = FunctionsDispatchIds.ImCosh_DispId, Name = "Func_ImCosh")]
		[ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		[return: TypeScriptType("FunctionResult<number>")]
		FunctionResult ImCosh(

			[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @inumber
		);

		// SKIPPED due to: Function 'FILTERXML' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns specific data from the XML content by using the specified XPath.
		// /// </summary>
		// /// <param name="xml">Is a string in valid XML format.</param>
		// /// <param name="xpath">Is a string in standard XPath format.</param>
		// [[FCN_FILTERXML]],FilterXML,FILTERXML,COM.MICROSOFT.FILTERXML;ML;fgrpWeb;2;NSBEM;S,S;;?fnFilterXML;;CWXL;"[[PARAM_FILTERXML]]";"[[FHLP_FILTERXML]]";"[[AHLP1_FILTERXML]]";"[[AHLP2_FILTERXML]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.FilterXML_DispId, Name = "Func_FilterXML")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult FilterXML(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @xml,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @xpath
		// );

		// SKIPPED due to: Function 'WEBSERVICE' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns data from a web service.
		// /// </summary>
		// /// <param name="url">Is the URL of the web service.</param>
		// [[FCN_WEBSERVICE]],WebService,WEBSERVICE,COM.MICROSOFT.WEBSERVICE;ML;fgrpWeb;1;SE;S;;?fnWebService;;CWXL;"[[PARAM_WEBSERVICE]]";"[[FHLP_WEBSERVICE]]";"[[AHLP1_WEBSERVICE]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.WebService_DispId, Name = "Func_WebService")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult WebService(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @url
		// );

		// SKIPPED due to: Function 'ENCODEURL' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns a URL-encoded string.
		// /// </summary>
		// /// <param name="text">Is a string to be URL encoded.</param>
		// [[FCN_ENCODEURL]],EncodeURL,ENCODEURL,COM.MICROSOFT.ENCODEURL;ML;fgrpWeb;1;SE;S;;?fnEncodeURL;;CWXL;"[[PARAM_ENCODEURL]]";"[[FHLP_ENCODEURL]]";"[[AHLP1_ENCODEURL]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.EncodeURL_DispId, Name = "Func_EncodeURL")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult EncodeURL(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @text
		// );

		// SKIPPED due to: Function 'FORECAST_ETS' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns the forecasted value for a specific future target date using exponential smoothing method.
		// /// </summary>
		// /// <param name="targetDate">Is the data point for which Microsoft Excel predicts a value. It should carry on the pattern of values in the timeline.</param>
		// /// <param name="values">Is the array or range of numeric data you�re predicting.</param>
		// /// <param name="timeline">Is the independent array or range of numeric data. The dates in the timeline must have a consistent step between them and can�t be zero.</param>
		// /// <param name="seasonality">Is an optional numeric value that indicates the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.</param>
		// /// <param name="dataCompletion">Is an optional value for handling missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.</param>
		// /// <param name="aggregation">Is an optional numeric value for aggregating multiple values with the same time stamp. If blank, Microsoft Excel averages the values.</param>
		// [[FCN_FORECAST.ETS]],Forecast_ETS,FORECAST.ETS,;;fgrpStatistical;3;N;N,RM,RM,NX,NX,NX;1;?fnForecast_ETS;;CWX;"[[PARAM_FORECAST.ETS]]";"[[FHLP_FORECAST.ETS]]";"[[AHLP1_FORECAST.ETS]]";"[[AHLP2_FORECAST.ETS]]";"[[AHLP3_FORECAST.ETS]]";"[[AHLP4_FORECAST.ETS]]";"[[AHLP5_FORECAST.ETS]]";"[[AHLP6_FORECAST.ETS]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Forecast_ETS_DispId, Name = "Func_Forecast_ETS")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Forecast_ETS(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @targetDate,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @timeline,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @seasonality,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @dataCompletion,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @aggregation
		// );

		// SKIPPED due to: Function 'FORECAST_ETS_CONFINT' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns a confidence interval for the forecast value at the specified target date.
		// /// </summary>
		// /// <param name="targetDate">Is the data point for which Microsoft Excel predicts a value. It should carry on the pattern of values in the timeline.</param>
		// /// <param name="values">Is the array or range of numeric data you�re predicting.</param>
		// /// <param name="timeline">Is the independent array or range of numeric data. The dates in the timeline must have a consistent step between them and can�t be zero.</param>
		// /// <param name="confidenceLevel">Is a number between 0 and 1 that shows the confidence level for the calculated confidence interval. The default value is .95.</param>
		// /// <param name="seasonality">Is an optional numeric value that indicates the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.</param>
		// /// <param name="dataCompletion">Is an optional value for handling missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.</param>
		// /// <param name="aggregation">Is an optional numeric value for aggregating multiple values with the same time stamp. If blank, Microsoft Excel averages the values.</param>
		// [[FCN_FORECAST.ETS.CONFINT]],Forecast_ETS_ConfInt,FORECAST.ETS.CONFINT,;;fgrpStatistical;3;N;N,RM,RM,NX,NX,NX,NX;2;?fnForecast_ETS;;CWX;"[[PARAM_FORECAST.ETS.CONFINT]]";"[[FHLP_FORECAST.ETS.CONFINT]]";"[[AHLP1_FORECAST.ETS.CONFINT]]";"[[AHLP2_FORECAST.ETS.CONFINT]]";"[[AHLP3_FORECAST.ETS.CONFINT]]";"[[AHLP4_FORECAST.ETS.CONFINT]]";"[[AHLP5_FORECAST.ETS.CONFINT]]";"[[AHLP6_FORECAST.ETS.CONFINT]]";"[[AHLP7_FORECAST.ETS.CONFINT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Forecast_ETS_ConfInt_DispId, Name = "Func_Forecast_ETS_ConfInt")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Forecast_ETS_ConfInt(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @targetDate,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @timeline,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @confidenceLevel,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @seasonality,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @dataCompletion,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @aggregation
		// );

		// SKIPPED due to: Function 'FORECAST_ETS_SEASONALITY' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns the length of the repetitive pattern Microsoft Excel detects for the specified time series.
		// /// </summary>
		// /// <param name="values">Is the array or range of numeric data you�re predicting.</param>
		// /// <param name="timeline">Is the independent array or range of numeric data. The dates in the timeline must have a consistent step between them and can�t be zero.</param>
		// /// <param name="dataCompletion">Is an optional value for handling missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.</param>
		// /// <param name="aggregation">Is an optional numeric value for aggregating multiple values with the same time stamp. If blank, Microsoft Excel averages the values.</param>
		// &[[FCN_FORECAST.ETS.SEASONALITY]],Forecast_ETS_Seasonality,FORECAST.ETS.SEASONALITY,;;fgrpStatistical;2;N;RM,RM,NX,NX;3;?fnForecast_ETS;;CWX;"[[PARAM_FORECAST.ETS.SEASONALITY]]";"[[FHLP_FORECAST.ETS.SEASONALITY]]";"[[AHLP1_FORECAST.ETS.SEASONALITY]]";"[[AHLP2_FORECAST.ETS.SEASONALITY]]";"[[AHLP3_FORECAST.ETS.SEASONALITY]]";"[[AHLP4_FORECAST.ETS.SEASONALITY]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Forecast_ETS_Seasonality_DispId, Name = "Func_Forecast_ETS_Seasonality")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Forecast_ETS_Seasonality(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @timeline,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @dataCompletion,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @aggregation
		// );

		// SKIPPED due to: Function 'FORECAST_LINEAR' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Calculates, or predicts, a future value along a linear trend by using existing values.
		// /// </summary>
		// /// <param name="x">Is the data point for which you want to predict a value and must be a numeric value.</param>
		// /// <param name="knownYs">Is the dependent array or range of numeric data.</param>
		// /// <param name="knownXs">Is the independent array or range of numeric data. The variance of Known_x's must not be zero.</param>
		// [[FCN_FORECAST.LINEAR]],Forecast_Linear,FORECAST.LINEAR,;M;fgrpStatistical;3;N;N,M,M;72;?Range2:m;;CWX;"[[PARAM_FORECAST.LINEAR]]";"[[FHLP_FORECAST.LINEAR]]";"[[AHLP1_FORECAST.LINEAR]]";"[[AHLP2_FORECAST.LINEAR]]";"[[AHLP3_FORECAST.LINEAR]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Forecast_Linear_DispId, Name = "Func_Forecast_Linear")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Forecast_Linear(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @x,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownYs,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @knownXs
		// );

		// SKIPPED due to: Function 'FORECAST_ETS_STAT' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns the requested statistic for the forecast.
		// /// </summary>
		// /// <param name="values">Is the array or range of numeric data you�re predicting.</param>
		// /// <param name="timeline">Is the independent array or range of numeric data. The dates in the timeline must have a consistent step between them and can�t be zero.</param>
		// /// <param name="statisticType">Is a number between 1 and 8, indicating which statistic Microsoft Excel will return for the calculated forecast.</param>
		// /// <param name="seasonality">Is an optional numeric value that indicates the length of the seasonal pattern. The default value of 1 indicates seasonality is detected automatically.</param>
		// /// <param name="dataCompletion">Is an optional value for handling missing values. The default value of 1 replaces missing values by interpolation, and 0 replaces them with zeros.</param>
		// /// <param name="aggregation">Is an optional numeric value for aggregating multiple values with the same time stamp. If blank, Microsoft Excel averages the values.</param>
		// [[FCN_FORECAST.ETS.STAT]],Forecast_ETS_STAT,FORECAST.ETS.STAT,;;fgrpStatistical;3;N;RM,RM,N,NX,NX,NX;4;?fnForecast_ETS;;CWX;"[[PARAM_FORECAST.ETS.STAT]]";"[[FHLP_FORECAST.ETS.STAT]]";"[[AHLP1_FORECAST.ETS.STAT]]";"[[AHLP2_FORECAST.ETS.STAT]]";"[[AHLP3_FORECAST.ETS.STAT]]";"[[AHLP4_FORECAST.ETS.STAT]]";"[[AHLP5_FORECAST.ETS.STAT]]";"[[AHLP6_FORECAST.ETS.STAT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Forecast_ETS_STAT_DispId, Name = "Func_Forecast_ETS_STAT")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult Forecast_ETS_STAT(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @values,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @timeline,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @statisticType,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @seasonality,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @dataCompletion,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")][Optional] object @aggregation
		// );

		// SKIPPED due to: Function 'MAXIFS' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns the maximum value among cells specified by a given set of conditions or criteria.
		// /// </summary>
		// /// <param name="maxRange">The cells in which to determine the maximum value.</param>
		// /// <param name="values">List of parameters, where the first element of each pair is the Is the range of cells you want to evaluate for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be included when determining the maximum value.</param>
		// [[FCN_MAXIFS]],MaxIfs,MAXIFS,COM.MICROSOFT.MAXIFS;ML;fgrpStatistical;3;N;R,R,NSBE,...,...;;?IfRangefs;3;CWX;"[[PARAM_MAXIFS]]";"[[FHLP_MAXIFS]]";"[[AHLP1_MAXIFS]]";"[[AHLP2_MAXIFS]]";"[[AHLP3_MAXIFS]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.MaxIfs_DispId, Name = "Func_MaxIfs")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult MaxIfs(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @maxRange,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>|number|string|boolean>")] params object[] @values
		// );

		// SKIPPED due to: Function 'MINIFS' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Returns the minimum value among cells specified by a given set of conditions or criteria.
		// /// </summary>
		// /// <param name="minRange">The cells in which to determine the minimum value.</param>
		// /// <param name="values">List of parameters, where the first element of each pair is the Is the range of cells you want to evaluate for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be included when determining the minimum value.</param>
		// [[FCN_MINIFS]],MinIfs,MINIFS,COM.MICROSOFT.MINIFS;ML;fgrpStatistical;3;N;R,R,NSBE,...,...;;?IfRangefs;4;CWX;"[[PARAM_MINIFS]]";"[[FHLP_MINIFS]]";"[[AHLP1_MINIFS]]";"[[AHLP2_MINIFS]]";"[[AHLP3_MINIFS]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.MinIfs_DispId, Name = "Func_MinIfs")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number>")]
		// FunctionResult MinIfs(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @minRange,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>|number|string|boolean>")] params object[] @values
		// );

		// SKIPPED due to: Function 'TEXTJOIN' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Concatenates a list or range of text strings using a delimiter.
		// /// </summary>
		// /// <param name="delimiter">Character or string to insert between each text item.</param>
		// /// <param name="ignoreEmpty">If TRUE(default), ignores empty cells.</param>
		// /// <param name="values">List of parameters, whose elements are 1 to 252 text strings or ranges to be joined.</param>
		// `[[FCN_TEXTJOIN]],TextJoin,TEXTJOIN,COM.MICROSOFT.TEXTJOIN;ML3;fgrpText;3;S;SXRM,BX,SXRM,...;;?fnConcatenate;1;CWXL;"[[PARAM_TEXTJOIN]]";"[[FHLP_TEXTJOIN]]";"[[AHLP1_TEXTJOIN]]";"[[AHLP2_TEXTJOIN]]";"[[AHLP3_TEXTJOIN]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.TextJoin_DispId, Name = "Func_TextJoin")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult TextJoin(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @delimiter,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @ignoreEmpty,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );

		// SKIPPED due to: Function 'CONCAT' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Concatenates a list or range of text strings.
		// /// </summary>
		// /// <param name="values">List of parameters, whose elements are 1 to 254 text strings or ranges to be joined to a single text string.</param>
		// `[[FCN_CONCAT]],Concat,CONCAT,COM.MICROSOFT.CONCAT;ML3;fgrpText;1;S;SXRM,...;;?fnConcatenate;2;CWXL;"[[PARAM_CONCAT]]";"[[FHLP_CONCAT]]";"[[AHLP1_CONCAT]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Concat_DispId, Name = "Func_Concat")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<string>")]
		// FunctionResult Concat(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<string|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );

		// SKIPPED due to: Function 'IFS' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Checks whether one or more conditions are met and returns a value corresponding to the first TRUE condition.
		// /// </summary>
		// /// <param name="values">List of parameters, where the first element of each pair is the Is any value or expression that can be evaluated to TRUE or FALSE , and the second element is is the value returned if logicalTest is TRUE.</param>
		// [[FCN_IFS]],,IFS,COM.MICROSOFT.IFS;M;fgrpLogical;2;MRNSBGE;MBE,MRNSBGE,...,...;2;fnIF;;CWXL;"[[PARAM_IFS]]";"[[FHLP_IFS]]";"[[AHLP1_IFS]]";"[[AHLP2_IFS]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Ifs_DispId, Name = "Func_Ifs")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult Ifs(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>|number|string>")] params object[] @values
		// );

		// SKIPPED due to: Skipping due to invalidly named parameters (contains invalid character '|'). | Function 'SWITCH' excluded due to lack of support on all platforms (ios/mac).
		// /// <summary>
		// /// Evaluates an expression against a list of values and returns the result corresponding to the first matching value. If there is no match, an optional default value is returned.
		// /// </summary>
		// /// <param name=""></param>
		// /// <param name=""></param>
		// /// <param name="values"></param>
		// [[FCN_SWITCH]],,SWITCH,COM.MICROSOFT.SWITCH;M;fgrpLogical;3;MRNSBGE;MNSBE,MRNSBGE,MRNSBGE,...,...,MRNSBGE;3;fnIF;;CWXL;"[[PARAM_SWITCH]]";"[[FHLP_SWITCH]]";"[[AHLP1_SWITCH]]";"[[AHLP2_SWITCH]]";"[[AHLP3_SWITCH]]"
		// [ApiSet(Version = 1.2)]
		// [ClientCallableComMember(DispatchId = FunctionsDispatchIds.Switch_DispId, Name = "Func_Switch")]
		// [ClientCallableOperation(InvalidateReturnObjectPathAfterRequest = true)]
		// [return: TypeScriptType("FunctionResult<number|string|boolean>")]
		// FunctionResult Switch(

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("number|string|boolean|Excel.Range|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>")] object @,

		// 	[KnownType(typeof(RangeReference))][TypeScriptType("Array<Excel.Range|number|string|boolean|Excel.RangeReference|Excel.FunctionResult<any>>")] params object[] @values
		// );
	}
}

